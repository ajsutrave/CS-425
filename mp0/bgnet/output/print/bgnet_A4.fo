<?xml version="1.0" encoding="utf-8"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">

<!-- FO generated by Beej's bg2fo Python script -->

<fo:layout-master-set>
	<fo:simple-page-master master-name="title"
	    page-height="297.0mm"
		page-width="210.0mm">
		<fo:region-body 
			margin-top="2.3cm"
			margin-bottom="2.3cm"
			margin-left="2.3cm"
			margin-right="2.3cm" />
	</fo:simple-page-master>
	<fo:simple-page-master master-name="title2side"
	    page-height="297.0mm"
		page-width="210.0mm">
		<fo:region-body 
			margin-top="2.3cm"
			margin-bottom="2.3cm"
			margin-left="2.3cm"
			margin-right="2.3cm" />
	</fo:simple-page-master>
	<fo:simple-page-master master-name="col2first"
	    page-height="297.0mm"
		page-width="210.0mm">
		<fo:region-body 
			margin-top="2.3cm"
			margin-bottom="2.3cm"
			margin-left="2.3cm"
			margin-right="2.3cm"  column-count="2"/>
		<fo:region-before region-name="bg-normal-first-header" extent="2.3cm" />
		<fo:region-after region-name="bg-normal-first-footer" extent="2.3cm" />
	</fo:simple-page-master>
	<fo:simple-page-master master-name="col2first2side"
	    page-height="297.0mm"
		page-width="210.0mm">
		<fo:region-body 
			margin-top="2.3cm"
			margin-bottom="2.3cm"
			margin-left="2.3cm"
			margin-right="2.3cm"  column-count="2"/>
		<fo:region-before region-name="bg-normal-first-header" extent="2.3cm" />
		<fo:region-after region-name="bg-normal-first-footer" extent="2.3cm" />
	</fo:simple-page-master>
	<fo:simple-page-master master-name="col2"
	    page-height="297.0mm"
		page-width="210.0mm">
		<fo:region-body 
			margin-top="2.3cm"
			margin-bottom="2.3cm"
			margin-left="2.3cm"
			margin-right="2.3cm"  column-count="2"/>
		<fo:region-before region-name="bg-normal-header" extent="2.3cm" />
		<fo:region-after region-name="bg-normal-footer" extent="2.3cm" />
	</fo:simple-page-master>
	<fo:simple-page-master master-name="col2even"
	    page-height="297.0mm"
		page-width="210.0mm">
		<fo:region-body 
			margin-top="2.3cm"
			margin-bottom="2.3cm"
			margin-left="2.3cm"
			margin-right="2.3cm"  column-count="2"/>
		<fo:region-before region-name="bg-normal-even-header" extent="2.3cm" />
		<fo:region-after region-name="bg-normal-even-footer" extent="2.3cm" />
	</fo:simple-page-master>
	<fo:simple-page-master master-name="col2odd"
	    page-height="297.0mm"
		page-width="210.0mm">
		<fo:region-body 
			margin-top="2.3cm"
			margin-bottom="2.3cm"
			margin-left="2.3cm"
			margin-right="2.3cm"  column-count="2"/>
		<fo:region-before region-name="bg-normal-odd-header" extent="2.3cm" />
		<fo:region-after region-name="bg-normal-odd-footer" extent="2.3cm" />
	</fo:simple-page-master>
	<fo:simple-page-master master-name="normalfirst"
	    page-height="297.0mm"
		page-width="210.0mm">
		<fo:region-body 
			margin-top="2.3cm"
			margin-bottom="2.3cm"
			margin-left="2.3cm"
			margin-right="2.3cm" />
		<fo:region-before region-name="bg-normal-first-header" extent="2.3cm" />
		<fo:region-after region-name="bg-normal-first-footer" extent="2.3cm" />
	</fo:simple-page-master>
	<fo:simple-page-master master-name="normalfirst2side"
	    page-height="297.0mm"
		page-width="210.0mm">
		<fo:region-body 
			margin-top="2.3cm"
			margin-bottom="2.3cm"
			margin-left="2.3cm"
			margin-right="2.3cm" />
		<fo:region-before region-name="bg-normal-first-header" extent="2.3cm" />
		<fo:region-after region-name="bg-normal-first-footer" extent="2.3cm" />
	</fo:simple-page-master>
	<fo:simple-page-master master-name="normal"
	    page-height="297.0mm"
		page-width="210.0mm">
		<fo:region-body 
			margin-top="2.3cm"
			margin-bottom="2.3cm"
			margin-left="2.3cm"
			margin-right="2.3cm" />
		<fo:region-before region-name="bg-normal-header" extent="2.3cm" />
		<fo:region-after region-name="bg-normal-footer" extent="2.3cm" />
	</fo:simple-page-master>
	<fo:simple-page-master master-name="normaleven"
	    page-height="297.0mm"
		page-width="210.0mm">
		<fo:region-body 
			margin-top="2.3cm"
			margin-bottom="2.3cm"
			margin-left="2.3cm"
			margin-right="2.3cm" />
		<fo:region-before region-name="bg-normal-even-header" extent="2.3cm" />
		<fo:region-after region-name="bg-normal-even-footer" extent="2.3cm" />
	</fo:simple-page-master>
	<fo:simple-page-master master-name="normalodd"
	    page-height="297.0mm"
		page-width="210.0mm">
		<fo:region-body 
			margin-top="2.3cm"
			margin-bottom="2.3cm"
			margin-left="2.3cm"
			margin-right="2.3cm" />
		<fo:region-before region-name="bg-normal-odd-header" extent="2.3cm" />
		<fo:region-after region-name="bg-normal-odd-footer" extent="2.3cm" />
	</fo:simple-page-master>
	<fo:simple-page-master master-name="blank"
	    page-height="297.0mm"
		page-width="210.0mm">
		<fo:region-body 
			margin-top="2.3cm"
			margin-bottom="2.3cm"
			margin-left="2.3cm"
			margin-right="2.3cm" />
	</fo:simple-page-master>
	<fo:page-sequence-master master-name="contents">
		<fo:repeatable-page-master-alternatives>
			<fo:conditional-page-master-reference blank-or-not-blank="not-blank" page-position="first" master-reference="normal" />
			<fo:conditional-page-master-reference blank-or-not-blank="not-blank" master-reference="normalodd" />
			<fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank" />
		</fo:repeatable-page-master-alternatives>
	</fo:page-sequence-master>
	<fo:page-sequence-master master-name="chapter">
		<fo:repeatable-page-master-alternatives>
			<fo:conditional-page-master-reference blank-or-not-blank="not-blank" page-position="first" master-reference="normalfirst" />
			<fo:conditional-page-master-reference blank-or-not-blank="not-blank" master-reference="normal" />
			<fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank" />
		</fo:repeatable-page-master-alternatives>
	</fo:page-sequence-master>
	<fo:page-sequence-master master-name="index">
		<fo:repeatable-page-master-alternatives>
			<fo:conditional-page-master-reference blank-or-not-blank="not-blank" page-position="first" master-reference="col2first" />
			<fo:conditional-page-master-reference blank-or-not-blank="not-blank" master-reference="col2" />
			<fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank" />
		</fo:repeatable-page-master-alternatives>
	</fo:page-sequence-master>
</fo:layout-master-set>

<fo:bookmark-tree>
	<fo:bookmark internal-destination="contents237940">
		<fo:bookmark-title font-weight="bold">Contents</fo:bookmark-title>
	</fo:bookmark>
	<fo:bookmark internal-destination="intro">
		<fo:bookmark-title font-weight="bold">Intro</fo:bookmark-title>
		<fo:bookmark internal-destination="audience">
			<fo:bookmark-title>Audience</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="platform">
			<fo:bookmark-title>Platform and Compiler</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="homepage">
			<fo:bookmark-title>Official Homepage and Books For Sale</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="solaris">
			<fo:bookmark-title>Note for Solaris/SunOS Programmers</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="windows">
			<fo:bookmark-title>Note for Windows Programmers</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="emailpolicy">
			<fo:bookmark-title>Email Policy</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="mirroring">
			<fo:bookmark-title>Mirroring</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="xlate">
			<fo:bookmark-title>Note for Translators</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="copyright">
			<fo:bookmark-title>Copyright and Distribution</fo:bookmark-title>
		</fo:bookmark>
	</fo:bookmark>
	<fo:bookmark internal-destination="theory">
		<fo:bookmark-title font-weight="bold">What is a socket?</fo:bookmark-title>
		<fo:bookmark internal-destination="twotypes">
			<fo:bookmark-title>Two Types of Internet Sockets</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="lowlevel">
			<fo:bookmark-title>Low level Nonsense and Network Theory</fo:bookmark-title>
		</fo:bookmark>
	</fo:bookmark>
	<fo:bookmark internal-destination="ipstructsdata">
		<fo:bookmark-title font-weight="bold">IP Addresses, structs, and Data Munging</fo:bookmark-title>
		<fo:bookmark internal-destination="ipaddrs1">
			<fo:bookmark-title>IP Addresses, versions 4 and 6</fo:bookmark-title>
			<fo:bookmark starting-state="hide" internal-destination="netslash">
				<fo:bookmark-title>Subnets</fo:bookmark-title>
			</fo:bookmark>
			<fo:bookmark starting-state="hide" internal-destination="portnums">
				<fo:bookmark-title>Port Numbers</fo:bookmark-title>
			</fo:bookmark>
		</fo:bookmark>
		<fo:bookmark internal-destination="byteorder">
			<fo:bookmark-title>Byte Order</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="structs">
			<fo:bookmark-title>structs</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="ipaddrs2">
			<fo:bookmark-title>IP Addresses, Part Deux</fo:bookmark-title>
			<fo:bookmark starting-state="hide" internal-destination="privnet">
				<fo:bookmark-title>Private (Or Disconnected) Networks</fo:bookmark-title>
			</fo:bookmark>
		</fo:bookmark>
	</fo:bookmark>
	<fo:bookmark internal-destination="ip4to6">
		<fo:bookmark-title font-weight="bold">Jumping from IPv4 to IPv6</fo:bookmark-title>
	</fo:bookmark>
	<fo:bookmark internal-destination="syscalls">
		<fo:bookmark-title font-weight="bold">System Calls or Bust</fo:bookmark-title>
		<fo:bookmark internal-destination="getaddrinfo">
			<fo:bookmark-title>getaddrinfo()—Prepare to launch!</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="socket">
			<fo:bookmark-title>socket()—Get the File Descriptor!</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="bind">
			<fo:bookmark-title>bind()—What port am I on?</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="connect">
			<fo:bookmark-title>connect()—Hey, you!</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="listen">
			<fo:bookmark-title>listen()—Will somebody please call me?</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="accept">
			<fo:bookmark-title>accept()—"Thank you for calling port 3490."</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="sendrecv">
			<fo:bookmark-title>send() and recv()—Talk to me, baby!</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="sendtorecv">
			<fo:bookmark-title>sendto() and recvfrom()—Talk to me, DGRAM-style</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="closedown">
			<fo:bookmark-title>close() and shutdown()—Get outta my face!</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="getpeername">
			<fo:bookmark-title>getpeername()—Who are you?</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="gethostname">
			<fo:bookmark-title>gethostname()—Who am I?</fo:bookmark-title>
		</fo:bookmark>
	</fo:bookmark>
	<fo:bookmark internal-destination="clientserver">
		<fo:bookmark-title font-weight="bold">Client-Server Background</fo:bookmark-title>
		<fo:bookmark internal-destination="simpleserver">
			<fo:bookmark-title>A Simple Stream Server</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="simpleclient">
			<fo:bookmark-title>A Simple Stream Client</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="datagram">
			<fo:bookmark-title>Datagram Sockets</fo:bookmark-title>
		</fo:bookmark>
	</fo:bookmark>
	<fo:bookmark internal-destination="advanced">
		<fo:bookmark-title font-weight="bold">Slightly Advanced Techniques</fo:bookmark-title>
		<fo:bookmark internal-destination="blocking">
			<fo:bookmark-title>Blocking</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="select">
			<fo:bookmark-title>select()—Synchronous I/O Multiplexing</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="sendall">
			<fo:bookmark-title>Handling Partial send()s</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="serialization">
			<fo:bookmark-title>Serialization—How to Pack Data</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="sonofdataencap">
			<fo:bookmark-title>Son of Data Encapsulation</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="broadcast">
			<fo:bookmark-title>Broadcast Packets—Hello, World!</fo:bookmark-title>
		</fo:bookmark>
	</fo:bookmark>
	<fo:bookmark internal-destination="faq">
		<fo:bookmark-title font-weight="bold">Common Questions</fo:bookmark-title>
	</fo:bookmark>
	<fo:bookmark internal-destination="man">
		<fo:bookmark-title font-weight="bold">Man Pages</fo:bookmark-title>
		<fo:bookmark internal-destination="acceptman">
			<fo:bookmark-title>accept()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="bindman">
			<fo:bookmark-title>bind()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="connectman">
			<fo:bookmark-title>connect()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="closeman">
			<fo:bookmark-title>close()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="getaddrinfoman">
			<fo:bookmark-title>getaddrinfo(), freeaddrinfo(), gai_strerror()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="gethostnameman">
			<fo:bookmark-title>gethostname()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="gethostbynameman">
			<fo:bookmark-title>gethostbyname(), gethostbyaddr()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="getnameinfoman">
			<fo:bookmark-title>getnameinfo()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="getpeernameman">
			<fo:bookmark-title>getpeername()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="errnoman">
			<fo:bookmark-title>errno</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="fcntlman">
			<fo:bookmark-title>fcntl()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="htonsman">
			<fo:bookmark-title>htons(), htonl(), ntohs(), ntohl()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="inet_ntoaman">
			<fo:bookmark-title>inet_ntoa(), inet_aton(), inet_addr</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="inet_ntopman">
			<fo:bookmark-title>inet_ntop(), inet_pton()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="listenman">
			<fo:bookmark-title>listen()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="perrorman">
			<fo:bookmark-title>perror(), strerror()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="pollman">
			<fo:bookmark-title>poll()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="recvman">
			<fo:bookmark-title>recv(), recvfrom()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="selectman">
			<fo:bookmark-title>select()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="setsockoptman">
			<fo:bookmark-title>setsockopt(), getsockopt()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="sendman">
			<fo:bookmark-title>send(), sendto()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="shutdownman">
			<fo:bookmark-title>shutdown()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="socketman">
			<fo:bookmark-title>socket()</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="sockaddr_inman">
			<fo:bookmark-title>struct sockaddr and pals</fo:bookmark-title>
		</fo:bookmark>
	</fo:bookmark>
	<fo:bookmark internal-destination="reference">
		<fo:bookmark-title font-weight="bold">More References</fo:bookmark-title>
		<fo:bookmark internal-destination="books">
			<fo:bookmark-title>Books</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="webref">
			<fo:bookmark-title>Web References</fo:bookmark-title>
		</fo:bookmark>
		<fo:bookmark internal-destination="rfcs">
			<fo:bookmark-title>RFCs</fo:bookmark-title>
		</fo:bookmark>
	</fo:bookmark>
	<fo:bookmark internal-destination="index23579002497">
		<fo:bookmark-title font-weight="bold">Index</fo:bookmark-title>
	</fo:bookmark>
</fo:bookmark-tree>



<fo:page-sequence master-reference="title">
<fo:flow font-family="Liberation Sans" flow-name="xsl-region-body">
<fo:block font-family="Liberation Sans" font-size="12pt" text-align="left" text-indent="0pt">
<fo:block font-weight="bold" font-size="2em">Beej's Guide to Network Programming</fo:block>
<fo:block space-before="0.5em" font-family="Liberation Sans" font-weight="bold" font-style="italic" font-size="1.666em" space-after="1em">Using Internet Sockets</fo:block>
<fo:block>Brian &#x201C;Beej Jorgensen&#x201D; Hall</fo:block>
<fo:block space-after="1em">beej@beej.us</fo:block>
<fo:block font-size="0.8em">Version 3.0.15</fo:block>
<fo:block font-size="0.8em" space-after="1em">July 3, 2012</fo:block>
<fo:block font-size="0.66em">Copyright &#xA9; 2012  Brian &#x201C;Beej Jorgensen&#x201D; Hall</fo:block>
</fo:block>
</fo:flow>
</fo:page-sequence>
<fo:page-sequence master-reference="normal">
<fo:flow font-family="Liberation Serif" flow-name="xsl-region-body">
<fo:block font-family="Liberation Serif" font-size="10pt" text-align="left" text-indent="0pt">
<fo:block space-after="1em">Thanks to everyone who has helped in the past and
future with me getting this guide written. Thanks to Ashley for helping
me coax the cover design into the best programmer art I could.  Thank
you to all the people who produce the Free software and packages that I
use to make the Guide: GNU, Linux, Slackware, vim, Python, Inkscape,
Apache FOP, Firefox, Red Hat, and many others.  And finally a big
thank-you to the literally thousands of you who have written in with
suggestions for improvements and words of encouragement.</fo:block>


<fo:block space-after="1em">I dedicate this guide to some of my biggest heroes and inpirators in
the world of computers: Donald Knuth, Bruce Schneier, W. Richard
Stevens, and The Woz, my Readership, and the entire Free and Open Source
Software Community.</fo:block>
</fo:block>
<fo:block space-before="5em" font-family="Liberation Serif" font-size="10pt" text-align="left" text-indent="0pt">
<fo:block space-after="1em">This book is written in XML using the vim editor on a
Slackware Linux box loaded with GNU tools.  The cover &#x201C;art&#x201D; and diagrams
are produced with Inkscape.  The XML is converted into HTML and XSL-FO
by custom Python scripts. The XSL-FO output is then munged by Apache FOP
to produce PDF documents, using Liberation fonts.  The toolchain is
composed of 100% Free and Open Source Software.</fo:block>
</fo:block>
<fo:block space-before="5em" font-family="Liberation Sans" font-size="9pt" text-align="left" text-indent="0pt">
<fo:block space-after="1em">Unless otherwise mutually agreed by the parties in
writing, the author offers the work as-is and makes no representations or
warranties of any kind concerning the work, express, implied, statutory
or otherwise, including, without limitation, warranties of title,
merchantibility, fitness for a particular purpose, noninfringement, or
the absence of latent or other defects, accuracy, or the presence of
absence of errors, whether or not discoverable.</fo:block>


<fo:block space-after="1em">Except to the extent required by applicable law, in no event will
the author be liable to you on any legal theory for any special,
incidental, consequential, punitive or exemplary damages arising out of
the use of the work, even if the author has been advised
of the possibility of such damages.</fo:block>


<fo:block space-after="1em">This document is freely distributable under the terms of the Creative
Commons Attribution-Noncommercial-No Derivative Works 3.0 License. See
the Copyright and Distribution section for details.</fo:block>
</fo:block>
<fo:block space-before="5em" font-family="Liberation Serif" font-size="10pt" text-align="left" text-indent="0pt">
Copyright &#xA9; 2012  Brian &#x201C;Beej Jorgensen&#x201D; Hall</fo:block>
</fo:flow>
</fo:page-sequence>
<fo:page-sequence master-reference="contents" format="i" force-page-count="no-force">
<fo:static-content flow-name="bg-normal-first-footer">
<fo:block font-family="Liberation Sans" font-size="8.8pt" text-align="center" padding-top="1em"><fo:page-number/></fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-footer">
<fo:block font-family="Liberation Sans" font-size="8.8pt" text-align="center" padding-top="1em"><fo:page-number/></fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-even-footer">
<fo:block font-family="Liberation Sans" font-size="8.8pt" text-align="center" padding-top="1em"><fo:page-number/></fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-odd-footer">
<fo:block font-family="Liberation Sans" font-size="8.8pt" text-align="center" padding-top="1em"><fo:page-number/></fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-even-header">
<fo:block text-align="left" font-family="Liberation Sans" font-style="italic" padding-top="1.250000cm" start-indent="2.3cm">Contents</fo:block></fo:static-content>
<fo:static-content flow-name="bg-normal-odd-header">
<fo:block text-align="right" font-family="Liberation Sans" font-style="italic" padding-top="1.250000cm" end-indent="2.3cm">Contents</fo:block></fo:static-content>
<fo:flow flow-name="xsl-region-body" font-family="Liberation Serif" font-size="11pt" text-indent="0pt">
<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="contents237940">Contents</fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>
<fo:block font-weight="bold" text-align-last="justify" keep-with-next="always"><fo:basic-link internal-destination="intro">1. Intro</fo:basic-link><fo:leader leader-pattern="dots"/><fo:basic-link internal-destination="intro"><fo:page-number-citation ref-id="intro"/></fo:basic-link></fo:block>
<fo:block space-after="0.8em" start-indent="2.000000em">
<fo:block text-align-last="justify"><fo:basic-link internal-destination="audience">1.1. Audience</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="audience"><fo:page-number-citation ref-id="audience"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="platform">1.2. Platform and Compiler</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="platform"><fo:page-number-citation ref-id="platform"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="homepage">1.3. Official Homepage and Books For Sale</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="homepage"><fo:page-number-citation ref-id="homepage"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="solaris">1.4. Note for Solaris/SunOS Programmers</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="solaris"><fo:page-number-citation ref-id="solaris"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="windows">1.5. Note for Windows Programmers</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="windows"><fo:page-number-citation ref-id="windows"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="emailpolicy">1.6. Email Policy</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="emailpolicy"><fo:page-number-citation ref-id="emailpolicy"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="mirroring">1.7. Mirroring</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="mirroring"><fo:page-number-citation ref-id="mirroring"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="xlate">1.8. Note for Translators</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="xlate"><fo:page-number-citation ref-id="xlate"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="copyright">1.9. Copyright and Distribution</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="copyright"><fo:page-number-citation ref-id="copyright"/></fo:basic-link></fo:block>
</fo:block>
<fo:block> </fo:block>
<fo:block font-weight="bold" text-align-last="justify" keep-with-next="always"><fo:basic-link internal-destination="theory">2. What is a socket?</fo:basic-link><fo:leader leader-pattern="dots"/><fo:basic-link internal-destination="theory"><fo:page-number-citation ref-id="theory"/></fo:basic-link></fo:block>
<fo:block space-after="0.8em" start-indent="2.000000em">
<fo:block text-align-last="justify"><fo:basic-link internal-destination="twotypes">2.1. Two Types of Internet Sockets</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="twotypes"><fo:page-number-citation ref-id="twotypes"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="lowlevel">2.2. Low level Nonsense and Network Theory</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="lowlevel"><fo:page-number-citation ref-id="lowlevel"/></fo:basic-link></fo:block>
</fo:block>
<fo:block> </fo:block>
<fo:block font-weight="bold" text-align-last="justify" keep-with-next="always"><fo:basic-link internal-destination="ipstructsdata">3. IP Addresses, <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct</fo:inline>s, and Data Munging</fo:basic-link><fo:leader leader-pattern="dots"/><fo:basic-link internal-destination="ipstructsdata"><fo:page-number-citation ref-id="ipstructsdata"/></fo:basic-link></fo:block>
<fo:block space-after="0.8em" start-indent="2.000000em">
<fo:block text-align-last="justify"><fo:basic-link internal-destination="ipaddrs1">3.1. IP Addresses, versions 4 and 6</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="ipaddrs1"><fo:page-number-citation ref-id="ipaddrs1"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="byteorder">3.2. Byte Order</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="byteorder"><fo:page-number-citation ref-id="byteorder"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="structs">3.3. <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct</fo:inline>s</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="structs"><fo:page-number-citation ref-id="structs"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="ipaddrs2">3.4. IP Addresses, Part Deux</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="ipaddrs2"><fo:page-number-citation ref-id="ipaddrs2"/></fo:basic-link></fo:block>
</fo:block>
<fo:block> </fo:block>
<fo:block font-weight="bold" text-align-last="justify" keep-with-next="always"><fo:basic-link internal-destination="ip4to6">4. Jumping from IPv4 to IPv6</fo:basic-link><fo:leader leader-pattern="dots"/><fo:basic-link internal-destination="ip4to6"><fo:page-number-citation ref-id="ip4to6"/></fo:basic-link></fo:block>
<fo:block space-after="0.8em" start-indent="2.000000em">
</fo:block>
<fo:block> </fo:block>
<fo:block font-weight="bold" text-align-last="justify" keep-with-next="always"><fo:basic-link internal-destination="syscalls">5. System Calls or Bust</fo:basic-link><fo:leader leader-pattern="dots"/><fo:basic-link internal-destination="syscalls"><fo:page-number-citation ref-id="syscalls"/></fo:basic-link></fo:block>
<fo:block space-after="0.8em" start-indent="2.000000em">
<fo:block text-align-last="justify"><fo:basic-link internal-destination="getaddrinfo">5.1. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline>—Prepare to launch!</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="getaddrinfo"><fo:page-number-citation ref-id="getaddrinfo"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="socket">5.2. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline>—Get the File Descriptor!</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="socket"><fo:page-number-citation ref-id="socket"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="bind">5.3. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline>—What port am I on?</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="bind"><fo:page-number-citation ref-id="bind"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="connect">5.4. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline>—Hey, you!</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="connect"><fo:page-number-citation ref-id="connect"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="listen">5.5. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">listen()</fo:inline>—Will somebody please call
me?</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="listen"><fo:page-number-citation ref-id="listen"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="accept">5.6. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline>—&#x201C;Thank you for calling port
3490.&#x201D;</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="accept"><fo:page-number-citation ref-id="accept"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="sendrecv">5.7. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>—Talk to me,
baby!</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="sendrecv"><fo:page-number-citation ref-id="sendrecv"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="sendtorecv">5.8. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendto()</fo:inline> and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline>—Talk to me, DGRAM-style</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="sendtorecv"><fo:page-number-citation ref-id="sendtorecv"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="closedown">5.9. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">close()</fo:inline> and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">shutdown()</fo:inline>—Get outta my face!</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="closedown"><fo:page-number-citation ref-id="closedown"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="getpeername">5.10. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getpeername()</fo:inline>—Who are you?</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="getpeername"><fo:page-number-citation ref-id="getpeername"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="gethostname">5.11. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostname()</fo:inline>—Who am I?</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="gethostname"><fo:page-number-citation ref-id="gethostname"/></fo:basic-link></fo:block>
</fo:block>
<fo:block> </fo:block>
<fo:block font-weight="bold" text-align-last="justify" keep-with-next="always"><fo:basic-link internal-destination="clientserver">6. Client-Server Background</fo:basic-link><fo:leader leader-pattern="dots"/><fo:basic-link internal-destination="clientserver"><fo:page-number-citation ref-id="clientserver"/></fo:basic-link></fo:block>
<fo:block space-after="0.8em" start-indent="2.000000em">
<fo:block text-align-last="justify"><fo:basic-link internal-destination="simpleserver">6.1. A Simple Stream Server</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="simpleserver"><fo:page-number-citation ref-id="simpleserver"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="simpleclient">6.2. A Simple Stream Client</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="simpleclient"><fo:page-number-citation ref-id="simpleclient"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="datagram">6.3. Datagram Sockets</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="datagram"><fo:page-number-citation ref-id="datagram"/></fo:basic-link></fo:block>
</fo:block>
<fo:block> </fo:block>
<fo:block font-weight="bold" text-align-last="justify" keep-with-next="always"><fo:basic-link internal-destination="advanced">7. Slightly Advanced Techniques</fo:basic-link><fo:leader leader-pattern="dots"/><fo:basic-link internal-destination="advanced"><fo:page-number-citation ref-id="advanced"/></fo:basic-link></fo:block>
<fo:block space-after="0.8em" start-indent="2.000000em">
<fo:block text-align-last="justify"><fo:basic-link internal-destination="blocking">7.1. Blocking</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="blocking"><fo:page-number-citation ref-id="blocking"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="select">7.2. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline>—Synchronous I/O Multiplexing</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="select"><fo:page-number-citation ref-id="select"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="sendall">7.3. Handling Partial <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline>s</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="sendall"><fo:page-number-citation ref-id="sendall"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="serialization">7.4. Serialization—How to Pack Data</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="serialization"><fo:page-number-citation ref-id="serialization"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="sonofdataencap">7.5. Son of Data Encapsulation</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="sonofdataencap"><fo:page-number-citation ref-id="sonofdataencap"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="broadcast">7.6. Broadcast Packets—Hello, World!</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="broadcast"><fo:page-number-citation ref-id="broadcast"/></fo:basic-link></fo:block>
</fo:block>
<fo:block> </fo:block>
<fo:block font-weight="bold" text-align-last="justify" keep-with-next="always"><fo:basic-link internal-destination="faq">8. Common Questions</fo:basic-link><fo:leader leader-pattern="dots"/><fo:basic-link internal-destination="faq"><fo:page-number-citation ref-id="faq"/></fo:basic-link></fo:block>
<fo:block space-after="0.8em" start-indent="2.000000em">
</fo:block>
<fo:block> </fo:block>
<fo:block font-weight="bold" text-align-last="justify" keep-with-next="always"><fo:basic-link internal-destination="man">9. Man Pages</fo:basic-link><fo:leader leader-pattern="dots"/><fo:basic-link internal-destination="man"><fo:page-number-citation ref-id="man"/></fo:basic-link></fo:block>
<fo:block space-after="0.8em" start-indent="2.000000em">
<fo:block text-align-last="justify"><fo:basic-link internal-destination="acceptman">9.1. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="acceptman"><fo:page-number-citation ref-id="acceptman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="bindman">9.2. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="bindman"><fo:page-number-citation ref-id="bindman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="connectman">9.3. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="connectman"><fo:page-number-citation ref-id="connectman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="closeman">9.4. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">close()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="closeman"><fo:page-number-citation ref-id="closeman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="getaddrinfoman">9.5. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">freeaddrinfo()</fo:inline>,
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gai_strerror()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="getaddrinfoman"><fo:page-number-citation ref-id="getaddrinfoman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="gethostnameman">9.6. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostname()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="gethostnameman"><fo:page-number-citation ref-id="gethostnameman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="gethostbynameman">9.7. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyname()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyaddr()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="gethostbynameman"><fo:page-number-citation ref-id="gethostbynameman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="getnameinfoman">9.8. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getnameinfo()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="getnameinfoman"><fo:page-number-citation ref-id="getnameinfoman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="getpeernameman">9.9. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getpeername()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="getpeernameman"><fo:page-number-citation ref-id="getpeernameman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="errnoman">9.10. <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="errnoman"><fo:page-number-citation ref-id="errnoman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="fcntlman">9.11. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">fcntl()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="fcntlman"><fo:page-number-citation ref-id="fcntlman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="htonsman">9.12. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">htons()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">htonl()</fo:inline>,
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">ntohs()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">ntohl()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="htonsman"><fo:page-number-citation ref-id="htonsman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="inet_ntoaman">9.13. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_ntoa()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_aton()</fo:inline>,
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_addr</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="inet_ntoaman"><fo:page-number-citation ref-id="inet_ntoaman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="inet_ntopman">9.14. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_ntop()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_pton()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="inet_ntopman"><fo:page-number-citation ref-id="inet_ntopman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="listenman">9.15. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">listen()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="listenman"><fo:page-number-citation ref-id="listenman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="perrorman">9.16. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">perror()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">strerror()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="perrorman"><fo:page-number-citation ref-id="perrorman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="pollman">9.17. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">poll()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="pollman"><fo:page-number-citation ref-id="pollman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="recvman">9.18. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="recvman"><fo:page-number-citation ref-id="recvman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="selectman">9.19. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="selectman"><fo:page-number-citation ref-id="selectman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="setsockoptman">9.20. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">setsockopt()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getsockopt()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="setsockoptman"><fo:page-number-citation ref-id="setsockoptman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="sendman">9.21. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendto()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="sendman"><fo:page-number-citation ref-id="sendman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="shutdownman">9.22. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">shutdown()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="shutdownman"><fo:page-number-citation ref-id="shutdownman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="socketman">9.23. <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline></fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="socketman"><fo:page-number-citation ref-id="socketman"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="sockaddr_inman">9.24. <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline> and pals</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="sockaddr_inman"><fo:page-number-citation ref-id="sockaddr_inman"/></fo:basic-link></fo:block>
</fo:block>
<fo:block> </fo:block>
<fo:block font-weight="bold" text-align-last="justify" keep-with-next="always"><fo:basic-link internal-destination="reference">10. More References</fo:basic-link><fo:leader leader-pattern="dots"/><fo:basic-link internal-destination="reference"><fo:page-number-citation ref-id="reference"/></fo:basic-link></fo:block>
<fo:block space-after="0.8em" start-indent="2.000000em">
<fo:block text-align-last="justify"><fo:basic-link internal-destination="books">10.1. Books</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="books"><fo:page-number-citation ref-id="books"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="webref">10.2. Web References</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="webref"><fo:page-number-citation ref-id="webref"/></fo:basic-link></fo:block>
<fo:block text-align-last="justify"><fo:basic-link internal-destination="rfcs">10.3. RFCs</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="rfcs"><fo:page-number-citation ref-id="rfcs"/></fo:basic-link></fo:block>
</fo:block>
<fo:block> </fo:block>
<fo:block text-align-last="justify" font-weight="bold"><fo:basic-link internal-destination="index23579002497">Index</fo:basic-link><fo:leader leader-pattern="space"/><fo:basic-link internal-destination="index23579002497"><fo:page-number-citation ref-id="index23579002497"/></fo:basic-link></fo:block>
</fo:flow>
</fo:page-sequence>








<fo:page-sequence master-reference="chapter" initial-page-number="1">
<fo:static-content flow-name="bg-normal-first-footer">
<fo:block text-align="center" font-family="Liberation Sans" font-weight="bold" font-size="11pt" padding-top="1em"><fo:page-number/></fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="50%" />
	<fo:table-column column-number="2" column-width="50%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt" font-style="italic">Beej's Guide to Network Programming</fo:block>
			</fo:table-cell>
			<fo:table-cell column-number="2" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="11pt" font-weight="bold"><fo:page-number/></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-even-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline>&#8195;&#8195;<fo:inline font-style="italic">Beej's Guide to Network Programming</fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-odd-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-style="italic">Intro</fo:inline>&#8195;&#8195;<fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="xsl-footnote-separator">
	<fo:block>
		<fo:leader leader-pattern="rule" leader-length="40%"/>
	</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body" id="intro" font-family="Liberation Serif" font-size="11pt" text-indent="2.000000em">

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="intro">1. Intro</fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>


<fo:block>Hey!  Socket programming got you down?  Is this stuff just a little
too difficult to figure out from the <fo:inline font-weight="bold">man</fo:inline> pages?  You want to
do cool Internet programming, but you don't have time to wade through a
gob of <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct</fo:inline>s trying to figure out if you have to call
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline> before you <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline>, etc., etc.</fo:block>


<fo:block>Well, guess what!  I've already done this nasty business, and I'm
dying to share the information with everyone!  You've come to the right
place.  This document should give the average competent C programmer the
edge s/he needs to get a grip on this networking noise.</fo:block>


<fo:block>And check it out: I've finally caught up with the future (just in the
nick of time, too!) and have updated the Guide for IPv6!  Enjoy!</fo:block>






<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="audience" space-before="0.5em">1.1. Audience</fo:block>


<fo:block>This document has been written as a tutorial, not a complete
reference.  It is probably at its best when read by individuals who are
just starting out with socket programming and are looking for a
foothold.  It is certainly not the <fo:inline font-style="italic">complete and total</fo:inline> guide
to sockets programming, by any means.</fo:block>


<fo:block>Hopefully, though, it'll be just enough for those man pages to start
making sense... <fo:inline font-family="Liberation Mono" font-size="0.8em">:-)</fo:inline></fo:block>








<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="platform" space-before="0.5em">1.2. Platform and Compiler</fo:block>


<fo:block>The code contained within this document was compiled on a Linux PC
using Gnu's <fo:wrapper id="indexId434909-2"></fo:wrapper><fo:inline font-weight="bold">gcc</fo:inline> compiler.  It
should, however, build on just about any platform that uses
<fo:inline font-weight="bold">gcc</fo:inline>.  Naturally, this doesn't apply if you're programming for
Windows—see the <fo:basic-link internal-destination="windows">section on Windows
programming</fo:basic-link>, below.</fo:block>








<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="homepage" space-before="0.5em">1.3. Official Homepage and Books For Sale</fo:block>


<fo:block>This official location of this document is <fo:inline font-family="Liberation Mono" font-size="0.900000em"><fo:basic-link external-destination="http://beej.us/guide/bgnet/">http://beej.us/guide/bgnet/</fo:basic-link></fo:inline>. There you will
also find example code and translations of the guide into various
languages.</fo:block>


<fo:block>To buy nicely bound print copies (some call them &#x201C;books&#x201D;), visit
<fo:inline font-family="Liberation Mono" font-size="0.900000em"><fo:basic-link external-destination="http://beej.us/guide/url/bgbuy">http://beej.us/guide/url/bgbuy</fo:basic-link></fo:inline>.  I'll appreciate the purchase
because it helps sustain my document-writing lifestyle!</fo:block>








<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="solaris" space-before="0.5em">1.4. Note for Solaris/SunOS Programmers</fo:block>


<fo:block>When compiling for <fo:wrapper id="indexId434909-3"></fo:wrapper>Solaris or <fo:wrapper id="indexId434909-4"></fo:wrapper>SunOS, you need to specify some extra command-line switches
for linking in the proper libraries.  In order to do this, simply add
&#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em"><fo:inline wrap-option="no-wrap">-lnsl</fo:inline> <fo:inline wrap-option="no-wrap">-lsocket</fo:inline> <fo:inline wrap-option="no-wrap">-lresolv</fo:inline></fo:inline>&#x201D; to the end of the compile command,
like so:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-right-style="dashed" border-bottom-style="dashed" background-color="#E0E0E0" widows="2" orphans="2" white-space="pre" font-weight="bold" font-family="Liberation Mono" font-size="0.801000em" >$ cc -o server server.c -lnsl -lsocket -lresolv</fo:block>

<fo:block>If you still get errors, you could try further adding a
&#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">-lxnet</fo:inline>&#x201D; to the end of that command line.  I don't know what
that does, exactly, but some people seem to need it.</fo:block>


<fo:block>Another place that you might find problems is in the call to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">setsockopt()</fo:inline>.  The prototype differs from that on my Linux
box, so instead of:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >int yes=1;</fo:block>

<fo:block>enter this:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >char yes='1';</fo:block>

<fo:block>As I don't have a Sun box, I haven't tested any of the above
information—it's just what people have told me through email.</fo:block>








<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="windows" space-before="0.5em">1.5. Note for Windows Programmers</fo:block>


<fo:block>At this point in the guide, historically, I've done a bit of bagging
on <fo:wrapper id="indexId434909-5"></fo:wrapper>Windows, simply due to the fact that I don't like
it very much.  But I should really be fair and tell you that Windows has
a huge install base and is obviously a perfectly fine operating
system.</fo:block>


<fo:block>They say absence makes the heart grow fonder, and in this case, I
believe it to be true.  (Or maybe it's age.)  But what I can say is that
after a decade-plus of not using Microsoft OSes for my personal work,
I'm much happier!  As such, I can sit back and safely say, &#x201C;Sure, feel
free to use Windows!&#x201D;  ...Ok yes, it does make me grit my teeth to say
that.</fo:block>


<fo:block>So I still encourage you to try <fo:wrapper id="indexId434909-6"></fo:wrapper><fo:basic-link external-destination="http://www.linux.com/" keep-with-next="always">Linux</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">1</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">1. <fo:inline font-family="Liberation Mono">http://www.linux.com/</fo:inline></fo:block></fo:footnote-body></fo:footnote>, <fo:basic-link external-destination="http://www.bsd.org/" keep-with-next="always">BSD</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">2</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">2. <fo:inline font-family="Liberation Mono">http://www.bsd.org/</fo:inline></fo:block></fo:footnote-body></fo:footnote>, or
some flavor of Unix, instead.</fo:block>


<fo:block>But people like what they like, and you Windows folk will be pleased
to know that this information is generally applicable to you guys, with
a few minor changes, if any.</fo:block>


<fo:block>One cool thing you can do is install <fo:wrapper id="indexId434909-7"></fo:wrapper><fo:basic-link external-destination="http://www.cygwin.com/" keep-with-next="always">Cygwin</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">3</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">3. <fo:inline font-family="Liberation Mono">http://www.cygwin.com/</fo:inline></fo:block></fo:footnote-body></fo:footnote>, which is a collection of Unix tools
for Windows.  I've heard on the grapevine that doing so allows all these
programs to compile unmodified.</fo:block>


<fo:block>But some of you might want to do things the Pure Windows Way.  That's
very gutsy of you, and this is what you have to do: run out and get Unix
immediately!  No, no—I'm kidding.  I'm supposed to be
Windows-friendly(er) these days...</fo:block>


<fo:block>This is what you'll have to do (unless you install <fo:basic-link external-destination="http://www.cygwin.com/">Cygwin</fo:basic-link>!): first, ignore pretty
much all of the system header files I mention in here.  All you need to
include is:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" ><fo:wrapper id="indexId434909-8"></fo:wrapper>#include &lt;winsock.h&gt;</fo:block>

<fo:block>Wait!  You also have to make a call to <fo:wrapper id="indexId434909-9"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">WSAStartup()</fo:inline> before doing anything else
with the sockets library.  The code to do that looks something like
this:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;winsock.h&gt;

{
    WSADATA wsaData;   // if this doesn't work
    //WSAData wsaData; // then try this instead

    // MAKEWORD(1,1) for Winsock 1.1, MAKEWORD(2,0) for Winsock 2.0:

    if (WSAStartup(MAKEWORD(1,1), &amp;wsaData) != 0) {
        fprintf(stderr, "WSAStartup failed.\n");
        exit(1);
    }</fo:block>

<fo:block>You also have to tell your compiler to link in the Winsock library,
usually called <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">wsock32.lib</fo:inline> or <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">winsock32.lib</fo:inline>,
or <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">ws2_32.lib</fo:inline> for Winsock 2.0.  Under VC++, this can be
done through the <fo:inline font-family="Liberation Mono" font-size="0.900000em">Project</fo:inline> menu, under <fo:inline font-family="Liberation Mono" font-size="0.900000em">Settings...</fo:inline>.
Click the <fo:inline font-family="Liberation Mono" font-size="0.900000em">Link</fo:inline> tab, and look for the box titled &#x201C;Object/library
modules&#x201D;.  Add &#x201C;wsock32.lib&#x201D; (or whichever lib is your preference) to
that list.</fo:block>


<fo:block>Or so I hear.</fo:block>


<fo:block>Finally, you need to call <fo:wrapper id="indexId434909-10"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">WSACleanup()</fo:inline> when you're all through
with the sockets library.  See your online help for details.</fo:block>


<fo:block>Once you do that, the rest of the examples in this tutorial should
generally apply, with a few exceptions.  For one thing, you can't use
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">close()</fo:inline> to close a socket—you need to use <fo:wrapper id="indexId434909-11"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">closesocket()</fo:inline>, instead.  Also, <fo:wrapper id="indexId434909-12"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline> only works with socket
descriptors, not file descriptors (like <fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline> for
<fo:inline font-family="Liberation Mono" font-size="0.900000em">stdin</fo:inline>).</fo:block>


<fo:block>There is also a socket class that you can use, <fo:wrapper id="indexId434909-13"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">CSocket</fo:inline>.  Check your compilers help pages
for more information.</fo:block>


<fo:block>To get more information about Winsock, read the <fo:wrapper id="indexId434909-14"></fo:wrapper><fo:basic-link external-destination="http://tangentsoft.net/wskfaq/" keep-with-next="always">Winsock FAQ</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">4</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">4. <fo:inline font-family="Liberation Mono">http://tangentsoft.net/wskfaq/</fo:inline></fo:block></fo:footnote-body></fo:footnote> and go from
there.</fo:block>


<fo:block>Finally, I hear that Windows has no <fo:wrapper id="indexId434909-15"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">fork()</fo:inline> system call which is, unfortunately,
used in some of my examples.  Maybe you have to link in a POSIX library
or something to get it to work, or you can use <fo:wrapper id="indexId434909-16"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">CreateProcess()</fo:inline> instead.
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">fork()</fo:inline> takes no arguments, and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">CreateProcess()</fo:inline>
takes about 48 billion arguments.  If you're not up to that, the <fo:wrapper id="indexId434909-17"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">CreateThread()</fo:inline> is a little easier to
digest...unfortunately a discussion about multithreading is beyond the
scope of this document.  I can only talk about so much, you know!</fo:block>








<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="emailpolicy" space-before="0.5em">1.6. Email Policy</fo:block>


<fo:block>I'm generally available to help out with <fo:wrapper id="indexId434909-18"></fo:wrapper>email questions so feel free to write in, but I can't guarantee a
response.  I lead a pretty busy life and there are times when I just
can't answer a question you have.  When that's the case, I usually just
delete the message.  It's nothing personal; I just won't ever have the
time to give the detailed answer you require.</fo:block>


<fo:block>As a rule, the more complex the question, the less likely I am to
respond.  If you can narrow down your question before mailing it and be
sure to include any pertinent information (like platform, compiler,
error messages you're getting, and anything else you think might help me
troubleshoot), you're much more likely to get a response.  For more
pointers, read ESR's document, <fo:basic-link external-destination="http://www.catb.org/~esr/faqs/smart-questions.html" keep-with-next="always">How To Ask
Questions The Smart Way</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">5</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">5. <fo:inline font-family="Liberation Mono">http://www.catb.org/~esr/faqs/smart-questions.html</fo:inline></fo:block></fo:footnote-body></fo:footnote>.</fo:block>


<fo:block>If you don't get a response, hack on it some more, try to find the
answer, and if it's still elusive, then write me again with the
information you've found and hopefully it will be enough for me to help
out.</fo:block>


<fo:block>Now that I've badgered you about how to write and not write me, I'd
just like to let you know that I <fo:inline font-style="italic">fully</fo:inline> appreciate all the
praise the guide has received over the years.  It's a real morale boost,
and it gladdens me to hear that it is being used for good! <fo:inline font-family="Liberation Mono" font-size="0.8em">:-)</fo:inline>
Thank you!</fo:block>









<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="mirroring" space-before="0.5em">1.7. Mirroring</fo:block>


<fo:block><fo:wrapper id="indexId434909-19"></fo:wrapper>You are more than welcome to mirror this site,
whether publicly or privately.  If you publicly mirror the site and want
me to link to it from the main page, drop me a line at
<fo:inline font-family="Liberation Mono" font-size="0.8em">beej@beej.us</fo:inline>.</fo:block>









<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="xlate" space-before="0.5em">1.8. Note for Translators</fo:block>


<fo:block><fo:wrapper id="indexId434909-20"></fo:wrapper>If you want to translate the guide into
another language, write me at <fo:inline font-family="Liberation Mono" font-size="0.8em">beej@beej.us</fo:inline> and I'll link to
your translation from the main page. Feel free to add your name and
contact info to the translation.</fo:block>


<fo:block>Please note the license restrictions in the Copyright and
Distribution section, below.</fo:block>


<fo:block>If you want me to host the translation, just ask. I'll also link to
it if you want to host it; either way is fine.</fo:block>








<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="copyright" space-before="0.5em">1.9. Copyright and Distribution</fo:block>


<fo:block>Beej's Guide to Network Programming is Copyright &#xA9; 2012
Brian &#x201C;Beej Jorgensen&#x201D; Hall.</fo:block>


<fo:block>With specific exceptions for source code and translations, below,
this work is licensed under the Creative Commons Attribution-
Noncommercial- No Derivative Works 3.0 License. To view a copy of this
license, visit <fo:inline font-family="Liberation Mono" font-size="0.900000em"><fo:basic-link external-destination="http://creativecommons.org/licenses/by-nc-nd/3.0/">http://creativecommons.org/licenses/by-nc-nd/3.0/</fo:basic-link></fo:inline> or send a letter to Creative
Commons, 171 Second Street, Suite 300, San Francisco, California, 94105,
USA.</fo:block>


<fo:block>One specific exception to the &#x201C;No Derivative Works&#x201D; portion of the
license is as follows: this guide may be freely translated into any
language, provided the translation is accurate, and the guide is
reprinted in its entirety.  The same license restrictions apply to the
translation as to the original guide.  The translation may also include
the name and contact information for the translator.</fo:block>


<fo:block>The C source code presented in this document is hereby granted to the
public domain, and is completely free of any license restriction.</fo:block>


<fo:block>Educators are freely encouraged to recommend or supply copies of this
guide to their students.</fo:block>


<fo:block>Contact <fo:inline font-family="Liberation Mono" font-size="0.8em">beej@beej.us</fo:inline> for more information.</fo:block>




</fo:flow>
</fo:page-sequence>
 






<fo:page-sequence master-reference="chapter">
<fo:static-content flow-name="bg-normal-first-footer">
<fo:block text-align="center" font-family="Liberation Sans" font-weight="bold" font-size="11pt" padding-top="1em"><fo:page-number/></fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="50%" />
	<fo:table-column column-number="2" column-width="50%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt" font-style="italic">Beej's Guide to Network Programming</fo:block>
			</fo:table-cell>
			<fo:table-cell column-number="2" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="11pt" font-weight="bold"><fo:page-number/></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-even-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline>&#8195;&#8195;<fo:inline font-style="italic">Beej's Guide to Network Programming</fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-odd-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-style="italic">What is a socket?</fo:inline>&#8195;&#8195;<fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="xsl-footnote-separator">
	<fo:block>
		<fo:leader leader-pattern="rule" leader-length="40%"/>
	</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body" id="theory" font-family="Liberation Serif" font-size="11pt" text-indent="2.000000em">

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="theory">2. What is a socket?</fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>


<fo:block>You hear talk of &#x201C;<fo:wrapper id="indexId434909-21"></fo:wrapper>sockets&#x201D; all the time, and
perhaps you are wondering just what they are exactly.  Well, they're
this: a way to speak to other programs using standard Unix <fo:wrapper id="indexId434909-22"></fo:wrapper>file descriptors.</fo:block>


<fo:block>What?</fo:block>


<fo:block>Ok—you may have heard some Unix hacker state, &#x201C;Jeez,
<fo:inline font-style="italic">everything</fo:inline> in Unix is a file!&#x201D;  What that person may have
been talking about is the fact that when Unix programs do any sort of
I/O, they do it by reading or writing to a file descriptor.  A file
descriptor is simply an integer associated with an open file.  But (and
here's the catch), that file can be a network connection, a FIFO, a
pipe, a terminal, a real on-the-disk file, or just about anything else.
Everything in Unix <fo:inline font-style="italic">is</fo:inline> a file!  So when you want to
communicate with another program over the Internet you're gonna do it
through a file descriptor, you'd better believe it.</fo:block>


<fo:block>&#x201C;Where do I get this file descriptor for network communication, Mr.
Smarty-Pants?&#x201D; is probably the last question on your mind right now, but
I'm going to answer it anyway: You make a call to the <fo:wrapper id="indexId434909-23"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline> system routine.  It returns the
<fo:wrapper id="indexId434909-24"></fo:wrapper>socket descriptor, and you communicate
through it using the specialized <fo:wrapper id="indexId434909-25"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline>
and <fo:wrapper id="indexId434909-26"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> (<fo:inline font-weight="bold"><fo:basic-link internal-destination="sendman">man
send</fo:basic-link></fo:inline>, <fo:inline font-weight="bold"><fo:basic-link internal-destination="recvman">man recv</fo:basic-link></fo:inline>)
socket calls.</fo:block>


<fo:block>&#x201C;But, hey!&#x201D; you might be exclaiming right about now.  &#x201C;If it's a file
descriptor, why in the name of Neptune can't I just use the normal <fo:wrapper id="indexId434909-27"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">read()</fo:inline> and <fo:wrapper id="indexId434909-28"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">write()</fo:inline> calls to communicate through the
socket?&#x201D;  The short answer is, &#x201C;You can!&#x201D;  The longer answer is, &#x201C;You
can, but <fo:wrapper id="indexId434909-29"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> and <fo:wrapper id="indexId434909-30"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> offer much greater control over your
data transmission.&#x201D;</fo:block>


<fo:block>What next?  How about this: there are all kinds of sockets.  There
are <fo:wrapper id="indexId434909-31"></fo:wrapper>DARPA Internet addresses (Internet
Sockets), path names on a local node (Unix Sockets), CCITT X.25
addresses (X.25 Sockets that you can safely ignore), and probably many
others depending on which Unix flavor you run.  This document deals only
with the first: Internet Sockets.</fo:block>







<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="twotypes" space-before="0.5em">2.1. Two Types of Internet Sockets</fo:block>


<fo:block>What's this?  <fo:wrapper id="indexId434909-32"></fo:wrapper>There are two types of Internet
sockets?  Yes.  Well, no.  I'm lying.  There are more, but I didn't want
to scare you.  I'm only going to talk about two types here.  Except for
this sentence, where I'm going to tell you that &#x201C;<fo:wrapper id="indexId434909-33"></fo:wrapper><fo:wrapper id="indexId434909-34"></fo:wrapper>Raw Sockets&#x201D; are also very powerful and
you should look them up.</fo:block>


<fo:block>All right, already.  What are the two types?  One is &#x201C;<fo:wrapper id="indexId434909-35"></fo:wrapper>Stream Sockets&#x201D;; the other is
&#x201C;<fo:wrapper id="indexId434909-36"></fo:wrapper>Datagram Sockets&#x201D;, which
may hereafter be referred to as &#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_STREAM</fo:inline>&#x201D; and
&#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_DGRAM</fo:inline>&#x201D;, respectively.  Datagram sockets are
sometimes called &#x201C;connectionless sockets&#x201D;.  (Though they can be <fo:wrapper id="indexId434909-37"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline>'d if you really want.  See
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em"><fo:basic-link internal-destination="connect">connect()</fo:basic-link></fo:inline>, below.)</fo:block>


<fo:block>Stream sockets are reliable two-way connected communication streams.
If you output two items into the socket in the order &#x201C;1, 2&#x201D;, they will
arrive in the order &#x201C;1, 2&#x201D; at the opposite end.  They will also be
error-free.  I'm so certain, in fact, they will be error-free, that I'm
just going to put my fingers in my ears and chant <fo:inline font-style="italic">la la la la</fo:inline>
if anyone tries to claim otherwise.</fo:block>


<fo:block>What uses <fo:wrapper id="indexId434909-38"></fo:wrapper>stream sockets?  Well, you may
have heard of the <fo:wrapper id="indexId434909-39"></fo:wrapper><fo:inline font-weight="bold">telnet</fo:inline> application, yes?
It uses stream sockets.  All the characters you type need to arrive in
the same order you type them, right?  Also, web browsers use the <fo:wrapper id="indexId434909-40"></fo:wrapper>HTTP protocol which uses stream sockets to get
pages.  Indeed, if you telnet to a web site on port 80, and type
&#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">GET / HTTP/1.0</fo:inline>&#x201D; and hit RETURN twice, it'll dump the HTML back
at you!</fo:block>


<fo:block>How do stream sockets achieve this high level of data transmission
quality?  They use a protocol called &#x201C;The Transmission Control
Protocol&#x201D;, otherwise known as <fo:wrapper id="indexId434909-41"></fo:wrapper>&#x201C;TCP&#x201D; (see <fo:basic-link external-destination="http://tools.ietf.org/html/rfc793" keep-with-next="always">RFC 793</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">6</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">6. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc793</fo:inline></fo:block></fo:footnote-body></fo:footnote> for extremely detailed info
on TCP.)  TCP makes sure your data arrives sequentially and error-free.
You may have heard &#x201C;TCP&#x201D; before as the better half of &#x201C;TCP/IP&#x201D; where <fo:wrapper id="indexId434909-42"></fo:wrapper> &#x201C;IP&#x201D; stands for &#x201C;Internet Protocol&#x201D; (see <fo:basic-link external-destination="http://tools.ietf.org/html/rfc791" keep-with-next="always">RFC 791</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">7</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">7. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc791</fo:inline></fo:block></fo:footnote-body></fo:footnote>.)  IP deals primarily with
Internet routing and is not generally responsible for data
integrity.</fo:block>


<fo:block>Cool.  <fo:wrapper id="indexId434909-43"></fo:wrapper>What about Datagram sockets?  Why
are they called connectionless?  What is the deal, here, anyway?  Why
are they unreliable?  Well, here are some facts: if you send a datagram,
it may arrive.  It may arrive out of order.  If it arrives, the data
within the packet will be error-free.</fo:block>


<fo:block>Datagram sockets also use IP for routing, but they don't use TCP;
they use the &#x201C;User Datagram Protocol&#x201D;, or <fo:wrapper id="indexId434909-44"></fo:wrapper>&#x201C;UDP&#x201D; (see
<fo:basic-link external-destination="http://tools.ietf.org/html/rfc768" keep-with-next="always">RFC 768</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">8</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">8. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc768</fo:inline></fo:block></fo:footnote-body></fo:footnote>.)</fo:block>


<fo:block>Why are they connectionless?  Well, basically, it's because you don't
have to maintain an open connection as you do with stream sockets.  You
just build a packet, slap an IP header on it with destination
information, and send it out.  No connection needed.  They are generally
used either when a TCP stack is unavailable or when a few dropped
packets here and there don't mean the end of the Universe.  Sample
applications: <fo:inline font-weight="bold">tftp</fo:inline> (trivial file transfer protocol, a little
brother to FTP), <fo:inline font-weight="bold">dhcpcd</fo:inline> (a DHCP client), multiplayer games,
streaming audio, video conferencing, etc.</fo:block>


<fo:block>&#x201C;Wait a minute!  <fo:inline font-weight="bold">tftp</fo:inline> and <fo:inline font-weight="bold">dhcpcd</fo:inline> are used to
transfer binary applications from one host to another!  Data can't be
lost if you expect the application to work when it arrives!  What kind
of dark magic is this?&#x201D;</fo:block>


<fo:block>Well, my human friend, <fo:inline font-weight="bold">tftp</fo:inline> and similar programs have
their own protocol on top of UDP.  For example, the tftp protocol says
that for each packet that gets sent, the recipient has to send back a
packet that says, &#x201C;I got it!&#x201D; (an &#x201C;ACK&#x201D; packet.)  If the sender of the
original packet gets no reply in, say, five seconds, he'll re-transmit
the packet until he finally gets an ACK.  This acknowledgment procedure
is very important when implementing reliable <fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_DGRAM</fo:inline>
applications.</fo:block>


<fo:block>For unreliable applications like games, audio, or video, you just
ignore the dropped packets, or perhaps try to cleverly compensate for
them.  (Quake players will know the manifestation this effect by the
technical term: <fo:inline font-style="italic">accursed lag</fo:inline>.  The word &#x201C;accursed&#x201D;, in this
case, represents any extremely profane utterance.)</fo:block>


<fo:block>Why would you use an unreliable underlying protocol?  Two reasons:
speed and speed.  It's way faster to fire-and-forget than it is to keep
track of what has arrived safely and make sure it's in order and all
that.  If you're sending chat messages, TCP is great; if you're sending
40 positional updates per second of the players in the world, maybe it
doesn't matter so much if one or two get dropped, and UDP is a good
choice.</fo:block>









<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="lowlevel" space-before="0.5em">2.2. Low level Nonsense and Network Theory</fo:block>


<fo:block>Since I just mentioned layering of protocols, it's time to talk
about how networks really work, and to show some examples of how <fo:wrapper id="indexId434909-45"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_DGRAM</fo:inline> packets are built.
Practically, you can probably skip this section.  It's good background,
however.</fo:block>


<fo:block id="figure1" space-before="0.75em" space-after="0.75em">
<fo:block text-align="center"><fo:external-graphic content-width="4.736in" src="dataencap-300-4.736.png"/></fo:block>

<fo:block font-weight="bold" text-align="center" keep-with-previous="always">Data Encapsulation.</fo:block>

</fo:block>

<fo:block>Hey, kids, it's time to learn about <fo:wrapper id="indexId434909-46"></fo:wrapper><fo:inline font-style="italic"><fo:basic-link internal-destination="figure1">Data
Encapsulation</fo:basic-link></fo:inline>!  This is very very important.  It's so
important that you might just learn about it if you take the networks
course here at Chico State <fo:inline font-family="Liberation Mono" font-size="0.8em">;-)</fo:inline>.  Basically, it says this: a packet
is born, the packet is wrapped (&#x201C;encapsulated&#x201D;) in a <fo:wrapper id="indexId434909-47"></fo:wrapper>header (and rarely a <fo:wrapper id="indexId434909-48"></fo:wrapper>footer) by the
first protocol (say, the <fo:wrapper id="indexId434909-49"></fo:wrapper>TFTP protocol), then the whole
thing (TFTP header included) is encapsulated again by the next protocol
(say, <fo:wrapper id="indexId434909-50"></fo:wrapper>UDP), then again by the next (<fo:wrapper id="indexId434909-51"></fo:wrapper>IP),
then again by the final protocol on the hardware (physical) layer (say,
<fo:wrapper id="indexId434909-52"></fo:wrapper>Ethernet).</fo:block>


<fo:block>When another computer receives the packet, the hardware strips the
Ethernet header, the kernel strips the IP and UDP headers, the TFTP
program strips the TFTP header, and it finally has the data.</fo:block>


<fo:block>Now I can finally talk about the infamous <fo:wrapper id="indexId434909-53"></fo:wrapper><fo:inline font-style="italic">Layered Network Model</fo:inline> (aka &#x201C;ISO/OSI&#x201D;).  This Network
Model describes a system of network functionality that has many
advantages over other models.  For instance, you can write sockets
programs that are exactly the same without caring how the data is
physically transmitted (serial, thin Ethernet, AUI, whatever) because
programs on lower levels deal with it for you.  The actual network
hardware and topology is transparent to the socket programmer.</fo:block>


<fo:block>Without any further ado, I'll present the layers of the full-blown
model.  Remember this for network class exams:</fo:block>


<fo:list-block provisional-distance-between-starts="4.0em" space-before="1em" space-after="1em" start-indent="0cm">

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">&#x2022;</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Application</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">&#x2022;</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Presentation</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">&#x2022;</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Session</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">&#x2022;</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Transport</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">&#x2022;</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Network</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">&#x2022;</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Data Link</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">&#x2022;</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Physical</fo:block>
		</fo:list-item-body>
	</fo:list-item>

</fo:list-block>


<fo:block>The Physical Layer is the hardware (serial, Ethernet, etc.).  The
Application  Layer is just about as far from the physical layer as you
can imagine—it's the place where users interact with the
network.</fo:block>


<fo:block>Now, this model is so general you could probably use it as an
automobile repair guide if you really wanted to.  A layered model more
consistent with Unix might be:</fo:block>


<fo:list-block provisional-distance-between-starts="4.0em" space-before="1em" space-after="1em" start-indent="0cm">

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">&#x2022;</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Application Layer (<fo:inline font-style="italic">telnet, ftp, etc.</fo:inline>)</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">&#x2022;</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Host-to-Host Transport Layer (<fo:inline font-style="italic">TCP, UDP</fo:inline>)</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">&#x2022;</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Internet Layer (<fo:inline font-style="italic">IP and routing</fo:inline>)</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">&#x2022;</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Network Access Layer (<fo:inline font-style="italic">Ethernet, wi-fi, or whatever</fo:inline>)</fo:block>
		</fo:list-item-body>
	</fo:list-item>

</fo:list-block>


<fo:block>At this point in time, you can probably see how these layers
correspond to the encapsulation of the original data.</fo:block>


<fo:block>See how much work there is in building a simple packet?  Jeez!
And you have to type in the packet headers yourself using
&#x201C;<fo:inline font-weight="bold">cat</fo:inline>&#x201D;!  Just kidding.  All you have to do for stream sockets
is <fo:wrapper id="indexId434909-54"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> the data out.  All you have to
do for datagram sockets is encapsulate the packet in the method of your
choosing and <fo:wrapper id="indexId434909-55"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendto()</fo:inline> it out.  The
kernel builds the Transport Layer and Internet Layer on for you and the
hardware does the Network Access Layer.  Ah, modern technology.</fo:block>


<fo:block>So ends our brief foray into network theory.  Oh yes, I forgot to
tell you everything I wanted to say about routing: nothing!  That's
right, I'm not going to talk about it at all.  The router strips the
packet to the IP header, consults its routing table, <fo:wrapper id="indexId434909-56"></fo:wrapper>blah blah blah.  Check out the <fo:basic-link external-destination="http://tools.ietf.org/html/rfc791" keep-with-next="always">IP RFC</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">9</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">9. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc791</fo:inline></fo:block></fo:footnote-body></fo:footnote> if you really really care.  If
you never learn about it, well, you'll live.</fo:block>




</fo:flow>
</fo:page-sequence>
 




<fo:page-sequence master-reference="chapter">
<fo:static-content flow-name="bg-normal-first-footer">
<fo:block text-align="center" font-family="Liberation Sans" font-weight="bold" font-size="11pt" padding-top="1em"><fo:page-number/></fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="50%" />
	<fo:table-column column-number="2" column-width="50%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt" font-style="italic">Beej's Guide to Network Programming</fo:block>
			</fo:table-cell>
			<fo:table-cell column-number="2" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="11pt" font-weight="bold"><fo:page-number/></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-even-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline>&#8195;&#8195;<fo:inline font-style="italic">Beej's Guide to Network Programming</fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-odd-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-style="italic">IP Addresses, structs, and Data Munging</fo:inline>&#8195;&#8195;<fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="xsl-footnote-separator">
	<fo:block>
		<fo:leader leader-pattern="rule" leader-length="40%"/>
	</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body" id="ipstructsdata" font-family="Liberation Serif" font-size="11pt" text-indent="2.000000em">

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="ipstructsdata">3. IP Addresses, <fo:inline font-family="Liberation Mono" wrap-option="no-wrap">struct</fo:inline>s, and Data Munging</fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>


<fo:block>Here's the part of the game where we get to talk code for a
change.</fo:block>


<fo:block>But first, let's discuss more non-code!  Yay!  First I want to talk
about <fo:wrapper id="indexId434909-57"></fo:wrapper>IP addresses and ports for just a tad so we have
that sorted out.  Then we'll talk about how the sockets API stores and
manipulates IP addresses and other data.</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="ipaddrs1" space-before="0.5em">3.1. IP Addresses, versions 4 and 6</fo:block>


<fo:block>In the good old days back when Ben Kenobi was still called Obi Wan
Kenobi, there was a wonderful network routing system called The Internet
Protocol Version 4, also called <fo:wrapper id="indexId434909-58"></fo:wrapper>IPv4.  It had addresses
made up of four bytes (A.K.A. four &#x201C;octets&#x201D;), and was commonly written
in &#x201C;dots and numbers&#x201D; form, like so: <fo:inline font-family="Liberation Mono" font-size="0.900000em">192.0.2.111</fo:inline>.</fo:block>


<fo:block>You've probably seen it around.</fo:block>


<fo:block>In fact, as of this writing, virtually every site on the Internet
uses IPv4.</fo:block>


<fo:block>Everyone, including Obi Wan, was happy.  Things were great, until
some naysayer by the name of Vint Cerf warned everyone that we were
about to run out of IPv4 addresses!</fo:block>


<fo:block>(Besides warning everyone of the Coming IPv4 Apocalypse Of Doom And
Gloom, <fo:wrapper id="indexId434909-59"></fo:wrapper><fo:basic-link external-destination="http://en.wikipedia.org/wiki/Vinton_Cerf" keep-with-next="always">Vint Cerf</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">10</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">10. <fo:inline font-family="Liberation Mono">http://en.wikipedia.org/wiki/Vinton_Cerf</fo:inline></fo:block></fo:footnote-body></fo:footnote> is
also well-known for being The Father Of The Internet.  So I really am in
no position to second-guess his judgment.)</fo:block>


<fo:block>Run out of addresses?  How could this be?  I mean, there are like
billions of IP addresses in a 32-bit IPv4 address.  Do we really have
billions of computers out there?</fo:block>


<fo:block>Yes.</fo:block>


<fo:block>Also, in the beginning, when there were only a few computers and
everyone thought a billion was an impossibly large number, some big
organizations were generously allocated millions of IP addresses for
their own use.  (Such as Xerox, MIT, Ford, HP, IBM, GE, AT&amp;T, and
some little company called Apple, to name a few.)</fo:block>


<fo:block>In fact, if it weren't for several stopgap measures, we would have
run out a long time ago.</fo:block>


<fo:block>But now we're living in an era where we're talking about every human
having an IP address, every computer, every calculator, every phone,
every parking meter, and (why not) every puppy dog, as well.</fo:block>


<fo:block>And so, <fo:wrapper id="indexId434909-60"></fo:wrapper>IPv6 was born.  Since Vint Cerf is probably
immortal (even if his physical form should pass on, heaven forbid, he is
probably already existing as some kind of hyper-intelligent <fo:basic-link external-destination="http://en.wikipedia.org/wiki/ELIZA" keep-with-next="always">ELIZA</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">11</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">11. <fo:inline font-family="Liberation Mono">http://en.wikipedia.org/wiki/ELIZA</fo:inline></fo:block></fo:footnote-body></fo:footnote> program out in the depths of the
Internet2), no one wants to have to hear him say again &#x201C;I told you so&#x201D;
if we don't have enough addresses in the next version of the Internet
Protocol.</fo:block>


<fo:block>What does this suggest to you?</fo:block>


<fo:block>That we need a <fo:inline font-style="italic">lot</fo:inline> more addresses.  That we need not just
twice as many addresses, not a billion times as many, not a thousand
trillion times as many, but <fo:inline font-style="italic">79 MILLION BILLION TRILLION times as
many possible addresses!</fo:inline>  That'll show 'em!</fo:block>


<fo:block>You're saying, &#x201C;Beej, is that true?  I have every reason to
disbelieve large numbers.&#x201D;  Well, the difference between 32 bits and 128
bits might not sound like a lot; it's only 96 more bits, right?  But
remember, we're talking powers here: 32 bits represents some 4 billion
numbers (2<fo:inline font-size="0.5em" baseline-shift="super">32</fo:inline>), while 128 bits represents about 340
trillion trillion trillion numbers (for real, 2<fo:inline font-size="0.5em" baseline-shift="super">128</fo:inline>).
That's like a million IPv4 Internets for <fo:inline font-style="italic">every single star in the
Universe</fo:inline>.</fo:block>


<fo:block>Forget this dots-and-numbers look of IPv4, too; now we've got a
hexadecimal representation, with each two-byte chunk separated by a
colon, like this: <fo:inline font-family="Liberation Mono" font-size="0.900000em">2001:0db8:c9d2:aee5:73e3:934a:a5ae:9551</fo:inline>.</fo:block>


<fo:block>That's not all!  Lots of times, you'll have an IP address with lots
of zeros in it, and you can compress them between two colons.  And you
can leave off leading zeros for each byte pair.  For instance, each of
these pairs of addresses are equivalent:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-right-style="dashed" border-bottom-style="dashed" background-color="#E0E0E0" widows="2" orphans="2" white-space="pre" font-weight="bold" font-family="Liberation Mono" font-size="0.801000em" >2001:0db8:c9d2:0012:0000:0000:0000:0051
2001:db8:c9d2:12::51

2001:0db8:ab00:0000:0000:0000:0000:0000
2001:db8:ab00::

0000:0000:0000:0000:0000:0000:0000:0001
::1
</fo:block>

<fo:block>The address <fo:inline font-family="Liberation Mono" font-size="0.900000em">::1</fo:inline> is the <fo:inline font-style="italic">loopback address</fo:inline>.  It
always means &#x201C;this machine I'm running on now&#x201D;.  In IPv4, the loopback
address is 127.0.0.1.</fo:block>


<fo:block>Finally, there's an IPv4-compatibility mode for IPv6 addresses that
you might come across.  If you want, for example, to represent the IPv4
address 192.0.2.33 as an IPv6 address, you use the following notation:
&#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">::ffff:192.0.2.33</fo:inline>&#x201D;.</fo:block>


<fo:block>We're talking serious fun.</fo:block>


<fo:block>In fact, it's such serious fun, that the Creators of IPv6 have quite
cavalierly lopped off trillions and trillions of addresses for reserved
use, but we have so many, frankly, who's even counting anymore?  There
are plenty left over for every man, woman, child, puppy, and parking
meter on every planet in the galaxy.  And believe me, every planet in
the galaxy has parking meters.  You know it's true.</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always" id="netslash" space-before="0.5em">3.1.1. Subnets</fo:block>


<fo:block>For organizational reasons, it's sometimes convenient to declare that
&#x201C;this first part of this IP address up through this bit is the
<fo:inline font-style="italic">network portion</fo:inline> of the IP address, and the remainder is the
<fo:inline font-style="italic">host portion</fo:inline>.</fo:block>


<fo:block>For instance, with IPv4, you might have <fo:inline font-family="Liberation Mono" font-size="0.900000em">192.0.2.12</fo:inline>, and we could say
that the first three bytes are the network and the last byte was the
host.  Or, put another way, we're talking about host <fo:inline font-family="Liberation Mono" font-size="0.900000em">12</fo:inline> on
network <fo:inline font-family="Liberation Mono" font-size="0.900000em">192.0.2.0</fo:inline> (see how we zero out the byte that was the
host.)</fo:block>


<fo:block>And now for more outdated information!  Ready?  In the Ancient Times,
there were &#x201C;classes&#x201D; of subnets, where the first one, two, or three
bytes of the address was the network part.  If you were lucky enough to
have one byte for the network and three for the host, you could have
24 bits-worth of hosts on your network (24 million or so).  That was a
&#x201C;Class A&#x201D; network.  On the opposite end was a &#x201C;Class C&#x201D;, with three
bytes of network, and one byte of host (256 hosts, minus a couple that
were reserved.)</fo:block>


<fo:block>So as you can see, there were just a few Class As, a huge pile of
Class Cs, and some Class Bs in the middle.</fo:block>


<fo:block>The network portion of the IP address is described by something
called the <fo:inline font-style="italic">netmask</fo:inline>, which you bitwise-AND with the IP address
to get the network number out of it.  The netmask usually looks
something like <fo:inline font-family="Liberation Mono" font-size="0.900000em">255.255.255.0</fo:inline>.  (E.g. with that netmask, if your
IP is <fo:inline font-family="Liberation Mono" font-size="0.900000em">192.0.2.12</fo:inline>, then your network is <fo:inline font-family="Liberation Mono" font-size="0.900000em">192.0.2.12</fo:inline> AND
<fo:inline font-family="Liberation Mono" font-size="0.900000em">255.255.255.0</fo:inline> which gives <fo:inline font-family="Liberation Mono" font-size="0.900000em">192.0.2.0</fo:inline>.)</fo:block>


<fo:block>Unfortunately, it turned out that this wasn't fine-grained enough for
the eventual needs of the Internet; we were running out of Class C
networks quite quickly, and we were most definitely out of Class As, so
don't even bother to ask.  To remedy this, The Powers That Be allowed
for the netmask to be an arbitrary number of bits, not just 8, 16, or
24.  So you might have a netmask of, say <fo:inline font-family="Liberation Mono" font-size="0.900000em">255.255.255.252</fo:inline>, which
is 30 bits of network, and 2 bits of host allowing for four hosts on the
network.  (Note that the netmask is <fo:inline font-style="italic">ALWAYS</fo:inline> a bunch of 1-bits
followed by a bunch of 0-bits.)</fo:block>


<fo:block>But it's a bit unwieldy to use a big string of numbers like
<fo:inline font-family="Liberation Mono" font-size="0.900000em">255.192.0.0</fo:inline> as a netmask.  First of all, people don't have an
intuitive idea of how many bits that is, and secondly, it's really not
compact.  So the New Style came along, and it's much nicer.  You just
put a slash after the IP address, and then follow that by the number of
network bits in decimal.  Like this: <fo:inline font-family="Liberation Mono" font-size="0.900000em">192.0.2.12/30</fo:inline>.</fo:block>


<fo:block>Or, for IPv6, something like this: <fo:inline font-family="Liberation Mono" font-size="0.900000em">2001:db8::/32</fo:inline> or
<fo:inline font-family="Liberation Mono" font-size="0.900000em">2001:db8:5413:4028::9db9/64</fo:inline>.</fo:block>





<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always" id="portnums" space-before="0.5em">3.1.2. Port Numbers</fo:block>


<fo:block>If you'll kindly remember, I presented you earlier with the <fo:basic-link internal-destination="lowlevel">Layered Network Model</fo:basic-link> which had the Internet
Layer (IP) split off from the Host-to-Host Transport Layer (TCP and
UDP).  Get up to speed on that before the next paragraph.</fo:block>


<fo:block>Turns out that besides an IP address (used by the IP layer), there
is another address that is used by TCP (stream sockets) and,
coincidentally, by UDP (datagram sockets).  It is the <fo:inline font-style="italic">port
number</fo:inline>.  It's a 16-bit number that's like the local address for
the connection.</fo:block>


<fo:block>Think of the IP address as the street address of a hotel, and the
port number as the room number.  That's a decent analogy; maybe later
I'll come up with one involving the automobile industry.</fo:block>


<fo:block>Say you want to have a computer that handles incoming mail AND web
services—how do you differentiate between the two on a computer
with a single IP address?</fo:block>


<fo:block>Well, different services on the Internet have different well-known
port numbers.  You can see them all in <fo:basic-link external-destination="http://www.iana.org/assignments/port-numbers" keep-with-next="always">the Big
IANA Port List</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">12</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">12. <fo:inline font-family="Liberation Mono">http://www.iana.org/assignments/port-numbers</fo:inline></fo:block></fo:footnote-body></fo:footnote> or, if you're on a Unix box, in your
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">/etc/services</fo:inline> file.  HTTP (the web) is port 80, telnet is
port 23, SMTP is port 25, the game <fo:basic-link external-destination="http://en.wikipedia.org/wiki/Doom_(video_game)" keep-with-next="always">DOOM</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">13</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">13. <fo:inline font-family="Liberation Mono">http://en.wikipedia.org/wiki/Doom_(video_game)</fo:inline></fo:block></fo:footnote-body></fo:footnote>
used port 666, etc. and so on.  Ports under 1024 are often considered
special, and usually require special OS privileges to use.</fo:block>


<fo:block>And that's about it!</fo:block>


 

 


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="byteorder" space-before="0.5em">3.2. Byte Order</fo:block>


<fo:block><fo:wrapper id="indexId434909-61"></fo:wrapper>By Order of the Realm!  There shall be two
byte orderings, hereafter to be known as Lame and Magnificent!</fo:block>


<fo:block>I joke, but one really is better than the other.  <fo:inline font-family="Liberation Mono" font-size="0.8em">:-)</fo:inline></fo:block>


<fo:block>There really is no easy way to say this, so I'll just blurt it out:
your computer might have been storing bytes in reverse order behind your
back.  I know!  No one wanted to have to tell you.</fo:block>


<fo:block>The thing is, everyone in the Internet world has generally agreed
that if you want to represent the two-byte hex number, say
<fo:inline font-family="Liberation Mono" font-size="0.900000em">b34f</fo:inline>, you'll store it in two sequential bytes <fo:inline font-family="Liberation Mono" font-size="0.900000em">b3</fo:inline>
followed by <fo:inline font-family="Liberation Mono" font-size="0.900000em">4f</fo:inline>.  Makes sense, and, as <fo:basic-link external-destination="http://en.wikipedia.org/wiki/Wilford_Brimley" keep-with-next="always">Wilford Brimley</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">14</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">14. <fo:inline font-family="Liberation Mono">http://en.wikipedia.org/wiki/Wilford_Brimley</fo:inline></fo:block></fo:footnote-body></fo:footnote> would tell you, it's the Right
Thing To Do.  This number, stored with the big end first, is called
<fo:inline font-style="italic">Big-Endian</fo:inline>.</fo:block>


<fo:block>Unfortunately, a few computers scattered here and there throughout
the world, namely anything with an Intel or Intel-compatible processor,
store the bytes reversed, so <fo:inline font-family="Liberation Mono" font-size="0.900000em">b34f</fo:inline> would be stored in memory as
the sequential bytes <fo:inline font-family="Liberation Mono" font-size="0.900000em">4f</fo:inline> followed by <fo:inline font-family="Liberation Mono" font-size="0.900000em">b3</fo:inline>.  This storage
method is called <fo:inline font-style="italic">Little-Endian</fo:inline>.</fo:block>


<fo:block>But wait, I'm not done with terminology yet!  The more-sane
<fo:inline font-style="italic">Big-Endian</fo:inline> is also called <fo:inline font-style="italic">Network Byte Order</fo:inline>
because that's the order us network types like.</fo:block>


<fo:block>Your computer stores numbers in <fo:inline font-style="italic">Host Byte Order</fo:inline>.  If it's
an Intel 80x86, Host Byte Order is Little-Endian.  If it's a Motorola
68k, Host Byte Order is Big-Endian.  If it's a PowerPC, Host Byte Order
is...  well, it depends!</fo:block>


<fo:block>A lot of times when you're building packets or filling out data
structures you'll need to make sure your two- and four-byte numbers are
in Network Byte Order.  But how can you do this if you don't know the
native Host Byte Order?</fo:block>


<fo:block>Good news!  You just get to assume the Host Byte Order isn't right,
and you always run the value through a function to set it to Network
Byte Order.  The function will do the magic conversion if it has to, and
this way your code is portable to machines of differing endianness.</fo:block>


<fo:block>All righty.  There are two types of numbers that you can convert:
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">short</fo:inline> (two bytes) and <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">long</fo:inline> (four bytes).
These functions work for the <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">unsigned</fo:inline> variations as well.
Say you want to convert a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">short</fo:inline> from Host Byte Order to
Network Byte Order.  Start with &#x201C;h&#x201D; for &#x201C;host&#x201D;, follow it with &#x201C;to&#x201D;,
then &#x201C;n&#x201D; for &#x201C;network&#x201D;, and &#x201C;s&#x201D; for &#x201C;short&#x201D;: h-to-n-s, or
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">htons()</fo:inline> (read: &#x201C;Host to Network Short&#x201D;).</fo:block>


<fo:block>It's almost too easy...</fo:block>


<fo:block>You can use every combination of &#x201C;n&#x201D;, &#x201C;h&#x201D;, &#x201C;s&#x201D;, and &#x201C;l&#x201D; you want,
not counting the really stupid ones.  For example, there is NOT a
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">stolh()</fo:inline> (&#x201C;Short to Long Host&#x201D;) function—not at this
party, anyway.  But there are:</fo:block>


<fo:block>
<fo:table width="100%" space-before="0.5em" space-after="0.5em" table-layout="fixed">
<fo:table-column column-width="20%" column-number="1"/>
<fo:table-column column-width="60%" column-number="2"/>
<fo:table-body start-indent="0pt" text-align="start">
<fo:table-row>
<fo:table-cell column-number="1">
<fo:block/>
</fo:table-cell>
<fo:table-cell column-number="2">
<fo:table width="100%" table-layout="fixed" space-before="0.5em" space-after="0.5em" text-indent="0pt" border-style="solid" border-width="thin">
	<fo:table-column column-width="20%" column-number="1" />
	<fo:table-column column-width="78%" column-number="2" />
	<fo:table-body start-indent="0pt" text-align="start">

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-62"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">htons()</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>
			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">h</fo:inline>ost <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">to</fo:inline> <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">n</fo:inline>etwork <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">s</fo:inline>hort</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-63"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">htonl()</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>
			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">h</fo:inline>ost <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">to</fo:inline> <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">n</fo:inline>etwork <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">l</fo:inline>ong</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-64"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">ntohs()</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>
			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">n</fo:inline>etwork <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">to</fo:inline> <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">h</fo:inline>ost <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">s</fo:inline>hort</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-65"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">ntohl()</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>
			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">n</fo:inline>etwork <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">to</fo:inline> <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">h</fo:inline>ost <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">l</fo:inline>ong</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>

	</fo:table-body>
</fo:table>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>

</fo:block>


<fo:block>Basically, you'll want to convert the numbers to Network Byte Order
before they go out on the wire, and convert them to Host Byte Order as
they come in off the wire.</fo:block>


<fo:block>I don't know of a 64-bit variant, sorry.  And if you want to do
floating point, check out the section on <fo:basic-link internal-destination="serialization">Serialization</fo:basic-link>, far below.</fo:block>


<fo:block>Assume the numbers in this document are in Host Byte Order unless I
say otherwise.</fo:block>


 


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="structs" space-before="0.5em">3.3. <fo:inline font-family="Liberation Mono" wrap-option="no-wrap">struct</fo:inline>s</fo:block>


<fo:block>Well, we're finally here.  It's time to talk about programming.
In this section, I'll cover various data types used by the sockets
interface, since some of them are a real bear to figure out.</fo:block>


<fo:block>First the easy one: a <fo:wrapper id="indexId434909-66"></fo:wrapper>socket descriptor.
A socket descriptor is the following type:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >int</fo:block>

<fo:block>Just a regular <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">int</fo:inline>.</fo:block>


<fo:block>Things get weird from here, so just read through and bear with
me.</fo:block>


<fo:block>My First Struct<fo:inline font-size="0.5em" baseline-shift="super">TM</fo:inline>—<fo:wrapper id="indexId434909-67"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
addrinfo</fo:inline>.  This structure is a more recent invention, and is used
to prep the socket address structures for subsequent use.  It's also
used in host name lookups, and service name lookups.  That'll make more
sense later when we get to actual usage, but just know for now that it's
one of the first things you'll call when making a connection.</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >struct addrinfo {
    int              ai_flags;     // AI_PASSIVE, AI_CANONNAME, etc.
    int              ai_family;    // AF_INET, AF_INET6, AF_UNSPEC
    int              ai_socktype;  // SOCK_STREAM, SOCK_DGRAM
    int              ai_protocol;  // use 0 for "any"
    size_t           ai_addrlen;   // size of ai_addr in bytes
    struct sockaddr *ai_addr;      // struct sockaddr_in or _in6
    char            *ai_canonname; // full canonical hostname

    struct addrinfo *ai_next;      // linked list, next node
};</fo:block>

<fo:block>You'll load this struct up a bit, and then call <fo:wrapper id="indexId434909-68"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline>.  It'll return a pointer
to a new linked list of these structures filled out with all the goodies
you need.</fo:block>


<fo:block>You can force it to use IPv4 or IPv6 in the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">ai_family</fo:inline>
field, or leave it as <fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_UNSPEC</fo:inline> to use whatever.  This is
cool because your code can be IP version-agnostic.</fo:block>


<fo:block>Note that this is a linked list: <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">ai_next</fo:inline> points at the
next element—there could be several results for you to choose
from.  I'd use the first result that worked, but you might have
different business needs; I don't know everything, man!</fo:block>


<fo:block>You'll see that the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">ai_addr</fo:inline> field in the <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
addrinfo</fo:inline> is a pointer to a <fo:wrapper id="indexId434909-69"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline>.  This is where we start getting
into the nitty-gritty details of what's inside an IP address
structure.</fo:block>


<fo:block>You might not usually need to write to these structures; oftentimes,
a call to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline> to fill out your <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
addrinfo</fo:inline> for you is all you'll need.  You <fo:inline font-style="italic">will</fo:inline>,
however, have to peer inside these <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct</fo:inline>s to get the
values out, so I'm presenting them here.</fo:block>


<fo:block>(Also, all the code written before <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct addrinfo</fo:inline> was
invented packed all this stuff by hand, so you'll see a lot of IPv4 code
out in the wild that does exactly that.  You know, in old versions of
this guide and so on.)</fo:block>


<fo:block>Some <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct</fo:inline>s are IPv4, some are IPv6, and some are both.
I'll make notes of which are what.</fo:block>


<fo:block>Anyway, the <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline> holds socket address
information for many types of sockets.</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >struct sockaddr {
    unsigned short    sa_family;    // address family, AF_xxx
    char              sa_data[14];  // 14 bytes of protocol address
}; 
</fo:block>

<fo:block><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sa_family</fo:inline> can be a variety of things, but it'll be <fo:wrapper id="indexId434909-70"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET</fo:inline> (IPv4) or <fo:wrapper id="indexId434909-71"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET6</fo:inline> (IPv6) for everything we do in
this document.  <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sa_data</fo:inline> contains a destination address
and port number for the socket.  This is rather unwieldy since you don't
want to tediously pack the address in the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sa_data</fo:inline> by
hand.</fo:block>


<fo:block>To deal with <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline>, programmers created a
parallel structure: <fo:wrapper id="indexId434909-72"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr_in</fo:inline> (&#x201C;in&#x201D; for &#x201C;Internet&#x201D;) to be used with IPv4.</fo:block>


<fo:block>And <fo:inline font-style="italic">this is the important</fo:inline> bit: a pointer to a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr_in</fo:inline> can be cast to a pointer to a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr</fo:inline> and vice-versa.  So even though <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline>
wants a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr*</fo:inline>, you can still use a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr_in</fo:inline> and cast it at the last minute!</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >// (IPv4 only--see struct sockaddr_in6 for IPv6)

struct sockaddr_in {
    short int          sin_family;  // Address family, AF_INET
    unsigned short int sin_port;    // Port number
    struct in_addr     sin_addr;    // Internet address
    unsigned char      sin_zero[8]; // Same size as struct sockaddr
};
</fo:block>

<fo:block>This structure makes it easy to reference elements of the socket
address.  Note that <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sin_zero</fo:inline> (which is included to pad
the structure to the length of a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline>) should be
set to all zeros with the function <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">memset()</fo:inline>.  Also, notice
that <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sin_family</fo:inline> corresponds to <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sa_family</fo:inline>
in a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline> and should be set to
&#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET</fo:inline>&#x201D;.  Finally, the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sin_port</fo:inline> must be
in <fo:wrapper id="indexId434909-73"></fo:wrapper><fo:inline font-style="italic">Network Byte Order</fo:inline> (by using <fo:wrapper id="indexId434909-74"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">htons()</fo:inline>!)</fo:block>


<fo:block>Let's dig deeper!  You see the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sin_addr</fo:inline> field is a
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in_addr</fo:inline>.  What is that thing?  Well, not to be
overly dramatic, but it's one of the scariest unions of all time:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >// (IPv4 only--see struct in6_addr for IPv6)

// Internet address (a structure for historical reasons)
struct in_addr {
    uint32_t s_addr; // that's a 32-bit int (4 bytes)
};</fo:block>

<fo:block>Whoa!  Well, it <fo:inline font-style="italic">used</fo:inline> to be a union, but now those days
seem to be gone.  Good riddance.  So if you have declared
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">ina</fo:inline> to be of type <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in</fo:inline>, then
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">ina.sin_addr.s_addr</fo:inline> references the 4-byte IP address (in
Network Byte Order).  Note that even if your system still uses the
God-awful union for <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in_addr</fo:inline>, you can still reference
the 4-byte IP address in exactly the same way as I did above (this due
to <fo:inline font-family="Liberation Mono" font-size="0.900000em">#define</fo:inline>s.)</fo:block>


<fo:block>What about <fo:wrapper id="indexId434909-75"></fo:wrapper>IPv6?  Similar <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct</fo:inline>s exist
for it, as well:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >// (IPv6 only--see struct sockaddr_in and struct in_addr for IPv4)

struct sockaddr_in6 {
    u_int16_t       sin6_family;   // address family, AF_INET6
    u_int16_t       sin6_port;     // port number, Network Byte Order
    u_int32_t       sin6_flowinfo; // IPv6 flow information
    struct in6_addr sin6_addr;     // IPv6 address
    u_int32_t       sin6_scope_id; // Scope ID
};

struct in6_addr {
    unsigned char   s6_addr[16];   // IPv6 address
};</fo:block>

<fo:block>Note that IPv6 has an IPv6 address and a port number, just like IPv4
has an IPv4 address and a port number.</fo:block>


<fo:block>Also note that I'm not going to talk about the IPv6 flow information
or Scope ID fields for the moment... this is just a starter guide.
<fo:inline font-family="Liberation Mono" font-size="0.8em">:-)</fo:inline></fo:block>


<fo:block>Last but not least, here is another simple structure, <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr_storage</fo:inline> that is designed
to be large enough to hold both IPv4 and IPv6 structures.  (See, for
some calls, sometimes you don't know in advance if it's going to fill
out your <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline> with an IPv4 or IPv6 address.  So
you pass in this parallel structure, very similar to <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr</fo:inline> except larger, and then cast it to the type you
need:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >struct sockaddr_storage {
    sa_family_t  ss_family;     // address family

    // all this is padding, implementation specific, ignore it:
    char      __ss_pad1[_SS_PAD1SIZE];
    int64_t   __ss_align;
    char      __ss_pad2[_SS_PAD2SIZE];
};</fo:block>

<fo:block>What's important is that you can see the address family in the
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">ss_family</fo:inline> field—check this to see if it's
<fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET</fo:inline> or <fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET6</fo:inline> (for IPv4 or
IPv6).  Then you can cast it to a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in</fo:inline> or
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in6</fo:inline> if you wanna.</fo:block>


 





<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="ipaddrs2" space-before="0.5em">3.4. IP Addresses, Part Deux</fo:block>


<fo:block>Fortunately for you, there are a bunch of functions that allow you to
manipulate <fo:wrapper id="indexId434909-76"></fo:wrapper>IP addresses.  No need to figure them out by
hand and stuff them in a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">long</fo:inline> with the
<fo:inline font-family="Liberation Mono" font-size="0.900000em">&lt;&lt;</fo:inline> operator.</fo:block>


<fo:block>First, let's say you have a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in ina</fo:inline>, and
you have an IP address &#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">10.12.110.57</fo:inline>&#x201D; or
&#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">2001:db8:63b3:1::3490</fo:inline>&#x201D; that you want to store into it.  The
function you want to use, <fo:wrapper id="indexId434909-77"></fo:wrapper>
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_pton()</fo:inline>, converts an IP address in numbers-and-dots
notation into either a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in_addr</fo:inline> or a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
in6_addr</fo:inline> depending on whether you specify <fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET</fo:inline>
or <fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET6</fo:inline>.  (&#x201C;pton&#x201D; stands for &#x201C;presentation to
network&#x201D;—you can call it &#x201C;printable to network&#x201D; if that's easier
to remember.)  The conversion can be made as follows:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >struct sockaddr_in sa; // IPv4
struct sockaddr_in6 sa6; // IPv6

inet_pton(AF_INET, "192.0.2.1", &amp;(sa.sin_addr)); // IPv4
inet_pton(AF_INET6, "2001:db8:63b3:1::3490", &amp;(sa6.sin6_addr)); // IPv6</fo:block>

<fo:block>(Quick note: the old way of doing things used a function called <fo:wrapper id="indexId434909-78"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_addr()</fo:inline> or another function called
<fo:wrapper id="indexId434909-79"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_aton()</fo:inline>; these are now obsolete
and don't work with IPv6.)</fo:block>


<fo:block>Now, the above code snippet isn't very robust because there is no
error checking.  See, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_pton()</fo:inline> returns
<fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error, or 0 if the address is messed up.  So check
to make sure the result is greater than 0 before using!</fo:block>


<fo:block>All right, now you can convert string IP addresses to their binary
representations.  What about the other way around?  What if you have a
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in_addr</fo:inline> and you want to print it in numbers-and-dots
notation?   (Or a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in6_addr</fo:inline> that you want in, uh,
&#x201C;hex-and-colons&#x201D; notation.)  In this case, you'll want to use the
function <fo:wrapper id="indexId434909-80"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_ntop()</fo:inline> (&#x201C;ntop&#x201D; means
&#x201C;network to presentation&#x201D;—you can call it &#x201C;network to printable&#x201D;
if that's easier to remember), like this:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >// IPv4:

char ip4[INET_ADDRSTRLEN];  // space to hold the IPv4 string
struct sockaddr_in sa;      // pretend this is loaded with something

inet_ntop(AF_INET, &amp;(sa.sin_addr), ip4, INET_ADDRSTRLEN);

printf("The IPv4 address is: %s\n", ip4);


// IPv6:

char ip6[INET6_ADDRSTRLEN]; // space to hold the IPv6 string
struct sockaddr_in6 sa6;    // pretend this is loaded with something

inet_ntop(AF_INET6, &amp;(sa6.sin6_addr), ip6, INET6_ADDRSTRLEN);

printf("The address is: %s\n", ip6);</fo:block>

<fo:block>When you call it, you'll pass the address type (IPv4 or IPv6), the
address, a pointer to a string to hold the result, and the maximum
length of that string.  (Two macros conveniently hold the size of the
string you'll need to hold the largest IPv4 or IPv6 address:
<fo:inline font-family="Liberation Mono" font-size="0.900000em">INET_ADDRSTRLEN</fo:inline> and <fo:inline font-family="Liberation Mono" font-size="0.900000em">INET6_ADDRSTRLEN</fo:inline>.)</fo:block>


<fo:block>(Another quick note to mention once again the old way of doing
things: the historical function to do this conversion was called <fo:wrapper id="indexId434909-81"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_ntoa()</fo:inline>.  It's also obsolete and
won't work with IPv6.)</fo:block>


<fo:block>Lastly, these functions only work with numeric IP
addresses—they won't do any nameserver DNS lookup on a hostname,
like &#x201C;www.example.com&#x201D;.  You will use <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline> to do
that, as you'll see later on.</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always" id="privnet" space-before="0.5em">3.4.1. Private (Or Disconnected) Networks</fo:block>


<fo:block><fo:wrapper id="indexId434909-82"></fo:wrapper>Lots of places have a <fo:wrapper id="indexId434909-83"></fo:wrapper>firewall that hides the network from the rest of the
world for their own protection.  And often times, the firewall
translates &#x201C;internal&#x201D; IP addresses to &#x201C;external&#x201D; (that everyone else in
the world knows) IP addresses using a process called <fo:inline font-style="italic">Network
Address Translation</fo:inline>, or <fo:wrapper id="indexId434909-84"></fo:wrapper>NAT.</fo:block>


<fo:block>Are you getting nervous yet?  &#x201C;Where's he going with all this weird
stuff?&#x201D;</fo:block>


<fo:block>Well, relax and buy yourself a non-alcoholic (or alcoholic) drink,
because as a beginner, you don't even have to worry about NAT, since
it's done for you transparently.  But I wanted to talk about the network
behind the firewall in case you started getting confused by the network
numbers you were seeing.</fo:block>


<fo:block>For instance, I have a firewall at home.  I have two static IPv4
addresses allocated to me by the DSL company, and yet I have seven
computers on the network.  How is this possible?  Two computers can't
share the same IP address, or else the data wouldn't know which one to
go to!</fo:block>


<fo:block>The answer is: they don't share the same IP addresses.  They are on a
private network with 24 million IP addresses allocated to it.  They are
all just for me.  Well, all for me as far as anyone else is concerned.
Here's what's happening:</fo:block>


<fo:block>If I log into a remote computer, it tells me I'm logged in from
192.0.2.33 which is the public IP address my ISP has provided to me.
But if I ask my local computer what it's IP address is, it says
10.0.0.5.  Who is translating the IP address from one to the other?
That's right, the firewall!  It's doing NAT!</fo:block>


<fo:block>10.<fo:inline font-style="italic">x</fo:inline>.<fo:inline font-style="italic">x</fo:inline>.<fo:inline font-style="italic">x</fo:inline> is one of a few reserved
networks that are only to be used either on fully disconnected networks,
or on networks that are behind firewalls.  The details of which private
network numbers are available for you to use are outlined in <fo:basic-link external-destination="http://tools.ietf.org/html/rfc1918" keep-with-next="always">RFC 1918</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">15</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">15. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc1918</fo:inline></fo:block></fo:footnote-body></fo:footnote>,
but some common ones you'll see are <fo:wrapper id="indexId434909-85"></fo:wrapper>10.<fo:inline font-style="italic">x</fo:inline>.<fo:inline font-style="italic">x</fo:inline>.<fo:inline font-style="italic">x</fo:inline> and <fo:wrapper id="indexId434909-86"></fo:wrapper>192.168.<fo:inline font-style="italic">x</fo:inline>.<fo:inline font-style="italic">x</fo:inline>, where <fo:inline font-style="italic">x</fo:inline>
is 0-255, generally.  Less common is
172.<fo:inline font-style="italic">y</fo:inline>.<fo:inline font-style="italic">x</fo:inline>.<fo:inline font-style="italic">x</fo:inline>, where <fo:inline font-style="italic">y</fo:inline> goes
between 16 and 31.</fo:block>


<fo:block>Networks behind a NATing firewall don't <fo:inline font-style="italic">need</fo:inline> to be on one
of these reserved networks, but they commonly are.</fo:block>


<fo:block>(Fun fact!  My external IP address isn't really 192.0.2.33.  The
192.0.2.<fo:inline font-style="italic">x</fo:inline> network is reserved for make-believe &#x201C;real&#x201D; IP
addresses to be used in documentation, just like this guide!
Wowzers!)</fo:block>


<fo:block><fo:wrapper id="indexId434909-87"></fo:wrapper>IPv6 has private networks, too, in a sense.  They'll
start with <fo:inline font-family="Liberation Mono" font-size="0.900000em">fd<fo:inline font-style="italic">xx</fo:inline>:</fo:inline> (or maybe in the future
<fo:inline font-family="Liberation Mono" font-size="0.900000em">fc<fo:inline font-style="italic">XX</fo:inline>:</fo:inline>), as per <fo:basic-link external-destination="http://tools.ietf.org/html/rfc4193" keep-with-next="always">RFC 4193</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">16</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">16. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc4193</fo:inline></fo:block></fo:footnote-body></fo:footnote>.  NAT and IPv6 don't
generally mix, however (unless you're doing the IPv6 to IPv4 gateway
thing which is beyond the scope of this document)—in theory
you'll have so many addresses at your disposal that you won't need to
use NAT any longer.  But if you want to allocate addresses for yourself
on a network that won't route outside, this is how to do it.</fo:block>


 

 

</fo:flow>
</fo:page-sequence>
 




<fo:page-sequence master-reference="chapter">
<fo:static-content flow-name="bg-normal-first-footer">
<fo:block text-align="center" font-family="Liberation Sans" font-weight="bold" font-size="11pt" padding-top="1em"><fo:page-number/></fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="50%" />
	<fo:table-column column-number="2" column-width="50%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt" font-style="italic">Beej's Guide to Network Programming</fo:block>
			</fo:table-cell>
			<fo:table-cell column-number="2" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="11pt" font-weight="bold"><fo:page-number/></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-even-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline>&#8195;&#8195;<fo:inline font-style="italic">Beej's Guide to Network Programming</fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-odd-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-style="italic">Jumping from IPv4 to IPv6</fo:inline>&#8195;&#8195;<fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="xsl-footnote-separator">
	<fo:block>
		<fo:leader leader-pattern="rule" leader-length="40%"/>
	</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body" id="ip4to6" font-family="Liberation Serif" font-size="11pt" text-indent="2.000000em">

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="ip4to6">4. Jumping from IPv4 to IPv6</fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>


<fo:block><fo:wrapper id="indexId434909-88"></fo:wrapper>But I just want to know what to change in my code to
get it going with IPv6!  Tell me now!</fo:block>


<fo:block>Ok! Ok!</fo:block>


<fo:block>Almost everything in here is something I've gone over, above, but
it's the short version for the impatient.  (Of course, there is more
than this, but this is what applies to the guide.)</fo:block>


<fo:list-block provisional-distance-between-starts="4.0em" space-before="1em" space-after="1em" start-indent="0cm">

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">1.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">First of all, try to use <fo:wrapper id="indexId434909-89"></fo:wrapper><fo:basic-link internal-destination="getaddrinfo"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline></fo:basic-link> to get all the
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline> info, instead of packing the structures by
hand.  This will keep you IP version-agnostic, and will eliminate many
of the subsequent steps.</fo:block>
		</fo:list-item-body>
	</fo:list-item>


	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">2.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Any place that you find you're hard-coding anything related to the
IP version, try to wrap up in a helper function.</fo:block>
		</fo:list-item-body>
	</fo:list-item>


	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">3.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Change <fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET</fo:inline> to <fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET6</fo:inline>.</fo:block>
		</fo:list-item-body>
	</fo:list-item>


	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">4.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Change <fo:inline font-family="Liberation Mono" font-size="0.900000em">PF_INET</fo:inline> to <fo:inline font-family="Liberation Mono" font-size="0.900000em">PF_INET6</fo:inline>.</fo:block>
		</fo:list-item-body>
	</fo:list-item>


	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">5.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em"><fo:block>Change <fo:inline font-family="Liberation Mono" font-size="0.900000em">INADDR_ANY</fo:inline> assignments to
<fo:inline font-family="Liberation Mono" font-size="0.900000em">in6addr_any</fo:inline> assignments, which are slightly
different:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >struct sockaddr_in sa;
struct sockaddr_in6 sa6;

sa.sin_addr.s_addr = INADDR_ANY;  // use my IPv4 address
sa6.sin6_addr = in6addr_any; // use my IPv6 address</fo:block>

<fo:block>Also, the value <fo:inline font-family="Liberation Mono" font-size="0.900000em">IN6ADDR_ANY_INIT</fo:inline> can be used as an
initializer when the <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in6_addr</fo:inline> is declared, like
so:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >struct in6_addr ia6 = IN6ADDR_ANY_INIT;</fo:block>
</fo:block>
		</fo:list-item-body>
	</fo:list-item>


	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">6.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Instead of <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in</fo:inline> use <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr_in6</fo:inline>, being sure to add &#x201C;6&#x201D; to the fields as appropriate
(see <fo:basic-link internal-destination="structs"><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct</fo:inline>s</fo:basic-link>, above).  There is
no <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sin6_zero</fo:inline> field.</fo:block>
		</fo:list-item-body>
	</fo:list-item>


	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">7.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Instead of <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in_addr</fo:inline> use <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
in6_addr</fo:inline>, being sure to add &#x201C;6&#x201D; to the fields as appropriate (see
<fo:basic-link internal-destination="structs"><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct</fo:inline>s</fo:basic-link>, above).</fo:block>
		</fo:list-item-body>
	</fo:list-item>


	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">8.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Instead of <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_aton()</fo:inline> or <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_addr()</fo:inline>, use
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_pton()</fo:inline>.</fo:block>
		</fo:list-item-body>
	</fo:list-item>


	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">9.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Instead of <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_ntoa()</fo:inline>, use
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_ntop()</fo:inline>.</fo:block>
		</fo:list-item-body>
	</fo:list-item>


	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">10.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Instead of <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyname()</fo:inline>, use the superior
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline>.</fo:block>
		</fo:list-item-body>
	</fo:list-item>


	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">11.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Instead of <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyaddr()</fo:inline>, use the superior <fo:wrapper id="indexId434909-90"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getnameinfo()</fo:inline> (although
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyaddr()</fo:inline> can still work with IPv6).</fo:block>
		</fo:list-item-body>
	</fo:list-item>


	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">12.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">INADDR_BROADCAST</fo:inline> no longer works.  Use IPv6 multicast
instead.</fo:block>
		</fo:list-item-body>
	</fo:list-item>


</fo:list-block>


<fo:block><fo:inline font-style="italic">Et voila</fo:inline>!</fo:block>


</fo:flow>
</fo:page-sequence>





<fo:page-sequence master-reference="chapter">
<fo:static-content flow-name="bg-normal-first-footer">
<fo:block text-align="center" font-family="Liberation Sans" font-weight="bold" font-size="11pt" padding-top="1em"><fo:page-number/></fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="50%" />
	<fo:table-column column-number="2" column-width="50%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt" font-style="italic">Beej's Guide to Network Programming</fo:block>
			</fo:table-cell>
			<fo:table-cell column-number="2" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="11pt" font-weight="bold"><fo:page-number/></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-even-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline>&#8195;&#8195;<fo:inline font-style="italic">Beej's Guide to Network Programming</fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-odd-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-style="italic">System Calls or Bust</fo:inline>&#8195;&#8195;<fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="xsl-footnote-separator">
	<fo:block>
		<fo:leader leader-pattern="rule" leader-length="40%"/>
	</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body" id="syscalls" font-family="Liberation Serif" font-size="11pt" text-indent="2.000000em">

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="syscalls">5. System Calls or Bust</fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>


<fo:block>This is the section where we get into the system calls (and other
library calls) that allow you to access the network functionality of a
Unix box, or any box that supports the sockets API for that matter (BSD,
Windows, Linux, Mac, what-have-you.)  When you call one of these
functions, the kernel takes over and does all the work for you
automagically.</fo:block>


<fo:block>The place most people get stuck around here is what order to call
these things in.  In that, the <fo:inline font-weight="bold">man</fo:inline> pages are no use,
as you've probably discovered.  Well, to help with that dreadful
situation, I've tried to lay out the system calls in the following
sections in <fo:inline font-style="italic">exactly</fo:inline> (approximately) the same order
that you'll need to call them in your programs.</fo:block>


<fo:block>That, coupled with a few pieces of sample code here and there,
some milk and cookies (which I fear you will have to supply yourself),
and some raw guts and courage, and you'll be beaming data around the
Internet like the Son of Jon Postel!</fo:block>


<fo:block><fo:inline font-style="italic">(Please note that for brevity, many code snippets below do not
include necessary error checking.  And they very commonly assume that
the result from calls to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline> succeed and return a
valid entry in the linked list.  Both of these situations are properly
addressed in the stand-alone programs, though, so use those as a
model.)</fo:inline></fo:block>






<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="getaddrinfo" space-before="0.5em">5.1. <fo:inline font-family="Liberation Mono" font-weight="bold">getaddrinfo()</fo:inline>—Prepare to launch!</fo:block>


<fo:block><fo:wrapper id="indexId434909-91"></fo:wrapper>This is a real workhorse of a function with
a lot of options, but usage is actually pretty simple.  It helps set up
the <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct</fo:inline>s you need later on.</fo:block>


<fo:block>A tiny bit of history: it used to be that you would use a function
called <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyname()</fo:inline> to do DNS lookups.  Then you'd
load that information by hand into a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in</fo:inline>,
and use that in your calls.</fo:block>


<fo:block>This is no longer necessary, thankfully.  (Nor is it desirable, if
you want to write code that works for both IPv4 and IPv6!)  In these
modern times, you now have the function <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline> that
does all kinds of good stuff for you, including DNS and service name
lookups, and fills out the <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct</fo:inline>s you need, besides!</fo:block>


<fo:block>Let's take a look!</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netdb.h&gt;

int getaddrinfo(const char *node,     // e.g. "www.example.com" or IP
                const char *service,  // e.g. "http" or port number
                const struct addrinfo *hints,
                struct addrinfo **res);</fo:block>

<fo:block>You give this function three input parameters, and it gives you a
pointer to a linked-list, <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">res</fo:inline>, of results.</fo:block>


<fo:block>The <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">node</fo:inline> parameter is the host name to connect to, or
an IP address.</fo:block>


<fo:block>Next is the parameter <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">service</fo:inline>, which can be a port
number, like &#x201C;80&#x201D;, or the name of a particular service (found in <fo:basic-link external-destination="http://www.iana.org/assignments/port-numbers" keep-with-next="always">The IANA Port List</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">17</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">17. <fo:inline font-family="Liberation Mono">http://www.iana.org/assignments/port-numbers</fo:inline></fo:block></fo:footnote-body></fo:footnote> or the
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">/etc/services</fo:inline> file on your Unix machine) like &#x201C;http&#x201D; or
&#x201C;ftp&#x201D; or &#x201C;telnet&#x201D; or &#x201C;smtp&#x201D; or whatever.</fo:block>


<fo:block>Finally, the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">hints</fo:inline> parameter points to a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
addrinfo</fo:inline> that you've already filled out with relevant
information.</fo:block>


<fo:block>Here's a sample call if you're a server who wants to listen on your
host's IP address, port 3490.  Note that this doesn't actually do any
listening or network setup; it merely sets up structures we'll use
later:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >int status;
struct addrinfo hints;
struct addrinfo *servinfo;  // will point to the results

memset(&amp;hints, 0, sizeof hints); // make sure the struct is empty
hints.ai_family = AF_UNSPEC;     // don't care IPv4 or IPv6
hints.ai_socktype = SOCK_STREAM; // TCP stream sockets
hints.ai_flags = AI_PASSIVE;     // fill in my IP for me

if ((status = getaddrinfo(NULL, "3490", &amp;hints, &amp;servinfo)) != 0) {
    fprintf(stderr, "getaddrinfo error: %s\n", gai_strerror(status));
    exit(1);
}

// servinfo now points to a linked list of 1 or more struct addrinfos

// ... do everything until you don't need servinfo anymore ....

freeaddrinfo(servinfo); // free the linked-list</fo:block>

<fo:block>Notice that I set the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">ai_family</fo:inline> to
<fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_UNSPEC</fo:inline>, thereby saying that I don't care if we use
IPv4 or IPv6.  You can set it to <fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET</fo:inline> or
<fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET6</fo:inline> if you want one or the other specifically.</fo:block>


<fo:block>Also, you'll see the <fo:inline font-family="Liberation Mono" font-size="0.900000em">AI_PASSIVE</fo:inline> flag in there; this
tells <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline> to assign the address of my local host
to the socket structures.  This is nice because then you don't have to
hardcode it.  (Or you can put a specific address in as the first
parameter to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline> where I currently have
<fo:inline font-family="Liberation Mono" font-size="0.900000em">NULL</fo:inline>, up there.)</fo:block>


<fo:block>Then we make the call.  If there's an error
(<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline> returns non-zero), we can print it out using
the function <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gai_strerror()</fo:inline>, as you see.  If everything
works properly, though, <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">servinfo</fo:inline> will point to a linked list
of <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct addrinfo</fo:inline>s, each of which contains a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr</fo:inline> of some kind that we can use later!  Nifty!</fo:block>


<fo:block>Finally, when we're eventually all done with the linked list that
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline> so graciously allocated for us, we can (and
should) free it all up with a call to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">freeaddrinfo()</fo:inline>.</fo:block>


<fo:block>Here's a sample call if you're a client who wants to connect to a
particular server, say &#x201C;www.example.net&#x201D; port 3490.  Again, this doesn't
actually connect, but it sets up the structures we'll use later:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >int status;
struct addrinfo hints;
struct addrinfo *servinfo;  // will point to the results

memset(&amp;hints, 0, sizeof hints); // make sure the struct is empty
hints.ai_family = AF_UNSPEC;     // don't care IPv4 or IPv6
hints.ai_socktype = SOCK_STREAM; // TCP stream sockets

// get ready to connect
status = getaddrinfo("www.example.net", "3490", &amp;hints, &amp;servinfo);

// servinfo now points to a linked list of 1 or more struct addrinfos

// etc.</fo:block>

<fo:block>I keep saying that <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">servinfo</fo:inline> is a linked list with all
kinds of address information.  Let's write a quick demo program to show
off this information.  <fo:basic-link external-destination="http://beej.us/guide/bgnet/examples/showip.c" keep-with-next="always">This short
program</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">18</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">18. <fo:inline font-family="Liberation Mono">http://beej.us/guide/bgnet/examples/showip.c</fo:inline></fo:block></fo:footnote-body></fo:footnote> will print the IP addresses for whatever host you
specify on the command line:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >/*
** showip.c -- show IP addresses for a host given on the command line
*/

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netdb.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;netinet/in.h&gt;

int main(int argc, char *argv[])
{
    struct addrinfo hints, *res, *p;
    int status;
    char ipstr[INET6_ADDRSTRLEN];

    if (argc != 2) {
        fprintf(stderr,"usage: showip hostname\n");
        return 1;
    }

    memset(&amp;hints, 0, sizeof hints);
    hints.ai_family = AF_UNSPEC; // AF_INET or AF_INET6 to force version
    hints.ai_socktype = SOCK_STREAM;

    if ((status = getaddrinfo(argv[1], NULL, &amp;hints, &amp;res)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(status));
        return 2;
    }

    printf("IP addresses for %s:\n\n", argv[1]);

    for(p = res;p != NULL; p = p-&gt;ai_next) {
        void *addr;
        char *ipver;

        // get the pointer to the address itself,
        // different fields in IPv4 and IPv6:
        if (p-&gt;ai_family == AF_INET) { // IPv4
            struct sockaddr_in *ipv4 = (struct sockaddr_in *)p-&gt;ai_addr;
            addr = &amp;(ipv4-&gt;sin_addr);
            ipver = "IPv4";
        } else { // IPv6
            struct sockaddr_in6 *ipv6 = (struct sockaddr_in6 *)p-&gt;ai_addr;
            addr = &amp;(ipv6-&gt;sin6_addr);
            ipver = "IPv6";
        }

        // convert the IP to a string and print it:
        inet_ntop(p-&gt;ai_family, addr, ipstr, sizeof ipstr);
        printf("  %s: %s\n", ipver, ipstr);
    }

    freeaddrinfo(res); // free the linked list

    return 0;
}</fo:block>

<fo:block>As you see, the code calls <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline> on whatever you
pass on the command line, that fills out the linked list pointed to by
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">res</fo:inline>, and then we can iterate over the list and print stuff
out or do whatever.</fo:block>


<fo:block>(There's a little bit of ugliness there where we have to dig into the
different types of <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline>s depending on the IP
version.  Sorry about that!  I'm not sure of a better way around
it.)</fo:block>


<fo:block>Sample run!  Everyone loves screenshots:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-right-style="dashed" border-bottom-style="dashed" background-color="#E0E0E0" widows="2" orphans="2" white-space="pre" font-weight="bold" font-family="Liberation Mono" font-size="0.801000em" >$ <fo:inline font-weight="bold">showip www.example.net</fo:inline>
IP addresses for www.example.net:

  IPv4: 192.0.2.88

$ <fo:inline font-weight="bold">showip ipv6.example.com</fo:inline>
IP addresses for ipv6.example.com:

  IPv4: 192.0.2.101
  IPv6: 2001:db8:8c00:22::171</fo:block>

<fo:block>Now that we have that under control, we'll use the results we get
from <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline> to pass to other socket functions and,
at long last, get our network connection established!  Keep reading!</fo:block>


 





<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="socket" space-before="0.5em">5.2. <fo:inline font-family="Liberation Mono" font-weight="bold">socket()</fo:inline>—Get the File Descriptor!</fo:block>


<fo:block>I guess I can put it off no longer—I have to talk about the
<fo:wrapper id="indexId434909-92"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline> system call.  Here's the
breakdown:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int socket(int domain, int type, int protocol); 
</fo:block>

<fo:block>But what are these arguments?  They allow you to say what kind of
socket you want (IPv4 or IPv6, stream or datagram, and TCP or UDP).</fo:block>


<fo:block>It used to be people would hardcode these values, and you can
absolutely still do that.  (<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">domain</fo:inline> is
<fo:inline font-family="Liberation Mono" font-size="0.900000em">PF_INET</fo:inline> or <fo:inline font-family="Liberation Mono" font-size="0.900000em">PF_INET6</fo:inline>, <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">type</fo:inline>
is <fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_STREAM</fo:inline> or <fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_DGRAM</fo:inline>, and
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">protocol</fo:inline> can be set to <fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline> to choose the
proper protocol for the given <fo:inline font-family="Liberation Mono" font-size="0.900000em">type</fo:inline>.  Or you can call
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getprotobyname()</fo:inline> to look up the protocol you want, &#x201C;tcp&#x201D; or
&#x201C;udp&#x201D;.)</fo:block>


<fo:block>(This <fo:inline font-family="Liberation Mono" font-size="0.900000em">PF_INET</fo:inline> thing is a close relative of the <fo:wrapper id="indexId434909-93"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET</fo:inline> that you can use when initializing
the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sin_family</fo:inline> field in your <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in</fo:inline>.
In fact, they're so closely related that they actually have the same
value, and many programmers will call <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline> and pass
<fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET</fo:inline> as the first argument instead of
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">PF_INET</fo:inline>.  Now, get some milk and cookies, because it's
times for a story.  Once upon a time, a long time ago, it was thought
that maybe a address family (what the &#x201C;AF&#x201D; in &#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET</fo:inline>&#x201D;
stands for) might support several protocols that were referred to by
their protocol family (what the &#x201C;PF&#x201D; in &#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">PF_INET</fo:inline>&#x201D; stands
for).  That didn't happen.  And they all lived happily ever after, The
End.  So the most correct thing to do is to use <fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET</fo:inline>
in your <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in</fo:inline> and <fo:inline font-family="Liberation Mono" font-size="0.900000em">PF_INET</fo:inline> in
your call to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline>.)</fo:block>


<fo:block>Anyway, enough of that.  What you really want to do is use the values
from the results of the call to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline>, and feed
them into <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline> directly like this:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >int s;
struct addrinfo hints, *res;

// do the lookup
// [pretend we already filled out the "hints" struct]
getaddrinfo("www.example.com", "http", &amp;hints, &amp;res);

// [again, you should do error-checking on getaddrinfo(), and walk
// the "res" linked list looking for valid entries instead of just
// assuming the first one is good (like many of these examples do.)
// <fo:basic-link internal-destination="clientserver">See the section on client/server</fo:basic-link> for real examples.]

s = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol);</fo:block>

<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline> simply returns to you a <fo:inline font-style="italic">socket
descriptor</fo:inline> that you can use in later system calls, or
<fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error.  The global variable <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> is set
to the error's value (see the <fo:basic-link internal-destination="errnoman"><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline></fo:basic-link> man page for more details, and a
quick note on using <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> in multithreaded programs.)</fo:block>


<fo:block>Fine, fine, fine, but what good is this socket?  The answer is
that it's really no good by itself, and you need to read on and make
more system calls for it to make any sense.</fo:block>








<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="bind" space-before="0.5em">5.3. <fo:inline font-family="Liberation Mono" font-weight="bold">bind()</fo:inline>—What port am I on?</fo:block>


<fo:block><fo:wrapper id="indexId434909-94"></fo:wrapper>Once you have a socket, you might have to associate
that socket with a <fo:wrapper id="indexId434909-95"></fo:wrapper>port on your local machine.  (This
is commonly done if you're going to <fo:wrapper id="indexId434909-96"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">listen()</fo:inline> for incoming connections on a
specific port—multiplayer network games do this when they tell
you to &#x201C;connect to 192.168.5.10 port 3490&#x201D;.)  The port number is used by
the kernel to match an incoming packet to a certain process's socket
descriptor.  If you're going to only be doing a <fo:wrapper id="indexId434909-97"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline> (because you're the client, not
the server), this is probably be unnecessary.  Read it anyway, just for
kicks.</fo:block>


<fo:block>Here is the synopsis for the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline> system
call:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int bind(int sockfd, struct sockaddr *my_addr, int addrlen);
</fo:block>

<fo:block><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sockfd</fo:inline> is the socket file descriptor returned by
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline>.  <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">my_addr</fo:inline> is a pointer to a
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline> that contains information about your
address, namely, port and <fo:wrapper id="indexId434909-98"></fo:wrapper>IP address.
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">addrlen</fo:inline> is the length in bytes of that address.</fo:block>


<fo:block>Whew.  That's a bit to absorb in one chunk.  Let's have an
example that binds the socket to the host the program is running on,
port 3490:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >struct addrinfo hints, *res;
int sockfd;

// first, load up address structs with getaddrinfo():

memset(&amp;hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC;  // use IPv4 or IPv6, whichever
hints.ai_socktype = SOCK_STREAM;
hints.ai_flags = AI_PASSIVE;     // fill in my IP for me

getaddrinfo(NULL, "3490", &amp;hints, &amp;res);

// make a socket:

sockfd = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol);

// bind it to the port we passed in to getaddrinfo():

bind(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);</fo:block>

<fo:block>By using the <fo:inline font-family="Liberation Mono" font-size="0.900000em">AI_PASSIVE</fo:inline> flag, I'm telling the program
to bind to the IP of the host it's running on.  If you want to bind to a
specific local IP address, drop the <fo:inline font-family="Liberation Mono" font-size="0.900000em">AI_PASSIVE</fo:inline> and put an
IP address in for the first argument to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline>.</fo:block>


<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline> also returns <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline>
on error and sets <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> to the error's
value.</fo:block>


<fo:block>Lots of old code manually packs the <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in</fo:inline>
before calling <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline>.  Obviously this is IPv4-specific,
but there's really nothing stopping you from doing the same thing with
IPv6, except that using <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline> is going to be
easier, generally.  Anyway, the old code looks something like this:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >// !!! THIS IS THE OLD WAY !!!

int sockfd;
struct sockaddr_in my_addr;

sockfd = socket(PF_INET, SOCK_STREAM, 0);

my_addr.sin_family = AF_INET;
my_addr.sin_port = htons(MYPORT);     // short, network byte order
my_addr.sin_addr.s_addr = inet_addr("10.12.110.57");
memset(my_addr.sin_zero, '\0', sizeof my_addr.sin_zero);

bind(sockfd, (struct sockaddr *)&amp;my_addr, sizeof my_addr);</fo:block>

<fo:block>In the above code, you could also assign <fo:inline font-family="Liberation Mono" font-size="0.900000em">INADDR_ANY</fo:inline> to
the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">s_addr</fo:inline> field if you wanted to bind to your local IP
address (like the <fo:inline font-family="Liberation Mono" font-size="0.900000em">AI_PASSIVE</fo:inline> flag, above.)  The IPv6
version of <fo:inline font-family="Liberation Mono" font-size="0.900000em">INADDR_ANY</fo:inline> is a global variable
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">in6addr_any</fo:inline> that is assigned into the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sin6_addr</fo:inline>
field of your <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in6</fo:inline>.  (There is also a macro
<fo:inline font-family="Liberation Mono" font-size="0.900000em">IN6ADDR_ANY_INIT</fo:inline> that you can use in a variable
initializer.)</fo:block>


<fo:block>Another thing to watch out for when calling <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline>:
don't go underboard with your port numbers.  <fo:wrapper id="indexId434909-99"></fo:wrapper>All ports
below 1024 are RESERVED (unless you're the superuser)!  You can have any
port number above that, right up to 65535 (provided they aren't already
being used by another program.)</fo:block>


<fo:block>Sometimes, you might notice, you try to rerun a server and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline> fails, claiming <fo:wrapper id="indexId434909-100"></fo:wrapper>&#x201C;Address
already in use.&#x201D; What does that mean?  Well, a little bit of a socket
that was connected is still hanging around in the kernel, and it's
hogging the port.  You can either wait for it to clear (a minute or so),
or add code to your program allowing it to reuse the port, like
this:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" ><fo:wrapper id="indexId434909-101"></fo:wrapper><fo:wrapper id="indexId434909-102"></fo:wrapper>int yes=1;
//char yes='1'; // Solaris people use this

// lose the pesky "Address already in use" error message
if (setsockopt(listener,SOL_SOCKET,SO_REUSEADDR,&amp;yes,sizeof(int)) == -1) {
    perror("setsockopt");
    exit(1);
} 
</fo:block>

<fo:block><fo:wrapper id="indexId434909-103"></fo:wrapper>One small extra final note about
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline>: there are times when you won't absolutely have to
call it.  If you are <fo:wrapper id="indexId434909-104"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline>ing to a
remote machine and you don't care what your local port is (as is the
case with <fo:inline font-weight="bold">telnet</fo:inline> where you only care about the remote port),
you can simply call <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline>, it'll check to see if the
socket is unbound, and will <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline> it to an unused local
port if necessary.</fo:block>








<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="connect" space-before="0.5em">5.4. <fo:inline font-family="Liberation Mono" font-weight="bold">connect()</fo:inline>—Hey, you!</fo:block>


<fo:block><fo:wrapper id="indexId434909-105"></fo:wrapper>Let's just pretend for a few minutes that you're
a telnet application.  Your user commands you (just like in the movie
<fo:wrapper id="indexId434909-106"></fo:wrapper><fo:inline font-style="italic">TRON</fo:inline>) to get a socket file descriptor.  You
comply and call <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline>.  Next, the user tells you to
connect to &#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">10.12.110.57</fo:inline>&#x201D; on port &#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">23</fo:inline>&#x201D; (the standard
telnet port.)  Yow!  What do you do now?</fo:block>


<fo:block>Lucky for you, program, you're now perusing the section on
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline>—how to connect to a remote host.  So read
furiously onward!  No time to lose!</fo:block>


<fo:block>The <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline> call is as follows:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int connect(int sockfd, struct sockaddr *serv_addr, int addrlen); 
</fo:block>

<fo:block><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sockfd</fo:inline> is our friendly neighborhood socket
file descriptor, as returned by the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline> call,
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">serv_addr</fo:inline> is a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline>
containing the destination port and IP address, and
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">addrlen</fo:inline> is the length in bytes of the server address
structure.</fo:block>


<fo:block>All of this information can be gleaned from the results of the
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline> call, which rocks.</fo:block>


<fo:block>Is this starting to make more sense?  I can't hear you from here, so
I'll just have to hope that it is.  Let's have an example where we make
a socket connection to &#x201C;www.example.com&#x201D;, port 3490:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >struct addrinfo hints, *res;
int sockfd;

// first, load up address structs with getaddrinfo():

memset(&amp;hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC;
hints.ai_socktype = SOCK_STREAM;

getaddrinfo("www.example.com", "3490", &amp;hints, &amp;res);

// make a socket:

sockfd = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol);

// connect!

connect(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);</fo:block>

<fo:block>Again, old-school programs filled out their own <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr_in</fo:inline>s to pass to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline>.  You can do that
if you want to.  See the similar note in the <fo:basic-link internal-destination="bind"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline> section</fo:basic-link>, above.</fo:block>


<fo:block>Be sure to check the return value from
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline>—it'll return <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error
and set the variable <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline>.</fo:block>


<fo:block><fo:wrapper id="indexId434909-107"></fo:wrapper>Also, notice that we didn't call
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline>.  Basically, we don't care about our local port
number; we only care where we're going (the remote port).  The kernel
will choose a local port for us, and the site we connect to will
automatically get this information from us.  No worries.</fo:block>








<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="listen" space-before="0.5em">5.5. <fo:inline font-family="Liberation Mono" font-weight="bold">listen()</fo:inline>—Will somebody please call
me?</fo:block>


<fo:block><fo:wrapper id="indexId434909-108"></fo:wrapper>Ok, time for a change of pace.  What if you don't
want to connect to a remote host.  Say, just for kicks, that you want to
wait for incoming connections and handle them in some way.  The process
is two step: first you <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">listen()</fo:inline>, then you
<fo:wrapper id="indexId434909-109"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline> (see below.)</fo:block>


<fo:block>The listen call is fairly simple, but requires a bit of
explanation:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >int listen(int sockfd, int backlog); 
</fo:block>

<fo:block><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sockfd</fo:inline> is the usual socket file descriptor
from the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline> system call.
<fo:wrapper id="indexId434909-110"></fo:wrapper><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">backlog</fo:inline> is the number of
connections allowed on the incoming queue.  What does that mean?  Well,
incoming connections are going to wait in this queue until you
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline> them (see below) and this is the limit on how many
can queue up.  Most systems silently limit this number to about 20; you
can probably get away with setting it to <fo:inline font-family="Liberation Mono" font-size="0.900000em">5</fo:inline> or
<fo:inline font-family="Liberation Mono" font-size="0.900000em">10</fo:inline>.</fo:block>


<fo:block>Again, as per usual, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">listen()</fo:inline> returns
<fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> and sets <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> on
error.</fo:block>


<fo:block>Well, as you can probably imagine, we need to call
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline> before we call <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">listen()</fo:inline> so that the
server is running on a specific port.  (You have to be able to tell your
buddies which port to connect to!)  So if you're going to be listening
for incoming connections, the sequence of system calls you'll make
is:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >getaddrinfo();
socket();
bind();
listen();
/* accept() goes here */ 
</fo:block>

<fo:block>I'll just leave that in the place of sample code, since it's
fairly self-explanatory.  (The code in the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline>
section, below, is more complete.)  The really tricky part of this whole
sha-bang is the call to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline>.</fo:block>








<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="accept" space-before="0.5em">5.6. <fo:inline font-family="Liberation Mono" font-weight="bold">accept()</fo:inline>—&#x201C;Thank you for calling port
3490.&#x201D;</fo:block>


<fo:block><fo:wrapper id="indexId434909-111"></fo:wrapper>Get ready—the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline> call
is kinda weird!  What's going to happen is this: someone far far away
will try to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline> to your machine on a port that you
are <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">listen()</fo:inline>ing on.  Their connection will be queued up
waiting to be <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline>ed.  You call <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline>
and you tell it to get the pending connection.  It'll return to you a
<fo:inline font-style="italic">brand new socket file descriptor</fo:inline> to use for this single
connection!  That's right, suddenly you have <fo:inline font-style="italic">two socket file
descriptors</fo:inline> for the price of one!  The original one is still
listening for more new connections, and the newly created one is finally
ready to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>.  We're there! </fo:block>


<fo:block>The call is as follows:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen); 
</fo:block>

<fo:block><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sockfd</fo:inline> is the
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">listen()</fo:inline>ing socket descriptor.  Easy enough.
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">addr</fo:inline> will usually be a pointer to a local
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_storage</fo:inline>.  This is where the information
about the incoming connection will go (and with it you can determine
which host is calling you from which port).  <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">addrlen</fo:inline> is a
local integer variable that should be set to <fo:inline font-family="Liberation Mono" font-size="0.900000em">sizeof(struct
sockaddr_storage)</fo:inline> before its address is passed to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline>.  <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline> will not put more than
that many bytes into <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">addr</fo:inline>.  If it puts fewer in, it'll
change the value of <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">addrlen</fo:inline> to reflect that.</fo:block>


<fo:block>Guess what?  <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline> returns <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> and sets
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> if an error occurs.  Betcha didn't figure that.</fo:block>


<fo:block>Like before, this is a bunch to absorb in one chunk, so here's a
sample code fragment for your perusal:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;

#define MYPORT "3490"  // the port users will be connecting to
#define BACKLOG 10     // how many pending connections queue will hold

int main(void)
{
    struct sockaddr_storage their_addr;
    socklen_t addr_size;
    struct addrinfo hints, *res;
    int sockfd, new_fd;

    // !! don't forget your error checking for these calls !!

    // first, load up address structs with getaddrinfo():

    memset(&amp;hints, 0, sizeof hints);
    hints.ai_family = AF_UNSPEC;  // use IPv4 or IPv6, whichever
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_flags = AI_PASSIVE;     // fill in my IP for me

    getaddrinfo(NULL, MYPORT, &amp;hints, &amp;res);

    // make a socket, bind it, and listen on it:

    sockfd = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol);
    bind(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);
    listen(sockfd, BACKLOG);

    // now accept an incoming connection:

    addr_size = sizeof their_addr;
    new_fd = accept(sockfd, (struct sockaddr *)&amp;their_addr, &amp;addr_size);

    // ready to communicate on socket descriptor new_fd!
    .
    .
    .</fo:block>

<fo:block>Again, note that we will use the socket descriptor
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">new_fd</fo:inline> for all <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> calls.  If you're only getting one single connection
ever, you can <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">close()</fo:inline> the listening <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sockfd</fo:inline>
in order to prevent more incoming connections on the same port, if you
so desire.</fo:block>








<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="sendrecv" space-before="0.5em">5.7. <fo:inline font-family="Liberation Mono" font-weight="bold">send()</fo:inline> and <fo:inline font-family="Liberation Mono" font-weight="bold">recv()</fo:inline>—Talk to me,
baby!</fo:block>


<fo:block>These two functions are for communicating over stream sockets or
connected datagram sockets.  If you want to use regular unconnected
datagram sockets, you'll need to see the section on <fo:basic-link internal-destination="sendtorecv"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendto()</fo:inline> and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline></fo:basic-link>, below.</fo:block>


<fo:block><fo:wrapper id="indexId434909-112"></fo:wrapper>The <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> call:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >int send(int sockfd, const void *msg, int len, int flags); 
</fo:block>

<fo:block><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sockfd</fo:inline> is the socket descriptor you want to
send data to (whether it's the one returned by
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline> or the one you got with
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline>.) <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">msg</fo:inline> is a pointer
to the data you want to send, and <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">len</fo:inline> is the
length of that data in bytes.  Just set <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">flags</fo:inline> to
<fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline>.  (See the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> man page
for more information concerning flags.)</fo:block>


<fo:block>Some sample code might be:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >char *msg = "Beej was here!";
int len, bytes_sent;
.
.
.
len = strlen(msg);
bytes_sent = send(sockfd, msg, len, 0);
.
.
. 
</fo:block>

<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> returns the number of bytes actually
sent out—<fo:inline font-style="italic">this might be less than the number you told it to
send!</fo:inline>  See, sometimes you tell it to send a whole gob of data and
it just can't handle it.  It'll fire off as much of the data as it can,
and trust you to send the rest later.  Remember, if the value returned
by <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> doesn't match the value in <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">len</fo:inline>,
it's up to you to send the rest of the string.  The good news is this:
if the packet is small (less than 1K or so) it will <fo:inline font-style="italic">probably</fo:inline>
manage to send the whole thing all in one go.  Again, <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline>
is returned on error, and <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> is set to the error
number.</fo:block>


<fo:block><fo:wrapper id="indexId434909-113"></fo:wrapper>The <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> call is similar in many
respects:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >int recv(int sockfd, void *buf, int len, int flags);</fo:block>

<fo:block><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sockfd</fo:inline> is the socket descriptor to read
from, <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">buf</fo:inline> is the buffer to read the information
into, <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">len</fo:inline> is the maximum length of the buffer,
and <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">flags</fo:inline> can again be set to
<fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline>.  (See the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> man page
for flag information.)</fo:block>


<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> returns the number of bytes actually
read into the buffer, or <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error (with
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> set, accordingly.)</fo:block>


<fo:block>Wait!  <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> can return
<fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline>.  This can mean only one thing: the remote side
has closed the connection on you!  A return value of
<fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline> is <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>'s way of letting
you know this has occurred.</fo:block>


<fo:block>There, that was easy, wasn't it?  You can now pass data back and
forth on stream sockets!  Whee!  You're a Unix Network
Programmer!</fo:block>








<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="sendtorecv" space-before="0.5em">5.8. <fo:inline font-family="Liberation Mono" font-weight="bold">sendto()</fo:inline> and
<fo:inline font-family="Liberation Mono" font-weight="bold">recvfrom()</fo:inline>—Talk to me, DGRAM-style</fo:block>


<fo:block><fo:wrapper id="indexId434909-114"></fo:wrapper>&#x201C;This is all fine and dandy,&#x201D; I hear you
saying, &#x201C;but where does this leave me with unconnected datagram
sockets?&#x201D;  No problemo, amigo.  We have just the thing.</fo:block>


<fo:block>Since datagram sockets aren't connected to a remote host, guess which
piece of information we need to give before we send a packet?  That's
right!  The destination address!  Here's the scoop:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >int sendto(int sockfd, const void *msg, int len, unsigned int flags,
           const struct sockaddr *to, socklen_t tolen); </fo:block>

<fo:block>As you can see, this call is basically the same as the call to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> with the addition of two other pieces of
information.  <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">to</fo:inline> is a pointer to a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr</fo:inline> (which will probably be another <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr_in</fo:inline> or <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in6</fo:inline> or <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr_storage</fo:inline> that you cast at the last minute) which contains
the destination <fo:wrapper id="indexId434909-115"></fo:wrapper>IP address and <fo:wrapper id="indexId434909-116"></fo:wrapper>port.
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">tolen</fo:inline>, an <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">int</fo:inline> deep-down, can simply be set
to <fo:inline font-family="Liberation Mono" font-size="0.900000em">sizeof *to</fo:inline> or <fo:inline font-family="Liberation Mono" font-size="0.900000em">sizeof(struct sockaddr_storage)</fo:inline>.</fo:block>


<fo:block>To get your hands on the destination address structure, you'll
probably either get it from <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline>, or from
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline>, below, or you'll fill it out by hand.</fo:block>


<fo:block>Just like with <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline>,
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendto()</fo:inline> returns the number of bytes actually sent
(which, again, might be less than the number of bytes you told it to
send!), or <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error.</fo:block>


<fo:block>Equally similar are <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> and
<fo:wrapper id="indexId434909-117"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline>.  The synopsis of
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline> is:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >int recvfrom(int sockfd, void *buf, int len, unsigned int flags,
             struct sockaddr *from, int *fromlen); </fo:block>

<fo:block>Again, this is just like <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> with the
addition of a couple fields.  <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">from</fo:inline> is a pointer to a
local <fo:wrapper id="indexId434909-118"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_storage</fo:inline>
that will be filled with the IP address and port of the originating
machine.  <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">fromlen</fo:inline> is a pointer to a local
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">int</fo:inline> that should be initialized to <fo:inline font-family="Liberation Mono" font-size="0.900000em">sizeof *from</fo:inline> or
<fo:inline font-family="Liberation Mono" font-size="0.900000em">sizeof(struct sockaddr_storage)</fo:inline>.  When the function returns,
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">fromlen</fo:inline> will contain the length of the address actually
stored in <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">from</fo:inline>.</fo:block>


<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline> returns the number of bytes
received, or <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error (with
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> set accordingly.)</fo:block>


<fo:block>So, here's a question: why do we use <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr_storage</fo:inline> as the socket type?  Why not <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr_in</fo:inline>?  Because, you see, we want to not tie ourselves down
to IPv4 or IPv6.  So we use the generic <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr_storage</fo:inline> which we know will be big enough for either.</fo:block>


<fo:block>(So... here's another question: why isn't <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr</fo:inline> itself big enough for any address?  We even cast the
general-purpose <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_storage</fo:inline> to the
general-purpose <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline>!  Seems extraneous and
redundant, huh.  The answer is, it just isn't big enough, and I'd guess
that changing it at this point would be Problematic.  So they made a new
one.)</fo:block>


<fo:block>Remember, if you <fo:wrapper id="indexId434909-119"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline> a datagram
socket, you can then simply use <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> for all your transactions.  The socket itself is
still a datagram socket and the packets still use UDP, but the socket
interface will automatically add the destination and source information
for you.</fo:block>










<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="closedown" space-before="0.5em">5.9. <fo:inline font-family="Liberation Mono" font-weight="bold">close()</fo:inline> and
<fo:inline font-family="Liberation Mono" font-weight="bold">shutdown()</fo:inline>—Get outta my face!</fo:block>


<fo:block>Whew!  You've been <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline>ing and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>ing data all day long, and you've had it.
You're ready to close the connection on your socket descriptor.  This is
easy.  You can just use the regular Unix file descriptor
<fo:wrapper id="indexId434909-120"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">close()</fo:inline> function:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >close(sockfd); 
</fo:block>

<fo:block>This will prevent any more reads and writes to the socket.  Anyone
attempting to read or write the socket on the remote end will receive an
error.</fo:block>


<fo:block>Just in case you want a little more control over how the socket
closes, you can use the <fo:wrapper id="indexId434909-121"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">shutdown()</fo:inline>
function.  It allows you to cut off communication in a certain
direction, or both ways (just like <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">close()</fo:inline> does.)
Synopsis:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >int shutdown(int sockfd, int how); 
</fo:block>

<fo:block><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sockfd</fo:inline> is the socket file descriptor you
want to shutdown, and <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">how</fo:inline> is one of the
following:</fo:block>


<fo:block><fo:table width="100%" space-before="0.5em" space-after="0.5em" table-layout="fixed">
<fo:table-column column-width="10%" column-number="1"/>
<fo:table-column column-width="80%" column-number="2"/>
<fo:table-body start-indent="0pt" text-align="start">
<fo:table-row>
<fo:table-cell column-number="1">
<fo:block/>
</fo:table-cell>
<fo:table-cell column-number="2">
<fo:table width="100%" table-layout="fixed" space-before="0.5em" space-after="0.5em" text-indent="0pt" border-style="solid" border-width="thin">
	<fo:table-column column-width="10%" column-number="1" />
	<fo:table-column column-width="88%" column-number="2" />
	<fo:table-body start-indent="0pt" text-align="start">

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>
			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Further receives are disallowed</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">1</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>
			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Further sends are disallowed</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">2</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>
			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Further sends and receives are disallowed (like <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">close()</fo:inline>)</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>

	</fo:table-body>
</fo:table>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>


<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">shutdown()</fo:inline> returns <fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline> on
success, and <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error (with
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> set accordingly.)</fo:block>


<fo:block>If you deign to use <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">shutdown()</fo:inline> on unconnected
datagram sockets, it will simply make the socket unavailable for further
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> calls
(remember that you can use these if you <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline>
your datagram socket.)</fo:block>


<fo:block>It's important to note that <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">shutdown()</fo:inline>
doesn't actually close the file descriptor—it just changes its
usability.  To free a socket descriptor, you need to use
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">close()</fo:inline>.</fo:block>


<fo:block>Nothing to it.</fo:block>


<fo:block>(Except to remember that if you're using <fo:wrapper id="indexId434909-122"></fo:wrapper>Windows
and <fo:wrapper id="indexId434909-123"></fo:wrapper>Winsock that you should call <fo:wrapper id="indexId434909-124"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">closesocket()</fo:inline> instead of
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">close()</fo:inline>.)</fo:block>









<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="getpeername" space-before="0.5em">5.10. <fo:inline font-family="Liberation Mono" font-weight="bold">getpeername()</fo:inline>—Who are you?</fo:block>


<fo:block><fo:wrapper id="indexId434909-125"></fo:wrapper>This function is so easy.</fo:block>


<fo:block>It's so easy, I almost didn't give it its own section.  But here
it is anyway.</fo:block>


<fo:block>The function <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getpeername()</fo:inline> will tell you who is at the other end
of a connected stream socket.  The synopsis:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/socket.h&gt;

int getpeername(int sockfd, struct sockaddr *addr, int *addrlen); 
</fo:block>

<fo:block><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sockfd</fo:inline> is the descriptor of the connected
stream socket, <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">addr</fo:inline> is a pointer to a
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline> (or a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in</fo:inline>) that
will hold the information about the other side of the connection, and
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">addrlen</fo:inline> is a pointer to an <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">int</fo:inline>, that
should be initialized to <fo:inline font-family="Liberation Mono" font-size="0.900000em">sizeof *addr</fo:inline> or <fo:inline font-family="Liberation Mono" font-size="0.900000em">sizeof(struct
sockaddr)</fo:inline>.</fo:block>


<fo:block>The function returns <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error and sets
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> accordingly.</fo:block>


<fo:block>Once you have their address, you can use <fo:wrapper id="indexId434909-126"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_ntop()</fo:inline>, <fo:wrapper id="indexId434909-127"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getnameinfo()</fo:inline>, or <fo:wrapper id="indexId434909-128"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyaddr()</fo:inline> to print or get more
information.  No, you can't get their login name.  (Ok, ok.  If the
other computer is running an ident daemon, this is possible.  This,
however, is beyond the scope of this document.  Check out <fo:basic-link external-destination="http://tools.ietf.org/html/rfc1413" keep-with-next="always">RFC 1413</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">19</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">19. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc1413</fo:inline></fo:block></fo:footnote-body></fo:footnote> for more info.)</fo:block>









<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="gethostname" space-before="0.5em">5.11. <fo:inline font-family="Liberation Mono" font-weight="bold">gethostname()</fo:inline>—Who am I?</fo:block>


<fo:block><fo:wrapper id="indexId434909-129"></fo:wrapper>Even easier than <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getpeername()</fo:inline>
is the function <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostname()</fo:inline>.  It returns the name of the
computer that your program is running on.  The name can then be used by
<fo:wrapper id="indexId434909-130"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyname()</fo:inline>, below, to
determine the <fo:wrapper id="indexId434909-131"></fo:wrapper>IP address of your local machine.</fo:block>


<fo:block>What could be more fun?  I could think of a few things, but they
don't pertain to socket programming.  Anyway, here's the
breakdown:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;unistd.h&gt;

int gethostname(char *hostname, size_t size); 
</fo:block>

<fo:block>The arguments are simple: <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">hostname</fo:inline> is a
pointer to an array of chars that will contain the hostname upon the
function's return, and <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">size</fo:inline> is the length in
bytes of the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">hostname</fo:inline> array.</fo:block>


<fo:block>The function returns <fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline> on successful
completion, and <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error, setting
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> as usual.</fo:block>




</fo:flow>
</fo:page-sequence>
  





<fo:page-sequence master-reference="chapter">
<fo:static-content flow-name="bg-normal-first-footer">
<fo:block text-align="center" font-family="Liberation Sans" font-weight="bold" font-size="11pt" padding-top="1em"><fo:page-number/></fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="50%" />
	<fo:table-column column-number="2" column-width="50%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt" font-style="italic">Beej's Guide to Network Programming</fo:block>
			</fo:table-cell>
			<fo:table-cell column-number="2" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="11pt" font-weight="bold"><fo:page-number/></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-even-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline>&#8195;&#8195;<fo:inline font-style="italic">Beej's Guide to Network Programming</fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-odd-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-style="italic">Client-Server Background</fo:inline>&#8195;&#8195;<fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="xsl-footnote-separator">
	<fo:block>
		<fo:leader leader-pattern="rule" leader-length="40%"/>
	</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body" id="clientserver" font-family="Liberation Serif" font-size="11pt" text-indent="2.000000em">

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="clientserver">6. Client-Server Background</fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>


<fo:block><fo:wrapper id="indexId434909-132"></fo:wrapper>It's a client-server world, baby.  Just
about everything on the network deals with client processes talking to
server processes and vice-versa.  Take <fo:inline font-weight="bold">telnet</fo:inline>, for instance.
When you connect to a remote host on port 23 with telnet (the client), a
program on that host (called <fo:inline font-weight="bold">telnetd</fo:inline>, the server) springs to
life.  It handles the incoming telnet connection, sets you up with a
login prompt, etc.</fo:block>


<fo:block id="figure2" space-before="0.75em" space-after="0.75em">
    <fo:block text-align="center"><fo:external-graphic content-width="3.334in" src="cs-300-3.334.png"/></fo:block>

    <fo:block font-weight="bold" text-align="center" keep-with-previous="always">Client-Server Interaction.</fo:block>

</fo:block>

<fo:block>The exchange of information between client and server is
summarized in <fo:basic-link internal-destination="figure2">the above diagram</fo:basic-link>.</fo:block>


<fo:block>Note that the client-server pair can speak
<fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_STREAM</fo:inline>, <fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_DGRAM</fo:inline>, or
anything else (as long as they're speaking the same thing.)  Some good
examples of client-server pairs are
<fo:inline font-weight="bold">telnet</fo:inline>/<fo:inline font-weight="bold">telnetd</fo:inline>,
<fo:inline font-weight="bold">ftp</fo:inline>/<fo:inline font-weight="bold">ftpd</fo:inline>, or
<fo:inline font-weight="bold">Firefox</fo:inline>/<fo:inline font-weight="bold">Apache</fo:inline>.  Every time you use
<fo:inline font-weight="bold">ftp</fo:inline>, there's a remote program,
<fo:inline font-weight="bold">ftpd</fo:inline>, that serves you.</fo:block>


<fo:block>Often, there will only be one server on a machine, and that server
will handle multiple clients using <fo:wrapper id="indexId434909-133"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">fork()</fo:inline>.  The basic routine is: server will
wait for a connection, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline> it, and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">fork()</fo:inline>
a child process to handle it.  This is what our sample server does in
the next section.</fo:block>







<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="simpleserver" space-before="0.5em">6.1. A Simple Stream Server</fo:block>


<fo:block><fo:wrapper id="indexId434909-134"></fo:wrapper>All this server does is send the string
&#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">Hello, World!\n</fo:inline>&#x201D; out over a stream connection.  All you need
to do to test this server is run it in one window, and telnet to it from
another with:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-right-style="dashed" border-bottom-style="dashed" background-color="#E0E0E0" widows="2" orphans="2" white-space="pre" font-weight="bold" font-family="Liberation Mono" font-size="0.801000em" >$ telnet remotehostname 3490</fo:block>

<fo:block>where <fo:inline font-family="Liberation Mono" font-size="0.900000em">remotehostname</fo:inline> is the name of the machine you're
running it on.</fo:block>


<fo:block><fo:basic-link external-destination="http://beej.us/guide/bgnet/examples/server.c" keep-with-next="always">The server code</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">20</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">20. <fo:inline font-family="Liberation Mono">http://beej.us/guide/bgnet/examples/server.c</fo:inline></fo:block></fo:footnote-body></fo:footnote>:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >/*
** server.c -- a stream socket server demo
*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;errno.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;netdb.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;sys/wait.h&gt;
#include &lt;signal.h&gt;

#define PORT "3490"  // the port users will be connecting to

#define BACKLOG 10   // how many pending connections queue will hold

void sigchld_handler(int s)
{
    while(waitpid(-1, NULL, WNOHANG) &gt; 0);
}

// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa-&gt;sa_family == AF_INET) {
        return &amp;(((struct sockaddr_in*)sa)-&gt;sin_addr);
    }

    return &amp;(((struct sockaddr_in6*)sa)-&gt;sin6_addr);
}

int main(void)
{
    int sockfd, new_fd;  // listen on sock_fd, new connection on new_fd
    struct addrinfo hints, *servinfo, *p;
    struct sockaddr_storage their_addr; // connector's address information
    socklen_t sin_size;
    struct sigaction sa;
    int yes=1;
    char s[INET6_ADDRSTRLEN];
    int rv;

    memset(&amp;hints, 0, sizeof hints);
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    if ((rv = getaddrinfo(NULL, PORT, &amp;hints, &amp;servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p-&gt;ai_next) {
        if ((sockfd = socket(p-&gt;ai_family, p-&gt;ai_socktype,
                p-&gt;ai_protocol)) == -1) {
            perror("server: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &amp;yes,
                sizeof(int)) == -1) {
            perror("setsockopt");
            exit(1);
        }

        if (bind(sockfd, p-&gt;ai_addr, p-&gt;ai_addrlen) == -1) {
            close(sockfd);
            perror("server: bind");
            continue;
        }

        break;
    }

    if (p == NULL)  {
        fprintf(stderr, "server: failed to bind\n");
        return 2;
    }

    freeaddrinfo(servinfo); // all done with this structure

    if (listen(sockfd, BACKLOG) == -1) {
        perror("listen");
        exit(1);
    }

    sa.sa_handler = sigchld_handler; // reap all dead processes
    sigemptyset(&amp;sa.sa_mask);
    sa.sa_flags = SA_RESTART;
    if (sigaction(SIGCHLD, &amp;sa, NULL) == -1) {
        perror("sigaction");
        exit(1);
    }

    printf("server: waiting for connections...\n");

    while(1) {  // main accept() loop
        sin_size = sizeof their_addr;
        new_fd = accept(sockfd, (struct sockaddr *)&amp;their_addr, &amp;sin_size);
        if (new_fd == -1) {
            perror("accept");
            continue;
        }

        inet_ntop(their_addr.ss_family,
            get_in_addr((struct sockaddr *)&amp;their_addr),
            s, sizeof s);
        printf("server: got connection from %s\n", s);

        if (!fork()) { // this is the child process
            close(sockfd); // child doesn't need the listener
            if (send(new_fd, "Hello, world!", 13, 0) == -1)
                perror("send");
            close(new_fd);
            exit(0);
        }
        close(new_fd);  // parent doesn't need this
    }

    return 0;
}</fo:block>

<fo:block>In case you're curious, I have the code in one big
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">main()</fo:inline> function for (I feel) syntactic clarity.
Feel free to split it into smaller functions if it makes you feel
better.</fo:block>


<fo:block>(Also, this whole <fo:wrapper id="indexId434909-135"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sigaction()</fo:inline>
thing might be new to you—that's ok.  The code that's there is
responsible for reaping <fo:wrapper id="indexId434909-136"></fo:wrapper>zombie processes that
appear as the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">fork()</fo:inline>ed child processes exit.  If you make
lots of zombies and don't reap them, your system administrator will
become agitated.)</fo:block>


<fo:block>You can get the data from this server by using the client
listed in the next section.</fo:block>









<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="simpleclient" space-before="0.5em">6.2. A Simple Stream Client</fo:block>


<fo:block><fo:wrapper id="indexId434909-137"></fo:wrapper>This guy's even easier than the server.  All
this client does is connect to the host you specify on the command line,
port 3490.  It gets the string that the server sends.</fo:block>


<fo:block><fo:basic-link external-destination="http://beej.us/guide/bgnet/examples/client.c" keep-with-next="always">The client
source</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">21</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">21. <fo:inline font-family="Liberation Mono">http://beej.us/guide/bgnet/examples/client.c</fo:inline></fo:block></fo:footnote-body></fo:footnote>:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >/*
** client.c -- a stream socket client demo
*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;errno.h&gt;
#include &lt;string.h&gt;
#include &lt;netdb.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;sys/socket.h&gt;

#include &lt;arpa/inet.h&gt;

#define PORT "3490" // the port client will be connecting to 

#define MAXDATASIZE 100 // max number of bytes we can get at once 

// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa-&gt;sa_family == AF_INET) {
        return &amp;(((struct sockaddr_in*)sa)-&gt;sin_addr);
    }

    return &amp;(((struct sockaddr_in6*)sa)-&gt;sin6_addr);
}

int main(int argc, char *argv[])
{
    int sockfd, numbytes;  
    char buf[MAXDATASIZE];
    struct addrinfo hints, *servinfo, *p;
    int rv;
    char s[INET6_ADDRSTRLEN];

    if (argc != 2) {
        fprintf(stderr,"usage: client hostname\n");
        exit(1);
    }

    memset(&amp;hints, 0, sizeof hints);
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;

    if ((rv = getaddrinfo(argv[1], PORT, &amp;hints, &amp;servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and connect to the first we can
    for(p = servinfo; p != NULL; p = p-&gt;ai_next) {
        if ((sockfd = socket(p-&gt;ai_family, p-&gt;ai_socktype,
                p-&gt;ai_protocol)) == -1) {
            perror("client: socket");
            continue;
        }

        if (connect(sockfd, p-&gt;ai_addr, p-&gt;ai_addrlen) == -1) {
            close(sockfd);
            perror("client: connect");
            continue;
        }

        break;
    }

    if (p == NULL) {
        fprintf(stderr, "client: failed to connect\n");
        return 2;
    }

    inet_ntop(p-&gt;ai_family, get_in_addr((struct sockaddr *)p-&gt;ai_addr),
            s, sizeof s);
    printf("client: connecting to %s\n", s);

    freeaddrinfo(servinfo); // all done with this structure

    if ((numbytes = recv(sockfd, buf, MAXDATASIZE-1, 0)) == -1) {
        perror("recv");
        exit(1);
    }

    buf[numbytes] = '\0';

    printf("client: received '%s'\n",buf);

    close(sockfd);

    return 0;
}</fo:block>

<fo:block>Notice that if you don't run the server before you run the client,
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline> returns
<fo:wrapper id="indexId434909-138"></fo:wrapper>&#x201C;Connection refused&#x201D;.  Very
useful.</fo:block>









<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="datagram" space-before="0.5em">6.3. Datagram Sockets</fo:block>


<fo:block>We've already covered the basics of UDP datagram sockets with our
discussion of <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendto()</fo:inline> and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline>, above,
so I'll just present a couple of sample programs: <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">talker.c</fo:inline>
and <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">listener.c</fo:inline>.</fo:block>


<fo:block><fo:wrapper id="indexId434909-139"></fo:wrapper><fo:inline font-weight="bold">listener</fo:inline> sits on a machine
waiting for an incoming packet on port 4950.  <fo:inline font-weight="bold">talker</fo:inline> sends a
packet to that port, on the specified machine, that contains whatever
the user enters on the command line.</fo:block>


<fo:block>Here is the <fo:basic-link external-destination="http://beej.us/guide/bgnet/examples/listener.c" keep-with-next="always">source for
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">listener.c</fo:inline></fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">22</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">22. <fo:inline font-family="Liberation Mono">http://beej.us/guide/bgnet/examples/listener.c</fo:inline></fo:block></fo:footnote-body></fo:footnote>:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >/*
** listener.c -- a datagram sockets "server" demo
*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;errno.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;netdb.h&gt;

#define MYPORT "4950"   // the port users will be connecting to

#define MAXBUFLEN 100

// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa-&gt;sa_family == AF_INET) {
        return &amp;(((struct sockaddr_in*)sa)-&gt;sin_addr);
    }

    return &amp;(((struct sockaddr_in6*)sa)-&gt;sin6_addr);
}

int main(void)
{
    int sockfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET6_ADDRSTRLEN];

    memset(&amp;hints, 0, sizeof hints);
    hints.ai_family = AF_UNSPEC; // set to AF_INET to force IPv4
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    if ((rv = getaddrinfo(NULL, MYPORT, &amp;hints, &amp;servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p-&gt;ai_next) {
        if ((sockfd = socket(p-&gt;ai_family, p-&gt;ai_socktype,
                p-&gt;ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (bind(sockfd, p-&gt;ai_addr, p-&gt;ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    if (p == NULL) {
        fprintf(stderr, "listener: failed to bind socket\n");
        return 2;
    }

    freeaddrinfo(servinfo);

    printf("listener: waiting to recvfrom...\n");

    addr_len = sizeof their_addr;
    if ((numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
        (struct sockaddr *)&amp;their_addr, &amp;addr_len)) == -1) {
        perror("recvfrom");
        exit(1);
    }

    printf("listener: got packet from %s\n",
        inet_ntop(their_addr.ss_family,
            get_in_addr((struct sockaddr *)&amp;their_addr),
            s, sizeof s));
    printf("listener: packet is %d bytes long\n", numbytes);
    buf[numbytes] = '\0';
    printf("listener: packet contains \"%s\"\n", buf);

    close(sockfd);

    return 0;
}</fo:block>

<fo:block>Notice that in our call to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline> we're finally
using <fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_DGRAM</fo:inline>.  Also, note that there's no need to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">listen()</fo:inline> or <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline>.  This is one of the
perks of using unconnected datagram sockets!</fo:block>


<fo:block><fo:wrapper id="indexId434909-140"></fo:wrapper>Next comes the <fo:basic-link external-destination="http://beej.us/guide/bgnet/examples/talker.c" keep-with-next="always">source for <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">talker.c</fo:inline></fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">23</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">23. <fo:inline font-family="Liberation Mono">http://beej.us/guide/bgnet/examples/talker.c</fo:inline></fo:block></fo:footnote-body></fo:footnote>:</fo:block>



<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >/*
** talker.c -- a datagram "client" demo
*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;errno.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;netdb.h&gt;

#define SERVERPORT "4950"   // the port users will be connecting to

int main(int argc, char *argv[])
{
    int sockfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;

    if (argc != 3) {
        fprintf(stderr,"usage: talker hostname message\n");
        exit(1);
    }

    memset(&amp;hints, 0, sizeof hints);
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_DGRAM;

    if ((rv = getaddrinfo(argv[1], SERVERPORT, &amp;hints, &amp;servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and make a socket
    for(p = servinfo; p != NULL; p = p-&gt;ai_next) {
        if ((sockfd = socket(p-&gt;ai_family, p-&gt;ai_socktype,
                p-&gt;ai_protocol)) == -1) {
            perror("talker: socket");
            continue;
        }

        break;
    }

    if (p == NULL) {
        fprintf(stderr, "talker: failed to bind socket\n");
        return 2;
    }

    if ((numbytes = sendto(sockfd, argv[2], strlen(argv[2]), 0,
             p-&gt;ai_addr, p-&gt;ai_addrlen)) == -1) {
        perror("talker: sendto");
        exit(1);
    }

    freeaddrinfo(servinfo);

    printf("talker: sent %d bytes to %s\n", numbytes, argv[1]);
    close(sockfd);

    return 0;
}</fo:block>


<fo:block>And that's all there is to it!  Run <fo:inline font-weight="bold">listener</fo:inline> on some
machine, then run <fo:inline font-weight="bold">talker</fo:inline> on another.  Watch them communicate!
Fun G-rated excitement for the entire nuclear family!</fo:block>


<fo:block>You don't even have to run the server this time!  You can run
<fo:inline font-weight="bold">talker</fo:inline> by itself, and it just happily fires packets off into
the ether where they disappear if no one is ready with a
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline> on the other side.  Remember: data sent using
UDP datagram sockets isn't guaranteed to arrive!</fo:block>


<fo:block>Except for one more tiny detail that I've mentioned many times in the
past: <fo:wrapper id="indexId434909-141"></fo:wrapper>connected datagram
sockets.  I need to talk about this here, since we're in the datagram
section of the document.  Let's say that <fo:inline font-weight="bold">talker</fo:inline> calls
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline> and specifies the <fo:inline font-weight="bold">listener</fo:inline>'s address.
From that point on, <fo:inline font-weight="bold">talker</fo:inline> may only sent to and receive from
the address specified by <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline>.  For this reason, you
don't have to use <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendto()</fo:inline> and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline>; you
can simply use <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>.</fo:block>




</fo:flow>
</fo:page-sequence>
 





<fo:page-sequence master-reference="chapter">
<fo:static-content flow-name="bg-normal-first-footer">
<fo:block text-align="center" font-family="Liberation Sans" font-weight="bold" font-size="11pt" padding-top="1em"><fo:page-number/></fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="50%" />
	<fo:table-column column-number="2" column-width="50%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt" font-style="italic">Beej's Guide to Network Programming</fo:block>
			</fo:table-cell>
			<fo:table-cell column-number="2" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="11pt" font-weight="bold"><fo:page-number/></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-even-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline>&#8195;&#8195;<fo:inline font-style="italic">Beej's Guide to Network Programming</fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-odd-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-style="italic">Slightly Advanced Techniques</fo:inline>&#8195;&#8195;<fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="xsl-footnote-separator">
	<fo:block>
		<fo:leader leader-pattern="rule" leader-length="40%"/>
	</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body" id="advanced" font-family="Liberation Serif" font-size="11pt" text-indent="2.000000em">

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="advanced">7. Slightly Advanced Techniques</fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>


<fo:block>These aren't <fo:inline font-style="italic">really</fo:inline> advanced, but they're
getting out of the more basic levels we've already covered.  In fact, if
you've gotten this far, you should consider yourself fairly accomplished
in the basics of Unix network programming!  Congratulations!</fo:block>


<fo:block>So here we go into the brave new world of some of the more
esoteric things you might want to learn about sockets.  Have at
it!</fo:block>







<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="blocking" space-before="0.5em">7.1. Blocking</fo:block>


<fo:block><fo:wrapper id="indexId434909-142"></fo:wrapper>Blocking.  You've heard about it—now what
the heck is it?  In a nutshell, &#x201C;block&#x201D; is techie jargon for &#x201C;sleep&#x201D;.
You probably noticed that when you run <fo:inline font-weight="bold">listener</fo:inline>, above, it
just sits there until a packet arrives.  What happened is that it called
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline>, there was no data, and so
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline> is said to &#x201C;block&#x201D; (that is, sleep there) until
some data arrives.</fo:block>


<fo:block>Lots of functions block.  <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline> blocks.
All the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> functions block.  The reason they
can do this is because they're allowed to.  When you first create the
socket descriptor with <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline>, the kernel sets it
to blocking.  <fo:wrapper id="indexId434909-143"></fo:wrapper>If you don't want a socket to be blocking, you have to
make a call to <fo:wrapper id="indexId434909-144"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">fcntl()</fo:inline>:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;unistd.h&gt;
#include &lt;fcntl.h&gt;
.
.
.
sockfd = socket(PF_INET, SOCK_STREAM, 0);
fcntl(sockfd, F_SETFL, O_NONBLOCK);
.
.
. 
</fo:block>

<fo:block>By setting a socket to non-blocking, you can effectively &#x201C;poll&#x201D;
the socket for information.  If you try to read from a non-blocking
socket and there's no data there, it's not allowed to block—it
will return <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> and <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> will be set to
<fo:wrapper id="indexId434909-145"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">EWOULDBLOCK</fo:inline>.</fo:block>


<fo:block>Generally speaking, however, this type of polling is a bad idea.
If you put your program in a busy-wait looking for data on the socket,
you'll suck up CPU time like it was going out of style.  A more elegant
solution for checking to see if there's data waiting to be read comes in
the following section on <fo:wrapper id="indexId434909-146"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline>.</fo:block>









<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="select" space-before="0.5em">7.2. <fo:inline font-family="Liberation Mono" font-weight="bold">select()</fo:inline>—Synchronous I/O Multiplexing</fo:block>


<fo:block><fo:wrapper id="indexId434909-147"></fo:wrapper>This function is somewhat strange, but it's very
useful.  Take the following situation: you are a server and you want to
listen for incoming connections as well as keep reading from the
connections you already have.</fo:block>


<fo:block>No problem, you say, just an <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline> and a
couple of <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>s.  Not so fast, buster!  What if
you're blocking on an <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline> call?  How are you
going to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> data at the same time?  &#x201C;Use
non-blocking sockets!&#x201D;  No way!  You don't want to be a CPU hog.  What,
then?</fo:block>


<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline> gives you the power to monitor
several sockets at the same time.  It'll tell you which ones are ready
for reading, which are ready for writing, and which sockets have raised
exceptions, if you really want to know that.</fo:block>


<fo:block>This being said, in modern times <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline>, though very
portable, is one of the slowest methods for monitoring sockets.  One
possible alternative is <fo:basic-link external-destination="http://www.monkey.org/~provos/libevent/" keep-with-next="always">libevent</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">24</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">24. <fo:inline font-family="Liberation Mono">http://www.monkey.org/~provos/libevent/</fo:inline></fo:block></fo:footnote-body></fo:footnote>, or
something similar, that encapsulates all the system-dependent stuff
involved with getting socket notifications.</fo:block>


<fo:block>Without any further ado, I'll offer the synopsis of
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline>:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/time.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;unistd.h&gt;

int select(int numfds, fd_set *readfds, fd_set *writefds,
           fd_set *exceptfds, struct timeval *timeout); 
</fo:block>

<fo:block>The function monitors &#x201C;sets&#x201D; of file descriptors; in particular
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">readfds</fo:inline>, <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">writefds</fo:inline>, and
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">exceptfds</fo:inline>.  If you want to see if you can read
from standard input and some socket descriptor,
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sockfd</fo:inline>, just add the file descriptors
<fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline> and <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sockfd</fo:inline> to the set
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">readfds</fo:inline>.  The parameter
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">numfds</fo:inline> should be set to the values of the highest
file descriptor plus one.  In this example, it should be set to
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sockfd+1</fo:inline>, since it is assuredly higher than
standard input (<fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline>).</fo:block>


<fo:block>When <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline> returns,
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">readfds</fo:inline> will be modified to reflect which of the
file descriptors you selected which is ready for reading.  You can test
them with the macro <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">FD_ISSET()</fo:inline>, below.</fo:block>


<fo:block>Before progressing much further, I'll talk about how to manipulate
these sets.  Each set is of the type <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">fd_set</fo:inline>.  The following
macros operate on this type:</fo:block>


<fo:block><fo:table width="100%" space-before="0.5em" space-after="0.5em" table-layout="fixed">
<fo:table-column column-width="0%" column-number="1"/>
<fo:table-column column-width="100%" column-number="2"/>
<fo:table-body start-indent="0pt" text-align="start">
<fo:table-row>
<fo:table-cell column-number="1">
<fo:block/>
</fo:table-cell>
<fo:table-cell column-number="2">
<fo:table width="100%" table-layout="fixed" space-before="0.5em" space-after="0.5em" text-indent="0pt" border-style="solid" border-width="thin">
	<fo:table-column column-width="50%" column-number="1" />
	<fo:table-column column-width="48%" column-number="2" />
	<fo:table-body start-indent="0pt" text-align="start">

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-148"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">FD_SET(int fd, fd_set *set);</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Add <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">fd</fo:inline> to the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">set</fo:inline>.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-149"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">FD_CLR(int fd, fd_set *set);</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Remove <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">fd</fo:inline> from the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">set</fo:inline>.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-150"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">FD_ISSET(int fd, fd_set *set);</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Return true if <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">fd</fo:inline> is in the
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">set</fo:inline>.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-151"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">FD_ZERO(fd_set *set);</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Clear all entries from the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">set</fo:inline>.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>

	</fo:table-body>
</fo:table>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>


<fo:block>Finally, what is this weirded out <fo:wrapper id="indexId434909-152"></fo:wrapper>
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct timeval</fo:inline>?
Well, sometimes you don't want to wait forever for someone to send you
some data.  Maybe every 96 seconds you want to print &#x201C;Still Going...&#x201D; to
the terminal even though nothing has happened.  This time structure
allows you to specify a timeout period.  If the time is exceeded and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline> still hasn't found any ready file
descriptors, it'll return so you can continue processing.</fo:block>


<fo:block>The <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct timeval</fo:inline> has the follow fields:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >struct timeval {
    int tv_sec;     // seconds
    int tv_usec;    // microseconds
}; 
</fo:block>

<fo:block>Just set <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">tv_sec</fo:inline> to the number of seconds to
wait, and set <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">tv_usec</fo:inline> to the number of
microseconds to wait.  Yes, that's <fo:inline font-style="italic">micro</fo:inline>seconds,
not milliseconds.  There are 1,000 microseconds in a millisecond, and
1,000 milliseconds in a second.  Thus, there are 1,000,000 microseconds
in a second.  Why is it &#x201C;usec&#x201D;?  The &#x201C;u&#x201D; is supposed to look like the
Greek letter &#x03BC; (Mu) that we use for &#x201C;micro&#x201D;.  Also, when the function
returns, <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">timeout</fo:inline> <fo:inline font-style="italic">might</fo:inline> be
updated to show the time still remaining.  This depends on what flavor
of Unix you're running.</fo:block>


<fo:block>Yay!  We have a microsecond resolution timer!  Well, don't count on
it.  You'll probably have to wait some part of your standard Unix
timeslice no matter how small you set your <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
timeval</fo:inline>.</fo:block>


<fo:block>Other things of interest:  If you set the fields in your
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct timeval</fo:inline> to <fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline>,
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline> will timeout immediately, effectively
polling all the file descriptors in your sets.  If you set the
parameter <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">timeout</fo:inline> to NULL, it will never timeout,
and will wait until the first file descriptor is ready.  Finally, if you
don't care about waiting for a certain set, you can just set it to NULL
in the call to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline>.</fo:block>


<fo:block><fo:basic-link external-destination="http://beej.us/guide/bgnet/examples/select.c" keep-with-next="always">The following code snippet</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">25</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">25. <fo:inline font-family="Liberation Mono">http://beej.us/guide/bgnet/examples/select.c</fo:inline></fo:block></fo:footnote-body></fo:footnote> waits 2.5 seconds for
something to appear on standard input:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >/*
** select.c -- a select() demo
*/

#include &lt;stdio.h&gt;
#include &lt;sys/time.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;unistd.h&gt;

#define STDIN 0  // file descriptor for standard input

int main(void)
{
    struct timeval tv;
    fd_set readfds;

    tv.tv_sec = 2;
    tv.tv_usec = 500000;

    FD_ZERO(&amp;readfds);
    FD_SET(STDIN, &amp;readfds);

    // don't care about writefds and exceptfds:
    select(STDIN+1, &amp;readfds, NULL, NULL, &amp;tv);

    if (FD_ISSET(STDIN, &amp;readfds))
        printf("A key was pressed!\n");
    else
        printf("Timed out.\n");

    return 0;
} 
</fo:block>

<fo:block>If you're on a line buffered terminal, the key you hit should be
RETURN or it will time out anyway.</fo:block>


<fo:block>Now, some of you might think this is a great way to wait for data
on a datagram socket—and you are right: it <fo:inline font-style="italic">might</fo:inline> be.
Some Unices can use select in this manner, and some can't.  You should
see what your local man page says on the matter if you want to attempt
it.</fo:block>


<fo:block>Some Unices update the time in your <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct timeval</fo:inline> to
reflect the amount of time still remaining before a timeout.  But others
do not.  Don't rely on that occurring if you want to be portable.  (Use
<fo:wrapper id="indexId434909-153"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gettimeofday()</fo:inline> if you need to
track time elapsed.  It's a bummer, I know, but that's the way it
is.)</fo:block>


<fo:block>What happens if a socket in the read set closes the connection?
Well, in that case, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline> returns with that
socket descriptor set as &#x201C;ready to read&#x201D;.  When you actually do
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> from it, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> will
return <fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline>.  That's how you know the client has
closed the connection.</fo:block>


<fo:block>One more note of interest about <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline>: if you have a
socket that is <fo:wrapper id="indexId434909-154"></fo:wrapper>
<fo:wrapper id="indexId434909-155"></fo:wrapper> <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">listen()</fo:inline>ing, you can
check to see if there is a new connection by putting that socket's file
descriptor in the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">readfds</fo:inline> set.</fo:block>


<fo:block>And that, my friends, is a quick overview of the almighty
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline> function.</fo:block>


<fo:block>But, by popular demand, here is an in-depth example.
Unfortunately, the difference between the dirt-simple example, above, and
this one here is significant.  But have a look, then read the
description that follows it.</fo:block>


<fo:block><fo:basic-link external-destination="http://beej.us/guide/bgnet/examples/selectserver.c" keep-with-next="always">This program</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">26</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">26. <fo:inline font-family="Liberation Mono">http://beej.us/guide/bgnet/examples/selectserver.c</fo:inline></fo:block></fo:footnote-body></fo:footnote> acts
like a simple multi-user chat server.  Start it running in one window,
then <fo:inline font-weight="bold">telnet</fo:inline> to it (&#x201C;<fo:inline font-weight="bold">telnet hostname
9034</fo:inline>&#x201D;) from multiple other windows.  When you type something
in one <fo:inline font-weight="bold">telnet</fo:inline> session, it should appear in all the
others.</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >/*
** selectserver.c -- a cheezy multiperson chat server
*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;netdb.h&gt;

#define PORT "9034"   // port we're listening on

// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa-&gt;sa_family == AF_INET) {
        return &amp;(((struct sockaddr_in*)sa)-&gt;sin_addr);
    }

    return &amp;(((struct sockaddr_in6*)sa)-&gt;sin6_addr);
}

int main(void)
{
    fd_set master;    // master file descriptor list
    fd_set read_fds;  // temp file descriptor list for select()
    int fdmax;        // maximum file descriptor number

    int listener;     // listening socket descriptor
    int newfd;        // newly accept()ed socket descriptor
    struct sockaddr_storage remoteaddr; // client address
    socklen_t addrlen;

    char buf[256];    // buffer for client data
    int nbytes;

    char remoteIP[INET6_ADDRSTRLEN];

    int yes=1;        // for setsockopt() SO_REUSEADDR, below
    int i, j, rv;

    struct addrinfo hints, *ai, *p;

    FD_ZERO(&amp;master);    // clear the master and temp sets
    FD_ZERO(&amp;read_fds);

    // get us a socket and bind it
    memset(&amp;hints, 0, sizeof hints);
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_flags = AI_PASSIVE;
    if ((rv = getaddrinfo(NULL, PORT, &amp;hints, &amp;ai)) != 0) {
        fprintf(stderr, "selectserver: %s\n", gai_strerror(rv));
        exit(1);
    }
    
    for(p = ai; p != NULL; p = p-&gt;ai_next) {
        listener = socket(p-&gt;ai_family, p-&gt;ai_socktype, p-&gt;ai_protocol);
        if (listener &lt; 0) { 
            continue;
        }
        
        // lose the pesky "address already in use" error message
        setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &amp;yes, sizeof(int));

        if (bind(listener, p-&gt;ai_addr, p-&gt;ai_addrlen) &lt; 0) {
            close(listener);
            continue;
        }

        break;
    }

    // if we got here, it means we didn't get bound
    if (p == NULL) {
        fprintf(stderr, "selectserver: failed to bind\n");
        exit(2);
    }

    freeaddrinfo(ai); // all done with this

    // listen
    if (listen(listener, 10) == -1) {
        perror("listen");
        exit(3);
    }

    // add the listener to the master set
    FD_SET(listener, &amp;master);

    // keep track of the biggest file descriptor
    fdmax = listener; // so far, it's this one

    // main loop
    for(;;) {
        read_fds = master; // copy it
        if (select(fdmax+1, &amp;read_fds, NULL, NULL, NULL) == -1) {
            perror("select");
            exit(4);
        }

        // run through the existing connections looking for data to read
        for(i = 0; i &lt;= fdmax; i++) {
            if (FD_ISSET(i, &amp;read_fds)) { // we got one!!
                if (i == listener) {
                    // handle new connections
                    addrlen = sizeof remoteaddr;
                    newfd = accept(listener,
                        (struct sockaddr *)&amp;remoteaddr,
                        &amp;addrlen);

                    if (newfd == -1) {
                        perror("accept");
                    } else {
                        FD_SET(newfd, &amp;master); // add to master set
                        if (newfd &gt; fdmax) {    // keep track of the max
                            fdmax = newfd;
                        }
                        printf("selectserver: new connection from %s on "
                            "socket %d\n",
                            inet_ntop(remoteaddr.ss_family,
                                get_in_addr((struct sockaddr*)&amp;remoteaddr),
                                remoteIP, INET6_ADDRSTRLEN),
                            newfd);
                    }
                } else {
                    // handle data from a client
                    if ((nbytes = recv(i, buf, sizeof buf, 0)) &lt;= 0) {
                        // got error or connection closed by client
                        if (nbytes == 0) {
                            // connection closed
                            printf("selectserver: socket %d hung up\n", i);
                        } else {
                            perror("recv");
                        }
                        close(i); // bye!
                        FD_CLR(i, &amp;master); // remove from master set
                    } else {
                        // we got some data from a client
                        for(j = 0; j &lt;= fdmax; j++) {
                            // send to everyone!
                            if (FD_ISSET(j, &amp;master)) {
                                // except the listener and ourselves
                                if (j != listener &amp;&amp; j != i) {
                                    if (send(j, buf, nbytes, 0) == -1) {
                                        perror("send");
                                    }
                                }
                            }
                        }
                    }
                } // END handle data from client
            } // END got new incoming connection
        } // END looping through file descriptors
    } // END for(;;)--and you thought it would never end!
    
    return 0;
}</fo:block>

<fo:block>Notice I have two file descriptor sets in the code:
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">master</fo:inline> and <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">read_fds</fo:inline>.  The
first, <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">master</fo:inline>, holds all the socket descriptors
that are currently connected, as well as the socket descriptor that is
listening for new connections.</fo:block>


<fo:block>The reason I have the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">master</fo:inline> set is that
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline> actually <fo:inline font-style="italic">changes</fo:inline> the
set you pass into it to reflect which sockets are ready to read.  Since
I have to keep track of the connections from one call of
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline> to the next, I must store these safely
away somewhere.  At the last minute, I copy the
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">master</fo:inline> into the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">read_fds</fo:inline>,
and then call <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline>.</fo:block>


<fo:block>But doesn't this mean that every time I get a new connection, I
have to add it to the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">master</fo:inline> set?  Yup!  And
every time a connection closes, I have to remove it from the
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">master</fo:inline> set?  Yes, it does.</fo:block>


<fo:block>Notice I check to see when the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">listener</fo:inline>
socket is ready to read.  When it is, it means I have a new connection
pending, and I <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline> it and add it to the
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">master</fo:inline> set.  Similarly, when a client connection
is ready to read, and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> returns
<fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline>, I know the client has closed the connection, and
I must remove it from the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">master</fo:inline> set.</fo:block>


<fo:block>If the client <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> returns non-zero,
though, I know some data has been received.  So I get it, and then go
through the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">master</fo:inline> list and send that data to all
the rest of the connected clients.</fo:block>


<fo:block>And that, my friends, is a less-than-simple overview of the
almighty <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline> function.</fo:block>


<fo:block>In addition, here is a bonus afterthought: there is another function
called <fo:wrapper id="indexId434909-156"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">poll()</fo:inline> which behaves much the same way
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline> does, but with a different system for managing the
file descriptor sets.  <fo:basic-link internal-destination="pollman">Check it out!</fo:basic-link></fo:block>









<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="sendall" space-before="0.5em">7.3. Handling Partial <fo:inline font-family="Liberation Mono" font-weight="bold">send()</fo:inline>s</fo:block>


<fo:block>Remember back in the <fo:basic-link internal-destination="sendrecv">section about
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline></fo:basic-link>, above, when I said that
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> might not send all the bytes you asked it
to?  That is, you want it to send 512 bytes, but it returns 412.  What
happened to the remaining 100 bytes?</fo:block>


<fo:block>Well, they're still in your little buffer waiting to be sent out.
Due to circumstances beyond your control, the kernel decided not to send
all the data out in one chunk, and now, my friend, it's up to you to get
the data out there.</fo:block>


<fo:block><fo:wrapper id="indexId434909-157"></fo:wrapper>You could write a function like this to do it,
too:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int sendall(int s, char *buf, int *len)
{
    int total = 0;        // how many bytes we've sent
    int bytesleft = *len; // how many we have left to send
    int n;

    while(total &lt; *len) {
        n = send(s, buf+total, bytesleft, 0);
        if (n == -1) { break; }
        total += n;
        bytesleft -= n;
    }

    *len = total; // return number actually sent here

    return n==-1?-1:0; // return -1 on failure, 0 on success
} 
</fo:block>

<fo:block>In this example, <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">s</fo:inline> is the socket you want
to send the data to, <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">buf</fo:inline> is the buffer containing
the data, and <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">len</fo:inline> is a pointer to an
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">int</fo:inline> containing the number of bytes in the buffer.</fo:block>


<fo:block>The function returns <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error (and
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> is still set from the call to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline>.)  Also, the number of bytes actually sent
is returned in <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">len</fo:inline>.  This will be the same number
of bytes you asked it to send, unless there was an error.
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendall()</fo:inline> will do it's best, huffing and puffing,
to send the data out, but if there's an error, it gets back to you right
away.</fo:block>


<fo:block>For completeness, here's a sample call to the function:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >char buf[10] = "Beej!";
int len;

len = strlen(buf);
if (sendall(s, buf, &amp;len) == -1) {
    perror("sendall");
    printf("We only sent %d bytes because of the error!\n", len);
} 
</fo:block>

<fo:block>What happens on the receiver's end when part of a packet arrives?
If the packets are variable length, how does the receiver know when one
packet ends and another begins?  Yes, real-world scenarios are a royal
pain in the <fo:wrapper id="indexId434909-158"></fo:wrapper>donkeys.  You probably have to <fo:wrapper id="indexId434909-159"></fo:wrapper><fo:inline font-style="italic">encapsulate</fo:inline> (remember that from the
<fo:basic-link internal-destination="lowlevel">data encapsulation section</fo:basic-link> way back there
at the beginning?)  Read on for details!</fo:block>









<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="serialization" space-before="0.5em">7.4. Serialization—How to Pack Data</fo:block>


<fo:block><fo:wrapper id="indexId434909-160"></fo:wrapper>It's easy enough to send text data across
the network, you're finding, but what happens if you want to send some
&#x201C;binary&#x201D; data like <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">int</fo:inline>s or <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">float</fo:inline>s?  It turns
out you have a few options.</fo:block>


<fo:list-block provisional-distance-between-starts="4.0em" space-before="1em" space-after="1em" start-indent="0cm">

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">1.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Convert the number into text with a function like
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sprintf()</fo:inline>, then send the text.  The receiver will parse the
text back into a number using a function like
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">strtol()</fo:inline>.</fo:block>
		</fo:list-item-body>
	</fo:list-item>


	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">2.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Just send the data raw, passing a pointer to the data to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline>.</fo:block>
		</fo:list-item-body>
	</fo:list-item>


	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">3.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Encode the number into a portable binary form.  The receiver will
decode it.</fo:block>
		</fo:list-item-body>
	</fo:list-item>

</fo:list-block>


<fo:block>Sneak preview!  Tonight only!</fo:block>


<fo:block>[<fo:inline font-style="italic">Curtain raises</fo:inline>]</fo:block>


<fo:block>Beej says, &#x201C;I prefer Method Three, above!&#x201D;</fo:block>


<fo:block>[<fo:inline font-style="italic">THE END</fo:inline>]</fo:block>


<fo:block>(Before I begin this section in earnest, I should tell you that there
are libraries out there for doing this, and rolling your own and
remaining portable and error-free is quite a challenge.  So hunt around
and do your homework before deciding to implement this stuff yourself.
I include the information here for those curious about how things like
this work.)</fo:block>


<fo:block>Actually all the methods, above, have their drawbacks and advantages,
but, like I said, in general, I prefer the third method.  First, though,
let's talk about some of the drawbacks and advantages to the other two.</fo:block>


<fo:block>The first method, encoding the numbers as text before sending, has
the advantage that you can easily print and read the data that's coming
over the wire.  Sometimes a human-readable protocol is excellent to use
in a non-bandwidth-intensive situation, such as with <fo:wrapper id="indexId434909-161"></fo:wrapper><fo:basic-link external-destination="http://en.wikipedia.org/wiki/Internet_Relay_Chat" keep-with-next="always">Internet Relay Chat (IRC)</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">27</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">27. <fo:inline font-family="Liberation Mono">http://en.wikipedia.org/wiki/Internet_Relay_Chat</fo:inline></fo:block></fo:footnote-body></fo:footnote>.
However, it has the disadvantage that it is slow to convert, and the
results almost always take up more space than the original number!</fo:block>


<fo:block>Method two: passing the raw data.  This one is quite easy (but
dangerous!): just take a pointer to the data to send, and call send with
it.</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >double d = 3490.15926535;

send(s, &amp;d, sizeof d, 0);  /* DANGER--non-portable! */</fo:block>

<fo:block>The receiver gets it like this:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >double d;

recv(s, &amp;d, sizeof d, 0);  /* DANGER--non-portable! */</fo:block>

<fo:block>Fast, simple—what's not to like?  Well, it turns out that not
all architectures represent a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">double</fo:inline> (or <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">int</fo:inline>
for that matter) with the same bit representation or even the same byte
ordering!  The code is decidedly non-portable.  (Hey—maybe you
don't need portability, in which case this is nice and fast.)</fo:block>


<fo:block>When packing integer types, we've already seen how the <fo:wrapper id="indexId434909-162"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">htons()</fo:inline>-class of functions can help keep
things portable by transforming the numbers into <fo:wrapper id="indexId434909-163"></fo:wrapper>
Network Byte Order, and how that's the Right Thing to do.
Unfortunately, there are no similar functions for <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">float</fo:inline>
types.  Is all hope lost?</fo:block>


<fo:block>Fear not!  (Were you afraid there for a second?  No?  Not even a
little bit?)  There is something we can do: we can pack (or &#x201C;marshal&#x201D;,
or &#x201C;serialize&#x201D;, or one of a thousand million other names) the data into
a known binary format that the receiver can unpack on the remote
side.</fo:block>


<fo:block>What do I mean by &#x201C;known binary format&#x201D;?  Well, we've already seen
the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">htons()</fo:inline> example, right?  It changes (or &#x201C;encodes&#x201D;, if
you want to think of it that way) a number from whatever the host format
is into Network Byte Order.  To reverse (unencode) the number, the
receiver calls <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">ntohs()</fo:inline>.</fo:block>


<fo:block>But didn't I just get finished saying there wasn't any such function
for other non-integer types?  Yes.  I did.  And since there's no
standard way in C to do this, it's a bit of a pickle (that a gratuitous
pun there for you Python fans).</fo:block>


<fo:block>The thing to do is to pack the data into a known format and send that
over the wire for decoding.  For example, to pack <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">float</fo:inline>s,
here's <fo:basic-link external-destination="http://beej.us/guide/bgnet/examples/pack.c" keep-with-next="always">something quick and dirty with
plenty of room for improvement:</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">28</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">28. <fo:inline font-family="Liberation Mono">http://beej.us/guide/bgnet/examples/pack.c</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;stdint.h&gt;

uint32_t htonf(float f)
{
    uint32_t p;
    uint32_t sign;

    if (f &lt; 0) { sign = 1; f = -f; }
    else { sign = 0; }
        
    p = ((((uint32_t)f)&amp;0x7fff)&lt;&lt;16) | (sign&lt;&lt;31); // whole part and sign
    p |= (uint32_t)(((f - (int)f) * 65536.0f))&amp;0xffff; // fraction

    return p;
}

float ntohf(uint32_t p)
{
    float f = ((p&gt;&gt;16)&amp;0x7fff); // whole part
    f += (p&amp;0xffff) / 65536.0f; // fraction

    if (((p&gt;&gt;31)&amp;0x1) == 0x1) { f = -f; } // sign bit set

    return f;
}</fo:block>

<fo:block>The above code is sort of a naive implementation that stores a
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">float</fo:inline> in a 32-bit number.  The high bit (31) is used to
store the sign of the number (&#x201C;1&#x201D; means negative), and the next seven
bits (30-16) are used to store the whole number portion of the
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">float</fo:inline>.  Finally, the remaining bits (15-0) are used to
store the fractional portion of the number.</fo:block>


<fo:block>Usage is fairly straightforward:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;stdio.h&gt;

int main(void)
{
    float f = 3.1415926, f2;
    uint32_t netf;

    netf = htonf(f);  // convert to "network" form
    f2 = ntohf(netf); // convert back to test

    printf("Original: %f\n", f);        // 3.141593
    printf(" Network: 0x%08X\n", netf); // 0x0003243F
    printf("Unpacked: %f\n", f2);       // 3.141586

    return 0;
}</fo:block>

<fo:block>On the plus side, it's small, simple, and fast.  On the minus side,
it's not an efficient use of space and the range is severely
restricted—try storing a number greater-than 32767 in there and
it won't be very happy!  You can also see in the above example that the
last couple decimal places are not correctly preserved.</fo:block>


<fo:block>What can we do instead?  Well, <fo:inline font-style="italic">The</fo:inline> Standard for storing
floating point numbers is known as <fo:wrapper id="indexId434909-164"></fo:wrapper><fo:basic-link external-destination="http://en.wikipedia.org/wiki/IEEE_754" keep-with-next="always">IEEE-754</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">29</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">29. <fo:inline font-family="Liberation Mono">http://en.wikipedia.org/wiki/IEEE_754</fo:inline></fo:block></fo:footnote-body></fo:footnote>.  Most computers use this format
internally for doing floating point math, so in those cases, strictly
speaking, conversion wouldn't need to be done.  But if you want your
source code to be portable, that's an assumption you can't necessarily
make.  (On the other hand, if you want things to be fast, you should
optimize this out on platforms that don't need to do it!  That's what
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">htons()</fo:inline> and its ilk do.)</fo:block>


<fo:block><fo:basic-link external-destination="http://beej.us/guide/bgnet/examples/ieee754.c" keep-with-next="always">Here's some code that encodes
floats and doubles into IEEE-754 format</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">30</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">30. <fo:inline font-family="Liberation Mono">http://beej.us/guide/bgnet/examples/ieee754.c</fo:inline></fo:block></fo:footnote-body></fo:footnote>.  (Mostly—it
doesn't encode NaN or Infinity, but it could be modified to do
that.)</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#define pack754_32(f) (pack754((f), 32, 8))
#define pack754_64(f) (pack754((f), 64, 11))
#define unpack754_32(i) (unpack754((i), 32, 8))
#define unpack754_64(i) (unpack754((i), 64, 11))

uint64_t pack754(long double f, unsigned bits, unsigned expbits)
{
    long double fnorm;
    int shift;
    long long sign, exp, significand;
    unsigned significandbits = bits - expbits - 1; // -1 for sign bit

    if (f == 0.0) return 0; // get this special case out of the way

    // check sign and begin normalization
    if (f &lt; 0) { sign = 1; fnorm = -f; }
    else { sign = 0; fnorm = f; }

    // get the normalized form of f and track the exponent
    shift = 0;
    while(fnorm &gt;= 2.0) { fnorm /= 2.0; shift++; }
    while(fnorm &lt; 1.0) { fnorm *= 2.0; shift--; }
    fnorm = fnorm - 1.0;

    // calculate the binary form (non-float) of the significand data
    significand = fnorm * ((1LL&lt;&lt;significandbits) + 0.5f);

    // get the biased exponent
    exp = shift + ((1&lt;&lt;(expbits-1)) - 1); // shift + bias

    // return the final answer
    return (sign&lt;&lt;(bits-1)) | (exp&lt;&lt;(bits-expbits-1)) | significand;
}

long double unpack754(uint64_t i, unsigned bits, unsigned expbits)
{
    long double result;
    long long shift;
    unsigned bias;
    unsigned significandbits = bits - expbits - 1; // -1 for sign bit

    if (i == 0) return 0.0;

    // pull the significand
    result = (i&amp;((1LL&lt;&lt;significandbits)-1)); // mask
    result /= (1LL&lt;&lt;significandbits); // convert back to float
    result += 1.0f; // add the one back on

    // deal with the exponent
    bias = (1&lt;&lt;(expbits-1)) - 1;
    shift = ((i&gt;&gt;significandbits)&amp;((1LL&lt;&lt;expbits)-1)) - bias;
    while(shift &gt; 0) { result *= 2.0; shift--; }
    while(shift &lt; 0) { result /= 2.0; shift++; }

    // sign it
    result *= (i&gt;&gt;(bits-1))&amp;1? -1.0: 1.0;

    return result;
}</fo:block>

<fo:block>I put some handy macros up there at the top for packing and unpacking
32-bit (probably a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">float</fo:inline>) and 64-bit (probably a
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">double</fo:inline>) numbers, but the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">pack754()</fo:inline> function
could be called directly and told to encode <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">bits</fo:inline>-worth of
data (<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">expbits</fo:inline> of which are reserved for the normalized
number's exponent.)</fo:block>


<fo:block>Here's sample usage:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >
#include &lt;stdio.h&gt;
#include &lt;stdint.h&gt; // defines uintN_t types
#include &lt;inttypes.h&gt; // defines PRIx macros

int main(void)
{
    float f = 3.1415926, f2;
    double d = 3.14159265358979323, d2;
    uint32_t fi;
    uint64_t di;

    fi = pack754_32(f);
    f2 = unpack754_32(fi);

    di = pack754_64(d);
    d2 = unpack754_64(di);

    printf("float before : %.7f\n", f);
    printf("float encoded: 0x%08" PRIx32 "\n", fi);
    printf("float after  : %.7f\n\n", f2);

    printf("double before : %.20lf\n", d);
    printf("double encoded: 0x%016" PRIx64 "\n", di);
    printf("double after  : %.20lf\n", d2);

    return 0;
}</fo:block>

<fo:block>The above code produces this output:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-right-style="dashed" border-bottom-style="dashed" background-color="#E0E0E0" widows="2" orphans="2" white-space="pre" font-weight="bold" font-family="Liberation Mono" font-size="0.801000em" >float before : 3.1415925
float encoded: 0x40490FDA
float after  : 3.1415925

double before : 3.14159265358979311600
double encoded: 0x400921FB54442D18
double after  : 3.14159265358979311600</fo:block>

<fo:block>Another question you might have is how do you pack
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct</fo:inline>s?  Unfortunately for you, the compiler is free to
put padding all over the place in a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct</fo:inline>, and that means
you can't portably send the whole thing over the wire in one chunk.
(Aren't you getting sick of hearing &#x201C;can't do this&#x201D;, &#x201C;can't do that&#x201D;?
Sorry!  To quote a friend, &#x201C;Whenever anything goes wrong, I always blame
Microsoft.&#x201D;  This one might not be Microsoft's fault, admittedly, but my
friend's statement is completely true.)</fo:block>


<fo:block>Back to it: the best way to send the <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct</fo:inline> over the
wire is to pack each field independently and then unpack them into the
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct</fo:inline> when they arrive on the other side.</fo:block>


<fo:block>That's a lot of work, is what you're thinking.  Yes, it is.  One
thing you can do is write a helper function to help pack the data for
you.  It'll be fun!  Really!</fo:block>


<fo:block>In the book &#x201C;<fo:basic-link external-destination="http://cm.bell-labs.com/cm/cs/tpop/" keep-with-next="always">The Practice of
Programming</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">31</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">31. <fo:inline font-family="Liberation Mono">http://cm.bell-labs.com/cm/cs/tpop/</fo:inline></fo:block></fo:footnote-body></fo:footnote>&#x201D; by Kernighan and Pike, they implement
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">printf()</fo:inline>-like functions called <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">pack()</fo:inline>  and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">unpack()</fo:inline> that do exactly this.  I'd link to them, but
apparently those functions aren't online with the rest of the
source from the book.</fo:block>


<fo:block>(The Practice of Programming is an excellent read.  Zeus saves a
kitten every time I recommend it.)</fo:block>


<fo:block>At this point, I'm going to drop a pointer to the BSD-licensed <fo:basic-link external-destination="http://tpl.sourceforge.net/" keep-with-next="always">Typed Parameter Language C API</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">32</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">32. <fo:inline font-family="Liberation Mono">http://tpl.sourceforge.net/</fo:inline></fo:block></fo:footnote-body></fo:footnote> which I've never
used, but looks completely respectable.  Python and Perl programmers
will want to check out their language's <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">pack()</fo:inline> and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">unpack()</fo:inline> functions for accomplishing the same thing.  And
Java has a big-ol' Serializable interface that can be used in a similar
way.</fo:block>


<fo:block>But if you want to write your own packing utility in C, K&amp;P's
trick is to use variable argument lists to make
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">printf()</fo:inline>-like functions to build the packets.  <fo:basic-link external-destination="http://beej.us/guide/bgnet/examples/pack2.c" keep-with-next="always">Here's a version I cooked up</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">33</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">33. <fo:inline font-family="Liberation Mono">http://beej.us/guide/bgnet/examples/pack2.c</fo:inline></fo:block></fo:footnote-body></fo:footnote> on my own
based on that which hopefully will be enough to give you an idea of how
such a thing can work.</fo:block>


<fo:block>(This code references the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">pack754()</fo:inline> functions, above.
The <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">packi*()</fo:inline> functions operate like the familiar
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">htons()</fo:inline> family, except they pack into a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">char</fo:inline>
array instead of another integer.)</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;ctype.h&gt;
#include &lt;stdarg.h&gt;
#include &lt;string.h&gt;
#include &lt;stdint.h&gt;
#include &lt;inttypes.h&gt;

// various bits for floating point types--
// varies for different architectures
typedef float float32_t;
typedef double float64_t;

/*
** packi16() -- store a 16-bit int into a char buffer (like htons())
*/ 
void packi16(unsigned char *buf, unsigned int i)
{
    *buf++ = i&gt;&gt;8; *buf++ = i;
}

/*
** packi32() -- store a 32-bit int into a char buffer (like htonl())
*/ 
void packi32(unsigned char *buf, unsigned long i)
{
    *buf++ = i&gt;&gt;24; *buf++ = i&gt;&gt;16;
    *buf++ = i&gt;&gt;8;  *buf++ = i;
}

/*
** unpacki16() -- unpack a 16-bit int from a char buffer (like ntohs())
*/ 
unsigned int unpacki16(unsigned char *buf)
{
    return (buf[0]&lt;&lt;8) | buf[1];
}

/*
** unpacki32() -- unpack a 32-bit int from a char buffer (like ntohl())
*/ 
unsigned long unpacki32(unsigned char *buf)
{
    return (buf[0]&lt;&lt;24) | (buf[1]&lt;&lt;16) | (buf[2]&lt;&lt;8) | buf[3];
}

/*
** pack() -- store data dictated by the format string in the buffer
**
**  h - 16-bit              l - 32-bit
**  c - 8-bit char          f - float, 32-bit
**  s - string (16-bit length is automatically prepended)
*/ 
int32_t pack(unsigned char *buf, char *format, ...)
{
    va_list ap;
    int16_t h;
    int32_t l;
    int8_t c;
    float32_t f;
    char *s;
    int32_t size = 0, len;

    va_start(ap, format);

    for(; *format != '\0'; format++) {
        switch(*format) {
        case 'h': // 16-bit
            size += 2;
            h = (int16_t)va_arg(ap, int); // promoted
            packi16(buf, h);
            buf += 2;
            break;

        case 'l': // 32-bit
            size += 4;
            l = va_arg(ap, int32_t);
            packi32(buf, l);
            buf += 4;
            break;

        case 'c': // 8-bit
            size += 1;
            c = (int8_t)va_arg(ap, int); // promoted
            *buf++ = (c&gt;&gt;0)&amp;0xff;
            break;

        case 'f': // float
            size += 4;
            f = (float32_t)va_arg(ap, double); // promoted
            l = pack754_32(f); // convert to IEEE 754
            packi32(buf, l);
            buf += 4;
            break;

        case 's': // string
            s = va_arg(ap, char*);
            len = strlen(s);
            size += len + 2;
            packi16(buf, len);
            buf += 2;
            memcpy(buf, s, len);
            buf += len;
            break;
        }
    }

    va_end(ap);

    return size;
}

/*
** unpack() -- unpack data dictated by the format string into the buffer
*/
void unpack(unsigned char *buf, char *format, ...)
{
    va_list ap;
    int16_t *h;
    int32_t *l;
    int32_t pf;
    int8_t *c;
    float32_t *f;
    char *s;
    int32_t len, count, maxstrlen=0;

    va_start(ap, format);

    for(; *format != '\0'; format++) {
        switch(*format) {
        case 'h': // 16-bit
            h = va_arg(ap, int16_t*);
            *h = unpacki16(buf);
            buf += 2;
            break;

        case 'l': // 32-bit
            l = va_arg(ap, int32_t*);
            *l = unpacki32(buf);
            buf += 4;
            break;

        case 'c': // 8-bit
            c = va_arg(ap, int8_t*);
            *c = *buf++;
            break;

        case 'f': // float
            f = va_arg(ap, float32_t*);
            pf = unpacki32(buf);
            buf += 4;
            *f = unpack754_32(pf);
            break;

        case 's': // string
            s = va_arg(ap, char*);
            len = unpacki16(buf);
            buf += 2;
            if (maxstrlen &gt; 0 &amp;&amp; len &gt; maxstrlen) count = maxstrlen - 1;
            else count = len;
            memcpy(s, buf, count);
            s[count] = '\0';
            buf += len;
            break;

        default:
            if (isdigit(*format)) { // track max str len
                maxstrlen = maxstrlen * 10 + (*format-'0');
            }
        }

        if (!isdigit(*format)) maxstrlen = 0;
    }

    va_end(ap);
}</fo:block>

<fo:block>And <fo:basic-link external-destination="http://beej.us/guide/bgnet/examples/pack2.c" keep-with-next="always">here is a demonstration
program</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">34</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">34. <fo:inline font-family="Liberation Mono">http://beej.us/guide/bgnet/examples/pack2.c</fo:inline></fo:block></fo:footnote-body></fo:footnote> of the above code that packs some data into
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">buf</fo:inline> and then unpacks it into variables.  Note that when
calling <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">unpack()</fo:inline> with a string argument (format specifier
&#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">s</fo:inline>&#x201D;), it's wise to put a maximum length count in front of
it to prevent a buffer overrun, e.g. &#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">96s</fo:inline>&#x201D;.  Be wary when
unpacking data you get over the network—a malicious user might
send badly-constructed packets in an effort to attack your system!</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;stdio.h&gt;

// various bits for floating point types--
// varies for different architectures
typedef float float32_t;
typedef double float64_t;

int main(void)
{
    unsigned char buf[1024];
    int8_t magic;
    int16_t monkeycount;
    int32_t altitude;
    float32_t absurdityfactor;
    char *s = "Great unmitigated Zot!  You've found the Runestaff!";
    char s2[96];
    int16_t packetsize, ps2;

    packetsize = pack(buf, "chhlsf", (int8_t)'B', (int16_t)0, (int16_t)37, 
            (int32_t)-5, s, (float32_t)-3490.6677);
    packi16(buf+1, packetsize); // store packet size in packet for kicks

    printf("packet is %" PRId32 " bytes\n", packetsize);

    unpack(buf, "chhl96sf", &amp;magic, &amp;ps2, &amp;monkeycount, &amp;altitude, s2,
        &amp;absurdityfactor);

    printf("'%c' %" PRId32" %" PRId16 " %" PRId32
            " \"%s\" %f\n", magic, ps2, monkeycount,
            altitude, s2, absurdityfactor);

    return 0;
}</fo:block>

<fo:block>Whether you roll your own code or use someone else's, it's a good
idea to have a general set of data packing routines for the sake of
keeping bugs in check, rather than packing each bit by hand each
time.</fo:block>


<fo:block>When packing the data, what's a good format to use?  Excellent
question.  Fortunately, <fo:wrapper id="indexId434909-165"></fo:wrapper><fo:basic-link external-destination="http://tools.ietf.org/html/rfc4506" keep-with-next="always">RFC 4506</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">35</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">35. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc4506</fo:inline></fo:block></fo:footnote-body></fo:footnote>, the External Data
Representation Standard, already defines binary formats for a bunch of
different types, like floating point types, integer types, arrays, raw
data, etc.  I suggest conforming to that if you're going to roll the
data yourself.  But you're not obligated to.  The Packet Police are not
right outside your door.  At least, I don't <fo:inline font-style="italic">think</fo:inline> they are.</fo:block>


<fo:block>In any case, encoding the data somehow or another before you send it
is the right way of doing things!</fo:block>









<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="sonofdataencap" space-before="0.5em">7.5. Son of Data Encapsulation</fo:block>


<fo:block>What does it really mean to encapsulate data, anyway?  In the
simplest case, it means you'll stick a header on there with either some
identifying information or a packet length, or both.</fo:block>


<fo:block>What should your header look like?  Well, it's just some binary
data that represents whatever you feel is necessary to complete your
project.</fo:block>


<fo:block>Wow.  That's vague.</fo:block>


<fo:block>Okay.  For instance, let's say you have a multi-user chat program
that uses <fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_STREAM</fo:inline>s.  When a user types (&#x201C;says&#x201D;)
something, two pieces of information need to be transmitted to the
server: what was said and who said it.</fo:block>


<fo:block>So far so good?  &#x201C;What's the problem?&#x201D; you're asking.</fo:block>


<fo:block>The problem is that the messages can be of varying lengths.  One
person named &#x201C;tom&#x201D; might say, &#x201C;Hi&#x201D;, and another person named
&#x201C;Benjamin&#x201D; might say, &#x201C;Hey guys what is up?&#x201D;</fo:block>


<fo:block>So you <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> all this stuff to the clients
as it comes in.  Your outgoing data stream looks like this:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-right-style="dashed" border-bottom-style="dashed" background-color="#E0E0E0" widows="2" orphans="2" white-space="pre" font-weight="bold" font-family="Liberation Mono" font-size="0.801000em" >t o m H i B e n j a m i n H e y g u y s w h a t i s u p ?</fo:block>

<fo:block>And so on.  How does the client know when one message starts and
another stops?  You could, if you wanted, make all messages the same
length and just call the <fo:wrapper id="indexId434909-166"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendall()</fo:inline> we
implemented, <fo:basic-link internal-destination="sendall">above</fo:basic-link>.  But that wastes
bandwidth!  We don't want to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> 1024 bytes just so
&#x201C;tom&#x201D; can say &#x201C;Hi&#x201D;.</fo:block>


<fo:block>So we <fo:inline font-style="italic">encapsulate</fo:inline> the data in a tiny header
and packet structure.  Both the client and server know how to pack and
unpack (sometimes referred to as &#x201C;marshal&#x201D; and &#x201C;unmarshal&#x201D;) this data.
Don't look now, but we're starting to define a
<fo:inline font-style="italic">protocol</fo:inline> that describes how a client and server
communicate!</fo:block>


<fo:block>In this case, let's assume the user name is a fixed length of 8
characters, padded with <fo:inline font-family="Liberation Mono" font-size="0.900000em">'\0'</fo:inline>.  And then let's
assume the data is variable length, up to a maximum of 128
characters.  Let's have a look a sample packet structure that we might
use in this situation:</fo:block>


<fo:list-block provisional-distance-between-starts="4.0em" space-before="1em" space-after="1em" start-indent="0cm">


	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">1.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">len</fo:inline> (1 byte, unsigned)—The total length of the
packet, counting the 8-byte user name and chat data.</fo:block>
		</fo:list-item-body>
	</fo:list-item>


	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">2.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">name</fo:inline> (8 bytes)—The user's name, NUL-padded if
necessary.</fo:block>
		</fo:list-item-body>
	</fo:list-item>


	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">3.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">chatdata</fo:inline>
(<fo:inline font-style="italic">n</fo:inline>-bytes)—The data itself, no more than 128 bytes.
The length of the packet should be calculated as the length of this data
plus 8 (the length of the name field, above).</fo:block>
		</fo:list-item-body>
	</fo:list-item>


</fo:list-block>


<fo:block>Why did I choose the 8-byte and 128-byte limits for the fields?  I
pulled them out of the air, assuming they'd be long enough.  Maybe,
though, 8 bytes is too restrictive for your needs, and you can have a
30-byte name field, or whatever.  The choice is up to you.</fo:block>


<fo:block>Using the above packet definition, the first packet would consist
of the following information (in hex and ASCII):</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-right-style="dashed" border-bottom-style="dashed" background-color="#E0E0E0" widows="2" orphans="2" white-space="pre" font-weight="bold" font-family="Liberation Mono" font-size="0.801000em" >   0A     74 6F 6D 00 00 00 00 00      48 69
(length)  T  o  m    (padding)         H  i
</fo:block>

<fo:block>And the second is similar:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-right-style="dashed" border-bottom-style="dashed" background-color="#E0E0E0" widows="2" orphans="2" white-space="pre" font-weight="bold" font-family="Liberation Mono" font-size="0.801000em" >   18     42 65 6E 6A 61 6D 69 6E      48 65 79 20 67 75 79 73 20 77 ...
(length)  B  e  n  j  a  m  i  n       H  e  y     g  u  y  s     w  ...
</fo:block>

<fo:block>(The length is stored in Network Byte Order, of course.  In this
case, it's only one byte so it doesn't matter, but generally speaking
you'll want all your binary integers to be stored in Network Byte Order
in your packets.)</fo:block>


<fo:block>When you're sending this data, you should be safe and use a
command similar to <fo:basic-link internal-destination="sendall"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendall()</fo:inline></fo:basic-link>, above, so you
know all the data is sent, even if it takes multiple calls to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> to get it all out.</fo:block>


<fo:block>Likewise, when you're receiving this data, you need to do a bit of extra
work.  To be safe, you should assume that you might receive a partial
packet (like maybe we receive &#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">18 42 65
6E 6A</fo:inline>&#x201D; from Benjamin, above, but that's all we get in this
call to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>).  We need to call
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> over and over again until the packet is
completely received.</fo:block>


<fo:block>But how?  Well, we know the number of bytes we need to receive in
total for the packet to be complete, since that number is tacked on the
front of the packet.  We also know the maximum packet size is 1+8+128,
or 137 bytes (because that's how we defined the packet.)</fo:block>


<fo:block>There are actually a couple things you can do here.  Since you know
every packet starts off with a length, you can call <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>
just to get the packet length.  Then once you have that, you can call it
again specifying exactly the remaining length of the packet (possibly
repeatedly to get all the data) until you have the complete packet.
The advantage of this method is that you only need a buffer large
enough for one packet, while the disadvantage is that you need to call
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> at least twice to get all the data.</fo:block>


<fo:block>Another option is just to call <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> and say the amount
you're willing to receive is the maximum number of bytes in a packet.
Then whatever you get, stick it onto the back of a buffer, and finally
check to see if the packet is complete.  Of course, you might get some
of the next packet, so you'll need to have room for that.</fo:block>


<fo:block>What you can do is declare an array big enough for two packets.
This is your work array where you will reconstruct packets as they
arrive.</fo:block>


<fo:block>Every time you <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> data, you'll append it
into the work buffer and check to see if the packet is complete.  That
is, the number of bytes in the buffer is greater than or equal to the
length specified in the header (+1, because the length in the header
doesn't include the byte for the length itself.)  If the number of bytes
in the buffer is less than 1, the packet is not complete, obviously.
You have to make a special case for this, though, since the first byte
is garbage and you can't rely on it for the correct packet
length.</fo:block>


<fo:block>Once the packet is complete, you can do with it what you
will.  Use it, and remove it from your work buffer.</fo:block>


<fo:block>Whew!  Are you juggling that in your head yet?  Well, here's the
second of the one-two punch: you might have read past the end of one
packet and onto the next in a single <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> call.
That is, you have a work buffer with one complete packet, and an
incomplete part of the next packet!  Bloody heck.  (But this is why you
made your work buffer large enough to hold <fo:inline font-style="italic">two</fo:inline>
packets—in case this happened!)</fo:block>


<fo:block>Since you know the length of the first packet from the header, and
you've been keeping track of the number of bytes in the work buffer, you
can subtract and calculate how many of the bytes in the work buffer
belong to the second (incomplete) packet.  When you've handled the first
one, you can clear it out of the work buffer and move the partial second
packet down the to front of the buffer so it's all ready to go for the
next <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>.</fo:block>


<fo:block>(Some of you readers will note that actually moving the partial
second packet to the beginning of the work buffer takes time, and the
program can be coded to not require this by using a circular buffer.
Unfortunately for the rest of you, a discussion on circular buffers is
beyond the scope of this article.  If you're still curious, grab a data
structures book and go from there.)</fo:block>


<fo:block>I never said it was easy.  Ok, I did say it was easy.  And it is;
you just need practice and pretty soon it'll come to you naturally.  By
<fo:wrapper id="indexId434909-167"></fo:wrapper>Excalibur I swear it!</fo:block>


 





<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="broadcast" space-before="0.5em">7.6. Broadcast Packets—Hello, World!</fo:block>


<fo:block>So far, this guide has talked about sending data from one host to one
other host.  But it is possible, I insist, that you can, with the proper
authority, send data to multiple hosts <fo:inline font-style="italic">at the same time</fo:inline>!</fo:block>


<fo:block>With <fo:wrapper id="indexId434909-168"></fo:wrapper>UDP (only UDP, not TCP) and standard IPv4, this
is done through a mechanism called <fo:wrapper id="indexId434909-169"></fo:wrapper><fo:inline font-style="italic">broadcasting</fo:inline>.  With IPv6, broadcasting isn't
supported, and you have to resort to the often superior technique of
<fo:inline font-style="italic">multicasting</fo:inline>, which, sadly I won't be discussing at this
time.   But enough of the starry-eyed future—we're stuck in the
32-bit present.</fo:block>


<fo:block>But wait!  You can't just run off and start broadcasting willy-nilly;
You have to <fo:wrapper id="indexId434909-170"></fo:wrapper>set the socket option <fo:wrapper id="indexId434909-171"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SO_BROADCAST</fo:inline> before you can send a
broadcast packet out on the network.  It's like a one of those little
plastic covers they put over the missile launch switch!  That's just how
much power you hold in your hands!</fo:block>


<fo:block>But seriously, though, there is a danger to using broadcast packets,
and that is: every system that receives a broadcast packet must undo all
the onion-skin layers of data encapsulation until it finds out what port
the data is destined to.  And then it hands the data over or discards
it.  In either case, it's a lot of work for each machine that receives
the broadcast packet, and since it is all of them on the local network,
that could be a lot of machines doing a lot of unnecessary work.  When
the game Doom first came out, this was a complaint about its network
code.</fo:block>


<fo:block>Now, there is more than one way to skin a cat... wait a minute.  Is
there really more than one way to skin a cat?  What kind of expression
is that?  Uh, and likewise, there is more than one way to send a
broadcast packet.  So, to get to the meat and potatoes of the whole
thing: how do you specify the destination address for a broadcast
message?  There are two common ways:</fo:block>


<fo:list-block provisional-distance-between-starts="4.0em" space-before="1em" space-after="1em" start-indent="0cm">

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">1.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Send the data to a specific subnet's broadcast address.  This is the
subnet's network number with all one-bits set for the host portion of
the address.  For instance, at home my network is 192.168.1.0, my
netmask is 255.255.255.0, so the last byte of the address is my host
number (because the first three bytes, according to the netmask, are the
network number).  So my broadcast address is 192.168.1.255.  Under Unix,
the <fo:inline font-weight="bold">ifconfig</fo:inline> command will actually give you all this data.
(If you're curious, the bitwise logic to get your broadcast address is
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">network_number</fo:inline> OR (NOT <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">netmask</fo:inline>).)  You can send
this type of broadcast packet to remote networks as well as your local
network, but you run the risk of the packet being dropped by the
destination's router.  (If they didn't drop it, then some random smurf
could start flooding their LAN with broadcast traffic.)</fo:block>
		</fo:list-item-body>
	</fo:list-item>


	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">2.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">Send the data to the &#x201C;global&#x201D; broadcast address.  This is <fo:wrapper id="indexId434909-172"></fo:wrapper>255.255.255.255, aka
<fo:wrapper id="indexId434909-173"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">INADDR_BROADCAST</fo:inline>.  Many
machines will automatically bitwise AND this with your network number to
convert it to a network broadcast address, but some won't.  It varies.
Routers do not forward this type of broadcast packet off your local
network, ironically enough.</fo:block>
		</fo:list-item-body>
	</fo:list-item>


</fo:list-block>


<fo:block>So what happens if you try to send data on the broadcast address
without first setting the <fo:inline font-family="Liberation Mono" font-size="0.900000em">SO_BROADCAST</fo:inline> socket option?
Well, let's fire up good old <fo:basic-link internal-destination="datagram"><fo:inline font-weight="bold">talker</fo:inline> and
<fo:inline font-weight="bold">listener</fo:inline></fo:basic-link> and see what happens.</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-right-style="dashed" border-bottom-style="dashed" background-color="#E0E0E0" widows="2" orphans="2" white-space="pre" font-weight="bold" font-family="Liberation Mono" font-size="0.801000em" >$ talker 192.168.1.2 foo
sent 3 bytes to 192.168.1.2
$ talker 192.168.1.255 foo
sendto: Permission denied
$ talker 255.255.255.255 foo
sendto: Permission denied
</fo:block>

<fo:block>Yes, it's not happy at all...because we didn't set the
<fo:inline font-family="Liberation Mono" font-size="0.900000em">SO_BROADCAST</fo:inline> socket option.  Do that, and now you can
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendto()</fo:inline> anywhere you want!</fo:block>


<fo:block>In fact, that's the <fo:inline font-style="italic">only difference</fo:inline> between a UDP
application that can broadcast and one that can't.  So let's take the
old <fo:inline font-weight="bold">talker</fo:inline> application and add one section that sets the
<fo:inline font-family="Liberation Mono" font-size="0.900000em">SO_BROADCAST</fo:inline> socket option.  We'll call this program
<fo:basic-link external-destination="http://beej.us/guide/bgnet/examples/broadcaster.c" keep-with-next="always">
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">broadcaster.c</fo:inline></fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">36</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">36. <fo:inline font-family="Liberation Mono">http://beej.us/guide/bgnet/examples/broadcaster.c</fo:inline></fo:block></fo:footnote-body></fo:footnote>:</fo:block>



<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >/*
** broadcaster.c -- a datagram "client" like talker.c, except
**                  this one can broadcast
*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;errno.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;netdb.h&gt;

#define SERVERPORT 4950 // the port users will be connecting to

int main(int argc, char *argv[])
{
    int sockfd;
    struct sockaddr_in their_addr; // connector's address information
    struct hostent *he;
    int numbytes;
    int broadcast = 1;
    //char broadcast = '1'; // if that doesn't work, try this

    if (argc != 3) {
        fprintf(stderr,"usage: broadcaster hostname message\n");
        exit(1);
    }

    if ((he=gethostbyname(argv[1])) == NULL) {  // get the host info
        perror("gethostbyname");
        exit(1);
    }

    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
        perror("socket");
        exit(1);
    }

    // this call is what allows broadcast packets to be sent:
    if (setsockopt(sockfd, SOL_SOCKET, SO_BROADCAST, &amp;broadcast,
        sizeof broadcast) == -1) {
        perror("setsockopt (SO_BROADCAST)");
        exit(1);
    }

    their_addr.sin_family = AF_INET;     // host byte order
    their_addr.sin_port = htons(SERVERPORT); // short, network byte order
    their_addr.sin_addr = *((struct in_addr *)he-&gt;h_addr);
    memset(their_addr.sin_zero, '\0', sizeof their_addr.sin_zero);

    if ((numbytes=sendto(sockfd, argv[2], strlen(argv[2]), 0,
             (struct sockaddr *)&amp;their_addr, sizeof their_addr)) == -1) {
        perror("sendto");
        exit(1);
    }

    printf("sent %d bytes to %s\n", numbytes,
        inet_ntoa(their_addr.sin_addr));

    close(sockfd);

    return 0;
}</fo:block>


<fo:block>What's different between this and a &#x201C;normal&#x201D; UDP client/server
situation?  Nothing!  (With the exception of the client being allowed to
send broadcast packets in this case.)  As such, go ahead and run the old
UDP <fo:basic-link internal-destination="datagram"><fo:inline font-weight="bold">listener</fo:inline></fo:basic-link> program in one
window, and <fo:inline font-weight="bold">broadcaster</fo:inline> in another.  You should be now be
able to do all those sends that failed, above.</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-right-style="dashed" border-bottom-style="dashed" background-color="#E0E0E0" widows="2" orphans="2" white-space="pre" font-weight="bold" font-family="Liberation Mono" font-size="0.801000em" >$ broadcaster 192.168.1.2 foo
sent 3 bytes to 192.168.1.2
$ broadcaster 192.168.1.255 foo
sent 3 bytes to 192.168.1.255
$ broadcaster 255.255.255.255 foo
sent 3 bytes to 255.255.255.255
</fo:block>

<fo:block>And you should see <fo:inline font-weight="bold">listener</fo:inline> responding that it got the
packets.  (If <fo:inline font-weight="bold">listener</fo:inline> doesn't respond, it could be because
it's bound to an IPv6 address.  Try changing the
<fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_UNSPEC</fo:inline> in <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">listener.c</fo:inline> to
<fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET</fo:inline> to force IPv4.)</fo:block>


<fo:block>Well, that's kind of exciting.  But now fire up <fo:inline font-weight="bold">listener</fo:inline> on
another machine next to you on the same network so that you have two
copies going, one on each machine, and run <fo:inline font-weight="bold">broadcaster</fo:inline> again
with your broadcast address... Hey!  Both <fo:inline font-weight="bold">listener</fo:inline>s get the
packet even though you only called <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendto()</fo:inline> once!
Cool!</fo:block>


<fo:block>If the <fo:inline font-weight="bold">listener</fo:inline> gets data you send directly to it, but not
data on the broadcast address, it could be that you have a <fo:wrapper id="indexId434909-174"></fo:wrapper>firewall on your local machine that is blocking the
packets.  (Yes, <fo:wrapper id="indexId434909-175"></fo:wrapper>Pat and <fo:wrapper id="indexId434909-176"></fo:wrapper>Bapper, thank
you for realizing before I did that this is why my sample code wasn't
working.  I told you I'd mention you in the guide, and here you are.  So
<fo:inline font-style="italic">nyah</fo:inline>.)</fo:block>


<fo:block>Again, be careful with broadcast packets.  Since every machine on the
LAN will be forced to deal with the packet whether it
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline>s it or not, it can present quite a load to the
entire computing network.  They are definitely to be used sparingly and
appropriately.</fo:block>


 

</fo:flow>
</fo:page-sequence>
 





<fo:page-sequence master-reference="chapter">
<fo:static-content flow-name="bg-normal-first-footer">
<fo:block text-align="center" font-family="Liberation Sans" font-weight="bold" font-size="11pt" padding-top="1em"><fo:page-number/></fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="50%" />
	<fo:table-column column-number="2" column-width="50%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt" font-style="italic">Beej's Guide to Network Programming</fo:block>
			</fo:table-cell>
			<fo:table-cell column-number="2" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="11pt" font-weight="bold"><fo:page-number/></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-even-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline>&#8195;&#8195;<fo:inline font-style="italic">Beej's Guide to Network Programming</fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-odd-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-style="italic">Common Questions</fo:inline>&#8195;&#8195;<fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="xsl-footnote-separator">
	<fo:block>
		<fo:leader leader-pattern="rule" leader-length="40%"/>
	</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body" id="faq" font-family="Liberation Serif" font-size="11pt" text-indent="2.000000em">

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="faq">8. Common Questions</fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>







<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always">Where can I get those header files?</fo:block>

<fo:block space-after="1em"><fo:block><fo:wrapper id="indexId434909-177"></fo:wrapper>If you don't have them on your system
already, you probably don't need them.  Check the manual for your
particular platform.  If you're building for <fo:wrapper id="indexId434909-178"></fo:wrapper>Windows,
you only need to <fo:inline font-family="Liberation Mono" font-size="0.900000em">#include &lt;winsock.h&gt;</fo:inline>.</fo:block>
</fo:block>






<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always">What do I do when <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline> reports
<fo:wrapper id="indexId434909-179"></fo:wrapper>&#x201C;Address already in use&#x201D;?</fo:block>

<fo:block space-after="1em"><fo:block>You have to use <fo:wrapper id="indexId434909-180"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">setsockopt()</fo:inline>
with the <fo:wrapper id="indexId434909-181"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SO_REUSEADDR</fo:inline> option on
the listening socket.  Check out the <fo:basic-link internal-destination="bind">section on <fo:wrapper id="indexId434909-182"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline></fo:basic-link> and the <fo:basic-link internal-destination="select">section on <fo:wrapper id="indexId434909-183"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline></fo:basic-link> for an example.</fo:block>
</fo:block>






<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always">How do I get a list of open sockets on the
system?</fo:block>

<fo:block space-after="1em"><fo:block>Use the <fo:wrapper id="indexId434909-184"></fo:wrapper><fo:inline font-weight="bold">netstat</fo:inline>.  Check the
<fo:inline font-weight="bold">man</fo:inline> page for full details, but you should get some good
output just typing:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-right-style="dashed" border-bottom-style="dashed" background-color="#E0E0E0" widows="2" orphans="2" white-space="pre" font-weight="bold" font-family="Liberation Mono" font-size="0.801000em" >$ netstat</fo:block>

<fo:block>The only trick is determining which socket is associated with
which program. <fo:inline font-family="Liberation Mono" font-size="0.8em">:-)</fo:inline></fo:block>
</fo:block>






<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always">How can I view the routing table?</fo:block>

<fo:block space-after="1em"><fo:block>Run the <fo:wrapper id="indexId434909-185"></fo:wrapper><fo:inline font-weight="bold">route</fo:inline> command (in
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">/sbin</fo:inline> on most Linuxes) or the command
<fo:wrapper id="indexId434909-186"></fo:wrapper><fo:inline font-weight="bold">netstat -r</fo:inline>.</fo:block>
</fo:block>






<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always">How can I run the client and server programs if I only
have one computer?  Don't I need a network to write network
programs?</fo:block>

<fo:block space-after="1em"><fo:block>Fortunately for you, virtually all machines implement a <fo:wrapper id="indexId434909-187"></fo:wrapper>loopback network &#x201C;device&#x201D; that sits in the kernel
and pretends to be a network card.  (This is the interface listed as
&#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">lo</fo:inline>&#x201D; in the routing table.)</fo:block>


<fo:block>Pretend you're logged into a machine named
<fo:wrapper id="indexId434909-188"></fo:wrapper>&#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">goat</fo:inline>&#x201D;.  Run the client in one window
and the server in another.  Or start the server in the background
(&#x201C;<fo:inline font-weight="bold">server &amp;</fo:inline>&#x201D;) and run the client in the same
window.  The upshot of the loopback device is that you can either
<fo:inline font-weight="bold">client goat</fo:inline> or <fo:wrapper id="indexId434909-189"></fo:wrapper><fo:inline font-weight="bold">client localhost</fo:inline>
(since &#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">localhost</fo:inline>&#x201D; is likely defined in
your <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">/etc/hosts</fo:inline> file) and you'll have the client
talking to the server without a network!</fo:block>


<fo:block>In short, no changes are necessary to any of the code to make it
run on a single non-networked machine!  Huzzah!</fo:block>
</fo:block>






<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always">How can I tell if the remote side has closed
connection?</fo:block>

<fo:block space-after="1em"><fo:block>You can tell because <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> will
return <fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline>.</fo:block>
</fo:block>






<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always">How do I implement a <fo:wrapper id="indexId434909-190"></fo:wrapper>&#x201C;ping&#x201D; utility?  What is <fo:wrapper id="indexId434909-191"></fo:wrapper>ICMP?  Where can I find out more about <fo:wrapper id="indexId434909-192"></fo:wrapper>raw sockets and <fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_RAW</fo:inline>?</fo:block>

<fo:block space-after="1em"><fo:block>All your raw sockets questions will be answered in <fo:basic-link internal-destination="books">W. Richard Stevens' UNIX Network Programming books</fo:basic-link>.
Also, look in the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">ping/</fo:inline> subdirectory in Stevens' UNIX
Network Programming source code, <fo:basic-link external-destination="http://www.unpbook.com/src.html" keep-with-next="always">available
online</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">37</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">37. <fo:inline font-family="Liberation Mono">http://www.unpbook.com/src.html</fo:inline></fo:block></fo:footnote-body></fo:footnote>.</fo:block>
</fo:block>






<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always">How do I change or shorten the timeout on a call to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline>?</fo:block>

<fo:block space-after="1em"><fo:block>Instead of giving you exactly the same answer that W. Richard
Stevens would give you, I'll just refer you to <fo:basic-link external-destination="http://www.unpbook.com/src.html" keep-with-next="always"><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">lib/connect_nonb.c</fo:inline> in the UNIX Network
Programming source code</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">38</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">38. <fo:inline font-family="Liberation Mono">http://www.unpbook.com/src.html</fo:inline></fo:block></fo:footnote-body></fo:footnote>.</fo:block>


<fo:block>The gist of it is that you make a socket descriptor with
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline>, <fo:basic-link internal-destination="blocking">set it to
non-blocking</fo:basic-link>, call <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline>, and if all goes well
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline> will return <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> immediately and
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> will be set to <fo:inline font-family="Liberation Mono" font-size="0.900000em">EINPROGRESS</fo:inline>.  Then you
call <fo:basic-link internal-destination="select"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline></fo:basic-link> with whatever
timeout you want, passing the socket descriptor in both the read and
write sets.  If it doesn't timeout, it means the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline>
call completed.  At this point, you'll have to use
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getsockopt()</fo:inline> with the <fo:inline font-family="Liberation Mono" font-size="0.900000em">SO_ERROR</fo:inline> option to get
the return value from the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline> call, which should be
zero if there was no error.</fo:block>


<fo:block>Finally, you'll probably want to set the socket back to be blocking
again before you start transferring data over it.</fo:block>


<fo:block>Notice that this has the added benefit of allowing your program to do
something else while it's connecting, too.  You could, for example, set
the timeout to something low, like 500 ms, and update an indicator
onscreen each timeout, then call <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline> again.  When
you've called <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline> and timed-out, say, 20 times, you'll
know it's time to give up on the connection.</fo:block>


<fo:block>Like I said, check out Stevens' source for a perfectly excellent
example.</fo:block>
</fo:block>






<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always">How do I build for Windows?</fo:block>

<fo:block space-after="1em"><fo:block>First, delete Windows and install Linux or BSD.
<fo:inline font-family="Liberation Mono" font-size="0.8em">};-)</fo:inline>.  No, actually, just see the <fo:basic-link internal-destination="windows">section on building for
Windows</fo:basic-link> in the introduction.</fo:block>
</fo:block>






<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always">How do I build for Solaris/SunOS?  I keep getting linker
errors when I try to compile!</fo:block>

<fo:block space-after="1em"><fo:block>The linker errors happen because Sun boxes don't
automatically compile in the socket libraries.  See the <fo:basic-link internal-destination="solaris">section on building for Solaris/SunOS</fo:basic-link> in the
introduction for an example of how to do this.</fo:block>
</fo:block>






<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always">Why does <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline> keep falling out
on a signal?</fo:block>

<fo:block space-after="1em"><fo:block>Signals tend to cause blocked system calls to return
<fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> with <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> set to <fo:inline font-family="Liberation Mono" font-size="0.900000em">EINTR</fo:inline>.
When you set up a signal handler with <fo:wrapper id="indexId434909-193"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sigaction()</fo:inline>, you can set the flag <fo:wrapper id="indexId434909-194"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SA_RESTART</fo:inline>, which is supposed to
restart the system call after it was interrupted.</fo:block>


<fo:block>Naturally, this doesn't always work.</fo:block>


<fo:block>My favorite solution to this involves a
<fo:wrapper id="indexId434909-195"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">goto</fo:inline> statement.  You know this
irritates your professors to no end, so go for it!</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >select_restart:
if ((err = select(fdmax+1, &amp;readfds, NULL, NULL, NULL)) == -1) {
    if (errno == EINTR) {
        // some signal just interrupted us, so restart
        goto select_restart;
    }
    // handle the real error here:
    perror("select");
} 
</fo:block>

<fo:block>Sure, you don't <fo:inline font-style="italic">need</fo:inline> to use
<fo:inline font-family="Liberation Mono" font-size="0.900000em">goto</fo:inline> in this case; you can use other
structures to control it.  But I think the
<fo:inline font-family="Liberation Mono" font-size="0.900000em">goto</fo:inline> statement is actually
cleaner.</fo:block>
</fo:block>






<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always">How can I implement a <fo:wrapper id="indexId434909-196"></fo:wrapper>timeout on a call to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>?</fo:block>

<fo:block space-after="1em"><fo:block>Use <fo:wrapper id="indexId434909-197"></fo:wrapper><fo:basic-link internal-destination="select"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline></fo:basic-link>!  It allows you to specify a
timeout parameter for socket descriptors that you're looking to read
from.  Or, you could wrap the entire functionality in a single function,
like this:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;unistd.h&gt;
#include &lt;sys/time.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int recvtimeout(int s, char *buf, int len, int timeout)
{
    fd_set fds;
    int n;
    struct timeval tv;

    // set up the file descriptor set
    FD_ZERO(&amp;fds);
    FD_SET(s, &amp;fds);

    // set up the struct timeval for the timeout
    tv.tv_sec = timeout;
    tv.tv_usec = 0;

    // wait until timeout or data received
    n = select(s+1, &amp;fds, NULL, NULL, &amp;tv);
    if (n == 0) return -2; // timeout!
    if (n == -1) return -1; // error

    // data must be here, so do a normal recv()
    return recv(s, buf, len, 0);
}
.
.
.
// Sample call to recvtimeout():
n = recvtimeout(s, buf, sizeof buf, 10); // 10 second timeout

if (n == -1) {
    // error occurred
    perror("recvtimeout");
}
else if (n == -2) {
    // timeout occurred
} else {
    // got some data in buf
}
.
.
. 
</fo:block>

<fo:block>Notice that <fo:wrapper id="indexId434909-198"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvtimeout()</fo:inline>
returns <fo:inline font-family="Liberation Mono" font-size="0.900000em">-2</fo:inline> in case of a timeout.  Why not return
<fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline>?  Well, if you recall, a return value of
<fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline> on a call to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> means that the remote
side closed the connection.  So that return value is already spoken for,
and <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> means &#x201C;error&#x201D;, so I chose <fo:inline font-family="Liberation Mono" font-size="0.900000em">-2</fo:inline> as my
timeout indicator.</fo:block>


</fo:block>










<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always">How do I <fo:wrapper id="indexId434909-199"></fo:wrapper>encrypt or compress the data before
sending it through the socket?</fo:block>

<fo:block space-after="1em">

<fo:block>One easy way to do encryption is to use <fo:wrapper id="indexId434909-200"></fo:wrapper>SSL (secure
sockets layer), but that's beyond the scope of this guide.  (<fo:wrapper id="indexId434909-201"></fo:wrapper>Check out the <fo:basic-link external-destination="http://www.openssl.org/" keep-with-next="always">OpenSSL
project</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">39</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">39. <fo:inline font-family="Liberation Mono">http://www.openssl.org/</fo:inline></fo:block></fo:footnote-body></fo:footnote> for more info.)</fo:block>


<fo:block>But assuming you want to plug in or implement your own <fo:wrapper id="indexId434909-202"></fo:wrapper>compressor
or encryption system, it's just a matter of thinking of your data as
running through a sequence of steps between both ends.  Each step
changes the data in some way.</fo:block>


<fo:list-block provisional-distance-between-starts="4.0em" space-before="1em" space-after="1em" start-indent="0cm">

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">1.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">server reads data from file (or wherever)</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">2.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">server encrypts/compresses data  (you add this part)</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">3.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">server <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline>s encrypted data</fo:block>
		</fo:list-item-body>
	</fo:list-item>

</fo:list-block>


<fo:block>Now the other way around:</fo:block>


<fo:list-block provisional-distance-between-starts="4.0em" space-before="1em" space-after="1em" start-indent="0cm">

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">1.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">client <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>s encrypted data</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">2.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">client decrypts/decompresses data  (you add this part)</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">3.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">client writes data to file (or wherever)</fo:block>
		</fo:list-item-body>
	</fo:list-item>

</fo:list-block>


<fo:block>If you're going to compress and encrypt, just remember to compress
first.  <fo:inline font-family="Liberation Mono" font-size="0.8em">:-)</fo:inline></fo:block>


<fo:block>Just as long as the client properly undoes what the server does,
the data will be fine in the end no matter how many intermediate steps
you add.</fo:block>


<fo:block>So all you need to do to use my code is to find the place between
where the data is read and the data is sent (using
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline>) over the network, and stick some code in
there that does the encryption.</fo:block>


</fo:block>







<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always"><fo:wrapper id="indexId434909-203"></fo:wrapper><fo:wrapper id="indexId434909-204"></fo:wrapper>What is this
&#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">PF_INET</fo:inline>&#x201D; I keep seeing?  Is it related to
<fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET</fo:inline>?</fo:block>

<fo:block space-after="1em">
<fo:block>Yes, yes it is.  See <fo:basic-link internal-destination="socket">the section on
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline></fo:basic-link> for details.</fo:block>


</fo:block>







<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always">How can I write a server that accepts shell commands
from a client and executes them?</fo:block>

<fo:block space-after="1em">

<fo:block>For simplicity, lets say the client
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline>s, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline>s, and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">close()</fo:inline>s the connection (that is, there are no
subsequent system calls without the client connecting again.)</fo:block>


<fo:block>The process the client follows is this:</fo:block>


<fo:list-block provisional-distance-between-starts="4.0em" space-before="1em" space-after="1em" start-indent="0cm">

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">1.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline> to server</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">2.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send(&#x201C;/sbin/ls &gt; /tmp/client.out&#x201D;)</fo:inline></fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">3.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">close()</fo:inline> the connection</fo:block>
		</fo:list-item-body>
	</fo:list-item>

</fo:list-block>


<fo:block>Meanwhile, the server is handling the data and executing
it:</fo:block>


<fo:list-block provisional-distance-between-starts="4.0em" space-before="1em" space-after="1em" start-indent="0cm">

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">1.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline> the connection from the client</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">2.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv(str)</fo:inline> the command string</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">3.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">close()</fo:inline> the connection</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">4.</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">system(str)</fo:inline> to run the command</fo:block>
		</fo:list-item-body>
	</fo:list-item>

</fo:list-block>


<fo:block><fo:wrapper id="indexId434909-205"></fo:wrapper><fo:inline font-style="italic">Beware!</fo:inline>  Having the server execute
what the client says is like giving remote shell access and people can
do things to your account when they connect to the server.  For
instance, in the above example, what if the client sends &#x201C;<fo:inline font-weight="bold">rm -rf
~</fo:inline>&#x201D;?  It deletes everything in your account, that's what!</fo:block>


<fo:block>So you get wise, and you prevent the client from using any except
for a couple utilities that you know are safe, like the
<fo:inline font-weight="bold">foobar</fo:inline> utility:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >if (!strncmp(str, "foobar", 6)) {
    sprintf(sysstr, "%s &gt; /tmp/server.out", str);
    system(sysstr);
} 
</fo:block>

<fo:block>But you're still unsafe, unfortunately: what if the client enters
&#x201C;<fo:inline font-weight="bold">foobar; rm -rf ~</fo:inline>&#x201D;?  The safest thing to do is to
write a little routine that puts an escape (&#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">\</fo:inline>&#x201D;)
character in front of all non-alphanumeric characters (including spaces,
if appropriate) in the arguments for the command.</fo:block>


<fo:block>As you can see, security is a pretty big issue when the server
starts executing things the client sends.</fo:block>


</fo:block>







<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always">I'm sending a slew of data, but when I
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>, it only receives 536 bytes or 1460 bytes at
a time.  But if I run it on my local machine, it receives all the data
at the same time.  What's going on?</fo:block>

<fo:block space-after="1em">

<fo:block>You're hitting the <fo:wrapper id="indexId434909-206"></fo:wrapper>MTU—the maximum size the
physical medium can handle.  On the local machine, you're using the
loopback device which can handle 8K or more no problem.  But on
Ethernet, which can only handle 1500 bytes with a header, you hit that
limit.  Over a modem, with 576 MTU (again, with header), you hit the
even lower limit.</fo:block>


<fo:block>You have to make sure all the data is being sent, first of all.
(See the <fo:basic-link internal-destination="sendall"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendall()</fo:inline></fo:basic-link>
function implementation for details.) Once you're sure of that, then you
need to call <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> in a loop until all your data
is read.</fo:block>


<fo:block>Read the section <fo:basic-link internal-destination="sonofdataencap">Son of Data
Encapsulation</fo:basic-link> for details on receiving complete packets of data
using multiple calls to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>.</fo:block>


</fo:block>







<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always">I'm on a Windows box and I don't have the
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">fork()</fo:inline> system call or any kind of <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sigaction</fo:inline>.  What to do?</fo:block>

<fo:block space-after="1em">
<fo:block><fo:wrapper id="indexId434909-207"></fo:wrapper>If they're anywhere, they'll be in POSIX libraries
that may have shipped with your compiler.  Since I don't have a Windows
box, I really can't tell you the answer, but I seem to remember that
Microsoft has a POSIX compatibility layer and that's where
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">fork()</fo:inline> would be.  (And maybe even
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">sigaction</fo:inline>.)</fo:block>


<fo:block>Search the help that came with VC++ for &#x201C;fork&#x201D; or &#x201C;POSIX&#x201D; and see if it
gives you any clues.</fo:block>


<fo:block>If that doesn't work at all, ditch the
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">fork()</fo:inline>/<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">sigaction</fo:inline> stuff and replace it with the
Win32 equivalent: <fo:wrapper id="indexId434909-208"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">CreateProcess()</fo:inline>.  I don't know how
to use <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">CreateProcess()</fo:inline>—it takes a bazillion
arguments, but it should be covered in the docs that came with VC++.</fo:block>


</fo:block>









<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always"><fo:wrapper id="indexId434909-209"></fo:wrapper>I'm behind a firewall—how do I let people
outside the firewall know my IP address so they can connect to my
machine?</fo:block>

<fo:block space-after="1em"><fo:block>Unfortunately, the purpose of a firewall is to prevent
people outside the firewall from connecting to machines inside the
firewall, so allowing them to do so is basically considered a breach of
security.</fo:block>


<fo:block>This isn't to say that all is lost.  For one thing, you can still
often <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline> through the firewall if it's doing
some kind of masquerading or NAT or something like that.  Just design
your programs so that you're always the one initiating the connection,
and you'll be fine.</fo:block>


<fo:block><fo:wrapper id="indexId434909-210"></fo:wrapper>If that's not satisfactory, you
can ask your sysadmins to poke a hole in the firewall so that people can
connect to you.  The firewall can forward to you either through it's NAT
software, or through a proxy or something like that.</fo:block>


<fo:block>Be aware that a hole in the firewall is nothing to be taken
lightly.  You have to make sure you don't give bad people access to the
internal network; if you're a beginner, it's a lot harder to make
software secure than you might imagine.</fo:block>


<fo:block>Don't make your sysadmin mad at me.
<fo:inline font-family="Liberation Mono" font-size="0.8em">;-)</fo:inline></fo:block>
</fo:block>





<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always"><fo:wrapper id="indexId434909-211"></fo:wrapper><fo:wrapper id="indexId434909-212"></fo:wrapper>How do I write
a packet sniffer?  How do I put my Ethernet interface into promiscuous
mode?</fo:block>

<fo:block space-after="1em"><fo:block>For those not in the know, when a network card is in &#x201C;promiscuous
mode&#x201D;, it will forward ALL packets to the operating system, not just
those that were addressed to this particular machine.  (We're talking
Ethernet-layer addresses here, not IP addresses--but since ethernet is
lower-layer than IP, all IP addresses are effectively forwarded as
well.  See the section <fo:basic-link internal-destination="lowlevel">Low Level Nonsense and
Network Theory</fo:basic-link> for more info.)</fo:block>


<fo:block>This is the basis for how a packet sniffer works.  It puts the
interface into promiscuous mode, then the OS gets every single packet
that goes by on the wire.  You'll have a socket of some type that you
can read this data from.</fo:block>


<fo:block>Unfortunately, the answer to the question varies depending on the
platform, but if you Google for, for instance, &#x201C;windows promiscuous <fo:wrapper id="indexId434909-213"></fo:wrapper>ioctl&#x201D; you'll probably get somewhere.  There's what looks
like <fo:basic-link external-destination="http://interactive.linuxjournal.com/article/4659" keep-with-next="always">a decent writeup in Linux Journal</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">40</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">40. <fo:inline font-family="Liberation Mono">http://interactive.linuxjournal.com/article/4659</fo:inline></fo:block></fo:footnote-body></fo:footnote>,
as well.</fo:block>
</fo:block>





<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always">How can I set a custom <fo:wrapper id="indexId434909-214"></fo:wrapper>timeout value for
a TCP or UDP socket?</fo:block>

<fo:block space-after="1em"><fo:block>It depends on your system.  You might search the net for <fo:wrapper id="indexId434909-215"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SO_RCVTIMEO</fo:inline> and <fo:wrapper id="indexId434909-216"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SO_SNDTIMEO</fo:inline> (for use with <fo:wrapper id="indexId434909-217"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">setsockopt()</fo:inline>) to see if your system
supports such functionality.</fo:block>


<fo:block>The Linux man page suggests using <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">alarm()</fo:inline> or
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">setitimer()</fo:inline> as a substitute.</fo:block>


</fo:block>





<fo:block text-indent="0pt" font-weight="bold" space-after="0.3em" keep-with-next="always">How can I tell which ports are available to use?  Is there a list of
&#x201C;official&#x201D; port numbers?</fo:block>

<fo:block space-after="1em"><fo:block>Usually this isn't an issue.  If you're writing, say, a web
server, then it's a good idea to use the well-known port 80 for your
software.  If you're writing just your own specialized server, then
choose a port at random (but greater than 1023) and give it a try.</fo:block>


<fo:block>If the port is already in use, you'll get an &#x201C;Address already in use&#x201D;
error when you try to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline>.  Choose another port.  (It's
a good idea to allow the user of your software to specify an alternate
port either with a config file or a command line switch.)</fo:block>


<fo:block>There is a <fo:basic-link external-destination="http://www.iana.org/assignments/port-numbers" keep-with-next="always">list of official port
numbers</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">41</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">41. <fo:inline font-family="Liberation Mono">http://www.iana.org/assignments/port-numbers</fo:inline></fo:block></fo:footnote-body></fo:footnote> maintained by the Internet Assigned Numbers Authority
(IANA).  Just because something (over 1023) is in that list doesn't mean
you can't use the port.  For instance, Id Software's DOOM uses the same
port as &#x201C;mdqs&#x201D;, whatever that is.  All that matters is that no one else
<fo:inline font-style="italic">on the same machine</fo:inline> is using that port when you want to use
it.</fo:block>


</fo:block>








</fo:flow>
</fo:page-sequence>
 






 



<fo:page-sequence master-reference="chapter">
<fo:static-content flow-name="bg-normal-first-footer">
<fo:block text-align="center" font-family="Liberation Sans" font-weight="bold" font-size="11pt" padding-top="1em"><fo:page-number/></fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="50%" />
	<fo:table-column column-number="2" column-width="50%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt" font-style="italic">Beej's Guide to Network Programming</fo:block>
			</fo:table-cell>
			<fo:table-cell column-number="2" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="11pt" font-weight="bold"><fo:page-number/></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-even-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline>&#8195;&#8195;<fo:inline font-style="italic">Beej's Guide to Network Programming</fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-odd-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-style="italic">Man Pages</fo:inline>&#8195;&#8195;<fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="xsl-footnote-separator">
	<fo:block>
		<fo:leader leader-pattern="rule" leader-length="40%"/>
	</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body" id="man" font-family="Liberation Serif" font-size="11pt" text-indent="2.000000em">

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="man">9. Man Pages</fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>


<fo:block><fo:wrapper id="indexId434909-218"></fo:wrapper>In the Unix world, there are a lot of manuals.
They have little sections that describe individual functions that you
have at your disposal.</fo:block>


<fo:block>Of course, <fo:inline font-weight="bold">manual</fo:inline> would be too much of a thing to type.  I
mean, no one in the Unix world, including myself, likes to type that
much.  Indeed I could go on and on at great length about how much I
prefer to be terse but instead I shall be brief and not bore you with
long-winded diatribes about how utterly amazingly brief I prefer to be
in virtually all circumstances in their entirety.</fo:block>


<fo:block><fo:inline font-style="italic">[Applause]</fo:inline></fo:block>


<fo:block>Thank you.  What I am getting at is that these pages are called &#x201C;man
pages&#x201D; in the Unix world, and I have included my own personal truncated
variant here for your reading enjoyment.  The thing is, many of these
functions are way more general purpose than I'm letting on, but I'm only
going to present the parts that are relevant for Internet Sockets
Programming.</fo:block>


<fo:block>But wait!  That's not all that's wrong with my man pages:</fo:block>


<fo:list-block provisional-distance-between-starts="4.0em" space-before="1em" space-after="1em" start-indent="0cm">

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">&#x2022;</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">They are incomplete and only show the basics from the guide.</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">&#x2022;</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">There are many more man pages than this in the real world.</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">&#x2022;</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">They are different than the ones on your system.</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">&#x2022;</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">The header files might be different for certain functions on your
system.</fo:block>
		</fo:list-item-body>
	</fo:list-item>

	<fo:list-item space-after="0.5em">
		<fo:list-item-label end-indent="label-end()-0em">
			<fo:block text-align="right">&#x2022;</fo:block>
		</fo:list-item-label>
		<fo:list-item-body start-indent="body-start()">
			<fo:block text-indent="0em">The function parameters might be different for certain functions on your
system.</fo:block>
		</fo:list-item-body>
	</fo:list-item>

</fo:list-block>


<fo:block>If you want the real information, check your local Unix man pages by
typing <fo:inline font-weight="bold">man whatever</fo:inline>, where &#x201C;whatever&#x201D; is something that
you're incredibly interested in, such as &#x201C;<fo:inline font-family="Liberation Mono" font-size="0.900000em">accept</fo:inline>&#x201D;.  (I'm sure
Microsoft Visual Studio has something similar in their help section.
But &#x201C;man&#x201D; is better because it is one byte more concise than &#x201C;help&#x201D;.
Unix wins again!)</fo:block>


<fo:block>So, if these are so flawed, why even include them at all in the
Guide?  Well, there are a few reasons, but the best are that (a) these
versions are geared specifically toward network programming and are
easier to digest than the real ones, and (b) these versions contain
examples!</fo:block>


<fo:block>Oh!  And speaking of the examples, I don't tend to put in all the
error checking because it really increases the length of the code.  But
you should absolutely do error checking pretty much any time you make
any of the system calls unless you're totally 100% sure it's not going
to fail, and you should probably do it even then!</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="acceptman">9.1. <fo:inline font-family="Liberation Mono" font-weight="bold">accept()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Accept an incoming connection on a listening socket</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int accept(int <fo:inline font-family="Liberation Mono" font-style="oblique">s</fo:inline>, struct sockaddr *<fo:inline font-family="Liberation Mono" font-style="oblique">addr</fo:inline>, socklen_t *<fo:inline font-family="Liberation Mono" font-style="oblique">addrlen</fo:inline>);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block><fo:wrapper id="indexId434909-219"></fo:wrapper>Once you've gone through the trouble of getting a
<fo:wrapper id="indexId434909-220"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_STREAM</fo:inline> socket and setting it
up for incoming connections with <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">listen()</fo:inline>, then you call
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline> to actually get yourself a new socket descriptor
to use for subsequent communication with the newly connected client.</fo:block>


<fo:block>The old socket that you are using for listening is still there, and
will be used for further <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline> calls as they come
in.</fo:block>


<fo:block>
<fo:table width="100%" space-before="0.5em" space-after="0.5em" table-layout="fixed">
<fo:table-column column-width="0%" column-number="1"/>
<fo:table-column column-width="100%" column-number="2"/>
<fo:table-body start-indent="0pt" text-align="start">
<fo:table-row>
<fo:table-cell column-number="1">
<fo:block/>
</fo:table-cell>
<fo:table-cell column-number="2">
<fo:table width="100%" table-layout="fixed" space-before="0.5em" space-after="0.5em" text-indent="0pt" border-style="solid" border-width="thin">
	<fo:table-column column-width="20%" column-number="1" />
	<fo:table-column column-width="78%" column-number="2" />
	<fo:table-body start-indent="0pt" text-align="start">

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">s</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">The <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">listen()</fo:inline>ing socket descriptor.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">addr</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">This is filled in with the address of the site that's
connecting to you.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">addrlen</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">This is filled in with the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sizeof()</fo:inline> the
structure returned in the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">addr</fo:inline> parameter.  You can safely
ignore it if you assume you're getting a <fo:wrapper id="indexId434909-221"></fo:wrapper>
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr_in</fo:inline> back, which you know you are, because that's the type
you passed in for <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">addr</fo:inline>.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>

	</fo:table-body>
</fo:table>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>

</fo:block>


<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline> will normally block, and you can use
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline> to peek on the listening socket descriptor ahead
of time to see if it's &#x201C;ready to read&#x201D;.  If so, then there's a new
connection waiting to be <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline>ed!  Yay!  Alternatively,
you could set the <fo:wrapper id="indexId434909-222"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">O_NONBLOCK</fo:inline> flag
on the listening socket using <fo:wrapper id="indexId434909-223"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">fcntl()</fo:inline>,
and then it will never block, choosing instead to return
<fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> with <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> set to <fo:wrapper id="indexId434909-224"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">EWOULDBLOCK</fo:inline>.</fo:block>


<fo:block>The socket descriptor returned by <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline> is a bona
fide socket descriptor, open and connected to the remote host.  You have
to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">close()</fo:inline> it when you're done with it.</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline> returns the newly connected socket descriptor,
or <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error, with <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> set
appropriately.</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >struct sockaddr_storage their_addr;
socklen_t addr_size;
struct addrinfo hints, *res;
int sockfd, new_fd;

// first, load up address structs with getaddrinfo():

memset(&amp;hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC;  // use IPv4 or IPv6, whichever
hints.ai_socktype = SOCK_STREAM;
hints.ai_flags = AI_PASSIVE;     // fill in my IP for me

getaddrinfo(NULL, MYPORT, &amp;hints, &amp;res);

// make a socket, bind it, and listen on it:

sockfd = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol);
bind(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);
listen(sockfd, BACKLOG);

// now accept an incoming connection:

addr_size = sizeof their_addr;
new_fd = accept(sockfd, (struct sockaddr *)&amp;their_addr, &amp;addr_size);

// ready to communicate on socket descriptor new_fd!</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="socketman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="getaddrinfoman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="listenman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">listen()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="sockaddr_inman"><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in</fo:inline></fo:basic-link></fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="bindman">9.2. <fo:inline font-family="Liberation Mono" font-weight="bold">bind()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Associate a socket with an IP address and port number</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int bind(int <fo:inline font-family="Liberation Mono" font-style="oblique">sockfd</fo:inline>, struct sockaddr *<fo:inline font-family="Liberation Mono" font-style="oblique">my_addr</fo:inline>, socklen_t <fo:inline font-family="Liberation Mono" font-style="oblique">addrlen</fo:inline>);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block><fo:wrapper id="indexId434909-225"></fo:wrapper>When a remote machine wants to connect to your
server program, it needs two pieces of information: the
<fo:wrapper id="indexId434909-226"></fo:wrapper>IP address and the <fo:wrapper id="indexId434909-227"></fo:wrapper>port number.
The <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline> call allows you to do just that.</fo:block>


<fo:block>First, you call <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline> to load up a <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">struct
sockaddr</fo:inline> with the destination address and port information.  Then
you call <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline> to get a socket descriptor, and then you
pass the socket and address into <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline>, and the IP address
and port are magically (using actual magic) bound to the socket!</fo:block>


<fo:block>If you don't know your IP address, or you know you only have one IP
address on the machine, or you don't care which of the machine's IP
addresses is used, you can simply pass the <fo:inline font-family="Liberation Mono" font-size="0.900000em">AI_PASSIVE</fo:inline>
flag in the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">hints</fo:inline> parameter to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline>.  What this does is fill in the IP address
part of the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">struct sockaddr</fo:inline> with a special value that tells
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline> that it should automatically fill in this host's IP
address.</fo:block>


<fo:block>What what?  What special value is loaded into the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">struct
sockaddr</fo:inline>'s IP address to cause it to auto-fill the address with
the current host?  I'll tell you, but keep in mind this is only if
you're filling out the <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline> by hand; if not, use
the results from <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline>, as per above.  In IPv4, the
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sin_addr.s_addr</fo:inline> field of the <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr_in</fo:inline> structure is set to <fo:inline font-family="Liberation Mono" font-size="0.900000em">INADDR_ANY</fo:inline>.  In
IPv6, the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sin6_addr</fo:inline> field of the <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr_in6</fo:inline> structure is assigned into from the global variable
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">in6addr_any</fo:inline>.  Or, if you're declaring a new <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
in6_addr</fo:inline>, you can initialize it to
<fo:inline font-family="Liberation Mono" font-size="0.900000em">IN6ADDR_ANY_INIT</fo:inline>.</fo:block>


<fo:block>Lastly, the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">addrlen</fo:inline> parameter should be set to
<fo:inline font-family="Liberation Mono" font-size="0.900000em">sizeof my_addr</fo:inline>.</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block>Returns zero on success, or <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error (and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">errno</fo:inline> will be set accordingly.)</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >// modern way of doing things with getaddrinfo()

struct addrinfo hints, *res;
int sockfd;

// first, load up address structs with getaddrinfo():

memset(&amp;hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC;  // use IPv4 or IPv6, whichever
hints.ai_socktype = SOCK_STREAM;
hints.ai_flags = AI_PASSIVE;     // fill in my IP for me

getaddrinfo(NULL, "3490", &amp;hints, &amp;res);

// make a socket:
// (you should actually walk the "res" linked list and error-check!)

sockfd = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol);

// bind it to the port we passed in to getaddrinfo():

bind(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >// example of packing a struct by hand, IPv4

struct sockaddr_in myaddr;
int s;

myaddr.sin_family = AF_INET;
myaddr.sin_port = htons(3490);

// you can specify an IP address:
inet_pton(AF_INET, "63.161.169.137", &amp;(myaddr.sin_addr));

// or you can let it automatically select one:
myaddr.sin_addr.s_addr = INADDR_ANY;

s = socket(PF_INET, SOCK_STREAM, 0);
bind(s, (struct sockaddr*)&amp;myaddr, sizeof myaddr);</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="getaddrinfoman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="socketman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="sockaddr_inman"><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="sockaddr_inman"><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in_addr</fo:inline></fo:basic-link></fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="connectman">9.3. <fo:inline font-family="Liberation Mono" font-weight="bold">connect()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Connect a socket to a server</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int connect(int <fo:inline font-family="Liberation Mono" font-style="oblique">sockfd</fo:inline>, const struct sockaddr *<fo:inline font-family="Liberation Mono" font-style="oblique">serv_addr</fo:inline>,
            socklen_t <fo:inline font-family="Liberation Mono" font-style="oblique">addrlen</fo:inline>);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block><fo:wrapper id="indexId434909-228"></fo:wrapper>Once you've built a socket descriptor with the
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline> call, you can <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline> that socket
to a remote server using the well-named <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline> system
call.  All you need to do is pass it the socket descriptor and the
address of the server you're interested in getting to know better.  (Oh,
and the length of the address, which is commonly passed to functions
like this.)</fo:block>


<fo:block>Usually this information comes along as the result of a call to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline>, but you can fill out your own <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr</fo:inline> if you want to.</fo:block>


<fo:block>If you haven't yet called <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline> on the socket
descriptor, it is automatically bound to your IP address and a random
local port.  This is usually just fine with you if you're not a server,
since you really don't care what your local port is; you only care what
the remote port is so you can put it in the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">serv_addr</fo:inline>
parameter.  You <fo:inline font-style="italic">can</fo:inline> call <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline> if you really
want your client socket to be on a specific IP address and port, but
this is pretty rare.</fo:block>


<fo:block>Once the socket is <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline>ed, you're free to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> data on it to your heart's
content.</fo:block>


<fo:block><fo:wrapper id="indexId434909-229"></fo:wrapper>Special note: if you
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline> a <fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_DGRAM</fo:inline> UDP socket to a
remote host, you can use <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> as
well as <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendto()</fo:inline> and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline>.  If you
want.</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block>Returns zero on success, or <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error (and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">errno</fo:inline> will be set accordingly.)</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >// connect to www.example.com port 80 (http)

struct addrinfo hints, *res;
int sockfd;

// first, load up address structs with getaddrinfo():

memset(&amp;hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC;  // use IPv4 or IPv6, whichever
hints.ai_socktype = SOCK_STREAM;

// we could put "80" instead on "http" on the next line:
getaddrinfo("www.example.com", "http", &amp;hints, &amp;res);

// make a socket:

sockfd = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol);

// connect it to the address and port we passed in to getaddrinfo():

connect(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="socketman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="bindman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline></fo:basic-link></fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="closeman">9.4. <fo:inline font-family="Liberation Mono" font-weight="bold">close()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Close a socket descriptor</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;unistd.h&gt;

int close(int <fo:inline font-family="Liberation Mono" font-style="oblique">s</fo:inline>);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block><fo:wrapper id="indexId434909-230"></fo:wrapper>After you've finished using the socket for
whatever demented scheme you have concocted and you don't want to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> or <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> or, indeed, do <fo:inline font-style="italic">anything
else</fo:inline> at all with the socket, you can <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">close()</fo:inline> it, and
it'll be freed up, never to be used again.</fo:block>


<fo:block>The remote side can tell if this happens one of two ways. One: if the
remote side calls <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>, it will return <fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline>.
Two: if the remote side calls <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline>, it'll receive a
signal <fo:wrapper id="indexId434909-231"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SIGPIPE</fo:inline> and send() will return
<fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> and <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> will be set to <fo:wrapper id="indexId434909-232"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">EPIPE</fo:inline>.</fo:block>


<fo:block><fo:wrapper id="indexId434909-233"></fo:wrapper><fo:inline font-weight="bold">Windows users</fo:inline>: the function you need to use
is called <fo:wrapper id="indexId434909-234"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">closesocket()</fo:inline>, not
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">close()</fo:inline>.  If you try to use <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">close()</fo:inline> on a
socket descriptor, it's possible Windows will get angry... And you
wouldn't like it when it's angry.</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block>Returns zero on success, or <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error (and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">errno</fo:inline> will be set accordingly.)</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >s = socket(PF_INET, SOCK_DGRAM, 0);
.
.
.
// a whole lotta stuff...*BRRRONNNN!*
.
.
.
close(s);  // not much to it, really.</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="socketman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="shutdownman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">shutdown()</fo:inline></fo:basic-link></fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="getaddrinfoman">9.5. <fo:inline font-family="Liberation Mono" font-weight="bold">getaddrinfo()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold">freeaddrinfo()</fo:inline>,
<fo:inline font-family="Liberation Mono" font-weight="bold">gai_strerror()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Get information about a host name and/or service and load up a
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline> with the result.</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netdb.h&gt;

int getaddrinfo(const char *nodename, const char *servname,
                const struct addrinfo *hints, struct addrinfo **res);

void freeaddrinfo(struct addrinfo *ai);

const char *gai_strerror(int ecode);

struct addrinfo {
  int     ai_flags;          // AI_PASSIVE, AI_CANONNAME, ...
  int     ai_family;         // AF_xxx
  int     ai_socktype;       // SOCK_xxx
  int     ai_protocol;       // 0 (auto) or IPPROTO_TCP, IPPROTO_UDP 

  socklen_t  ai_addrlen;     // length of ai_addr
  char   *ai_canonname;      // canonical name for nodename
  struct sockaddr  *ai_addr; // binary address
  struct addrinfo  *ai_next; // next structure in linked list
};</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline> is an excellent function that will return
information on a particular host name (such as its IP address) and load
up a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline> for you, taking care of the gritty
details (like if it's IPv4 or IPv6.)  It replaces the old functions
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyname()</fo:inline> and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getservbyname()</fo:inline>.The
description, below, contains a lot of information that might be a little
daunting, but actual usage is pretty simple.  It might be worth it to
check out the examples first.</fo:block>


<fo:block>The host name that you're interested in goes in the
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">nodename</fo:inline> parameter.  The address can be either a host
name, like &#x201C;www.example.com&#x201D;, or an IPv4 or IPv6 address (passed as a
string).  This parameter can also be <fo:inline font-family="Liberation Mono" font-size="0.900000em">NULL</fo:inline> if you're using
the <fo:inline font-family="Liberation Mono" font-size="0.900000em">AI_PASSIVE</fo:inline> flag (see below.)</fo:block>


<fo:block>The <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">servname</fo:inline> parameter is basically the port number.
It can be a port number (passed as a string, like &#x201C;80&#x201D;), or it can be a
service name, like &#x201C;http&#x201D; or &#x201C;tftp&#x201D; or &#x201C;smtp&#x201D; or &#x201C;pop&#x201D;, etc.  Well-known
service names can be found in the <fo:basic-link external-destination="http://www.iana.org/assignments/port-numbers" keep-with-next="always">IANA Port
List</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">42</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">42. <fo:inline font-family="Liberation Mono">http://www.iana.org/assignments/port-numbers</fo:inline></fo:block></fo:footnote-body></fo:footnote> or in your <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">/etc/services</fo:inline> file.</fo:block>


<fo:block>Lastly, for input parameters, we have <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">hints</fo:inline>.  This is
really where you get to define what the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddinfo()</fo:inline>
function is going to do.  Zero the whole structure before use with
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">memset()</fo:inline>.  Let's take a look at the fields you need to set
up before use.</fo:block>


<fo:block>The <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">ai_flags</fo:inline> can be set to a variety of things, but
here are a couple important ones.  (Multiple flags can be specified by
bitwise-ORing them together with the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">|</fo:inline> operator.)
Check your man page for the complete list of flags.</fo:block>


<fo:block><fo:inline font-family="Liberation Mono" font-size="0.900000em">AI_CANONNAME</fo:inline> causes the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">ai_canonname</fo:inline>
of the result to the filled out with the host's canonical (real) name.
<fo:inline font-family="Liberation Mono" font-size="0.900000em">AI_PASSIVE</fo:inline> causes the result's IP address to
be filled out with <fo:inline font-family="Liberation Mono" font-size="0.900000em">INADDR_ANY</fo:inline> (IPv4)or
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">in6addr_any</fo:inline> (IPv6); this causes a subsequent call to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline> to auto-fill the IP address of the <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr</fo:inline> with the address of the current host.  That's excellent
for setting up a server when you don't want to hardcode the address.</fo:block>


<fo:block>If you do use the <fo:inline font-family="Liberation Mono" font-size="0.900000em">AI_PASSIVE</fo:inline>, flag, then you can pass
<fo:inline font-family="Liberation Mono" font-size="0.900000em">NULL</fo:inline> in the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">nodename</fo:inline> (since
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline> will fill it in for you later.)</fo:block>


<fo:block>Continuing on with the input paramters, you'll likely want to set
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">ai_family</fo:inline> to <fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_UNSPEC</fo:inline> which tells
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline> to look for both IPv4 and IPv6 addresses.
You can also restrict yourself to one or the other with
<fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET</fo:inline> or <fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET6</fo:inline>.</fo:block>


<fo:block>Next, the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">socktype</fo:inline> field should be set to
<fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_STREAM</fo:inline> or <fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_DGRAM</fo:inline>, depending on
which type of socket you want.</fo:block>


<fo:block>Finally, just leave <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">ai_protocol</fo:inline> at <fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline> to
automatically choose your protocol type.</fo:block>


<fo:block>Now, after you get all that stuff in there, you can
<fo:inline font-style="italic">finally</fo:inline> make the call to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline>!</fo:block>


<fo:block>Of course, this is where the fun begins.  The <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">res</fo:inline> will
now point to a linked list of <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct addrinfo</fo:inline>s, and you can
go through this list to get all the addresses that match what you passed
in with the hints.</fo:block>


<fo:block>Now, it's possible to get some addresses that don't work for one
reason or another, so what the Linux man page does is loops through the
list doing a call to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline> and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline>
(or <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline> if you're setting up a server with the
<fo:inline font-family="Liberation Mono" font-size="0.900000em">AI_PASSIVE</fo:inline> flag) until it succeeds.</fo:block>


<fo:block>Finally, when you're done with the linked list, you need to call
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">freeaddrinfo()</fo:inline> to free up the memory (or it will be leaked,
and Some People will get upset.)</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block>Returns zero on success, or nonzero on error.  If it returns nonzero,
you can use the function <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gai_strerror()</fo:inline> to get a printable
version of the error code in the return value.</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >// code for a client connecting to a server
// namely a stream socket to www.example.com on port 80 (http)
// either IPv4 or IPv6

int sockfd;  
struct addrinfo hints, *servinfo, *p;
int rv;

memset(&amp;hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC; // use AF_INET6 to force IPv6
hints.ai_socktype = SOCK_STREAM;

if ((rv = getaddrinfo("www.example.com", "http", &amp;hints, &amp;servinfo)) != 0) {
    fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
    exit(1);
}

// loop through all the results and connect to the first we can
for(p = servinfo; p != NULL; p = p-&gt;ai_next) {
    if ((sockfd = socket(p-&gt;ai_family, p-&gt;ai_socktype,
            p-&gt;ai_protocol)) == -1) {
        perror("socket");
        continue;
    }

    if (connect(sockfd, p-&gt;ai_addr, p-&gt;ai_addrlen) == -1) {
        close(sockfd);
        perror("connect");
        continue;
    }

    break; // if we get here, we must have connected successfully
}

if (p == NULL) {
    // looped off the end of the list with no connection
    fprintf(stderr, "failed to connect\n");
    exit(2);
}

freeaddrinfo(servinfo); // all done with this structure</fo:block>

<fo:block></fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >// code for a server waiting for connections
// namely a stream socket on port 3490, on this host's IP
// either IPv4 or IPv6.

int sockfd;  
struct addrinfo hints, *servinfo, *p;
int rv;

memset(&amp;hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC; // use AF_INET6 to force IPv6
hints.ai_socktype = SOCK_STREAM;
hints.ai_flags = AI_PASSIVE; // use my IP address

if ((rv = getaddrinfo(NULL, "3490", &amp;hints, &amp;servinfo)) != 0) {
    fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
    exit(1);
}

// loop through all the results and bind to the first we can
for(p = servinfo; p != NULL; p = p-&gt;ai_next) {
    if ((sockfd = socket(p-&gt;ai_family, p-&gt;ai_socktype,
            p-&gt;ai_protocol)) == -1) {
        perror("socket");
        continue;
    }

    if (bind(sockfd, p-&gt;ai_addr, p-&gt;ai_addrlen) == -1) {
        close(sockfd);
        perror("bind");
        continue;
    }

    break; // if we get here, we must have connected successfully
}

if (p == NULL) {
    // looped off the end of the list with no successful bind
    fprintf(stderr, "failed to bind socket\n");
    exit(2);
}

freeaddrinfo(servinfo); // all done with this structure</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="gethostbynameman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyname()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="getnameinfoman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getnameinfo()</fo:inline></fo:basic-link></fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="gethostnameman">9.6. <fo:inline font-family="Liberation Mono" font-weight="bold">gethostname()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Returns the name of the system</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/unistd.h&gt;

int gethostname(char *<fo:inline font-family="Liberation Mono" font-style="oblique">name</fo:inline>, size_t <fo:inline font-family="Liberation Mono" font-style="oblique">len</fo:inline>);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block><fo:wrapper id="indexId434909-235"></fo:wrapper>Your system has a name.  They all do.  This
is a slightly more Unixy thing than the rest of the networky stuff we've
been talking about, but it still has its uses.</fo:block>


<fo:block>For instance, you can get your host name, and then call <fo:wrapper id="indexId434909-236"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyname()</fo:inline> to find out your
<fo:wrapper id="indexId434909-237"></fo:wrapper>IP address.</fo:block>


<fo:block>The parameter <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">name</fo:inline> should point to a buffer that will hold
the host name, and <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">len</fo:inline> is the size of that buffer in bytes.
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostname()</fo:inline> won't overwrite the end of the buffer (it
might return an error, or it might just stop writing), and it will
<fo:inline font-family="Liberation Mono" font-size="0.900000em">NUL</fo:inline>-terminate the string if there's room for it in the
buffer.</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block>Returns zero on success, or <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error (and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">errno</fo:inline> will be set accordingly.)</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >char hostname[128];

gethostname(hostname, sizeof hostname);
printf("My hostname: %s\n", hostname);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="gethostbynameman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyname()</fo:inline></fo:basic-link></fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="gethostbynameman">9.7. <fo:inline font-family="Liberation Mono" font-weight="bold">gethostbyname()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold">gethostbyaddr()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Get an IP address for a hostname, or vice-versa</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/socket.h&gt;
#include &lt;netdb.h&gt;

struct hostent *gethostbyname(const char *<fo:inline font-family="Liberation Mono" font-style="oblique">name</fo:inline>); // DEPRECATED!
struct hostent *gethostbyaddr(const char *<fo:inline font-family="Liberation Mono" font-style="oblique">addr</fo:inline>, int <fo:inline font-family="Liberation Mono" font-style="oblique">len</fo:inline>, int <fo:inline font-family="Liberation Mono" font-style="oblique">type</fo:inline>);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block><fo:wrapper id="indexId434909-238"></fo:wrapper><fo:wrapper id="indexId434909-239"></fo:wrapper><fo:inline font-style="italic">PLEASE
NOTE: these two functions are superseded by <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline>
and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getnameinfo()</fo:inline>!</fo:inline>  In particular,
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyname()</fo:inline> doesn't work well with IPv6.</fo:block>


<fo:block>These functions map back and forth between host names and IP
addresses.  For instance, if you have &#x201C;www.example.com&#x201D;, you can use
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyname()</fo:inline> to get its IP address and store it in a
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in_addr</fo:inline>.</fo:block>


<fo:block>Conversely, if you have a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in_addr</fo:inline> or a
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in6_addr</fo:inline>, you can use <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyaddr()</fo:inline>
to get the hostname back.  <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyaddr()</fo:inline> <fo:inline font-style="italic">is</fo:inline>
IPv6 compatible, but you should use the newer shinier
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getnameinfo()</fo:inline> instead.</fo:block>


<fo:block>(If you have a string containing an IP address in dots-and-numbers
format that you want to look up the hostname of, you'd be better off
using <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline> with the <fo:inline font-family="Liberation Mono" font-size="0.900000em">AI_CANONNAME</fo:inline>
flag.)</fo:block>


<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyname()</fo:inline> takes a string like &#x201C;www.yahoo.com&#x201D;, and
returns a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct hostent</fo:inline> which contains tons of
information, including the <fo:wrapper id="indexId434909-240"></fo:wrapper>IP address.  (Other
information is the official host name, a list of aliases, the address
type, the length of the addresses, and the list of addresses—it's
a general-purpose structure that's pretty easy to use for our specific
purposes once you see how.)</fo:block>


<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyaddr()</fo:inline> takes a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in_addr</fo:inline> or
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in6_addr</fo:inline> and brings you up a corresponding host name
(if there is one), so it's sort of the reverse of
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyname()</fo:inline>.  As for parameters, even though
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">addr</fo:inline> is a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">char*</fo:inline>, you actually want to pass in a
pointer to a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in_addr</fo:inline>.  <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">len</fo:inline> should be
<fo:inline font-family="Liberation Mono" font-size="0.900000em">sizeof(struct in_addr)</fo:inline>, and <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">type</fo:inline> should be
<fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET</fo:inline>.</fo:block>


<fo:block>So what is this <fo:wrapper id="indexId434909-241"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct hostent</fo:inline>
that gets returned?  It has a number of fields that contain information
about the host in question.</fo:block>


<fo:block><fo:table width="100%" space-before="0.5em" space-after="0.5em" table-layout="fixed">
<fo:table-column column-width="0%" column-number="1"/>
<fo:table-column column-width="100%" column-number="2"/>
<fo:table-body start-indent="0pt" text-align="start">
<fo:table-row>
<fo:table-cell column-number="1">
<fo:block/>
</fo:table-cell>
<fo:table-cell column-number="2">
<fo:table width="100%" table-layout="fixed" space-before="0.5em" space-after="0.5em" text-indent="0pt" border-style="solid" border-width="thin">
	<fo:table-column column-width="30%" column-number="1" />
	<fo:table-column column-width="68%" column-number="2" />
	<fo:table-body start-indent="0pt" text-align="start">

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">char *h_name</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">The real canonical host name.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">char **h_aliases</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">A list of aliases that can be accessed with
arrays—the last element is <fo:inline font-family="Liberation Mono" font-size="0.900000em">NULL</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">int h_addrtype</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">The result's address type, which really should be
<fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET</fo:inline> for our purposes.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">int length</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">The length of the addresses in bytes, which is 4 for
IP (version 4) addresses.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">char **h_addr_list</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">A list of IP addresses for this host.  Although this
is a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">char**</fo:inline>, it's really an array of <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
in_addr*</fo:inline>s in disguise.  The last array element is
<fo:inline font-family="Liberation Mono" font-size="0.900000em">NULL</fo:inline>.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">h_addr</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">A commonly defined alias for
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">h_addr_list[0]</fo:inline>.  If you just want any old IP address for this
host (yeah, they can have more than one) just use this field.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


	</fo:table-body>
</fo:table>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block>Returns a pointer to a resultant <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct hostent</fo:inline> or
success, or <fo:inline font-family="Liberation Mono" font-size="0.900000em">NULL</fo:inline> on error.</fo:block>


<fo:block>Instead of the normal <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">perror()</fo:inline> and all that stuff you'd
normally use for error reporting, these functions have parallel results
in the variable <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">h_errno</fo:inline>, which can be printed using the
functions <fo:wrapper id="indexId434909-242"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">herror()</fo:inline> or <fo:wrapper id="indexId434909-243"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">hstrerror()</fo:inline>.  These work just like the
classic <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">perror()</fo:inline>, and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">strerror()</fo:inline> functions you're used to.</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >// THIS IS A DEPRECATED METHOD OF GETTING HOST NAMES
// use getaddrinfo() instead!

#include &lt;stdio.h&gt;
#include &lt;errno.h&gt;
#include &lt;netdb.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;

int main(int argc, char *argv[])
{
    int i;
    struct hostent *he;
    struct in_addr **addr_list;

    if (argc != 2) {
        fprintf(stderr,"usage: ghbn hostname\n");
        return 1;
    }

    if ((he = gethostbyname(argv[1])) == NULL) {  // get the host info
        herror("gethostbyname");
        return 2;
    }

    // print information about this host:
    printf("Official name is: %s\n", he-&gt;h_name);
    printf("    IP addresses: ");
    addr_list = (struct in_addr **)he-&gt;h_addr_list;
    for(i = 0; addr_list[i] != NULL; i++) {
        printf("%s ", inet_ntoa(*addr_list[i]));
    }
    printf("\n");

    return 0;
}</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >// THIS HAS BEEN SUPERCEDED
// use getnameinfo() instead!

struct hostent *he;
struct in_addr ipv4addr;
struct in6_addr ipv6addr;

inet_pton(AF_INET, "192.0.2.34", &amp;ipv4addr);
he = gethostbyaddr(&amp;ipv4addr, sizeof ipv4addr, AF_INET);
printf("Host name: %s\n", he-&gt;h_name);

inet_pton(AF_INET6, "2001:db8:63b3:1::beef", &amp;ipv6addr);
he = gethostbyaddr(&amp;ipv6addr, sizeof ipv6addr, AF_INET6);
printf("Host name: %s\n", he-&gt;h_name);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="getaddrinfoman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="getnameinfoman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getnameinfo()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="gethostnameman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostname()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="errnoman"><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="perrorman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">perror()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="perrorman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">strerror()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="sockaddr_inman"><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in_addr</fo:inline></fo:basic-link></fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="getnameinfoman">9.8. <fo:inline font-family="Liberation Mono" font-weight="bold">getnameinfo()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Look up the host name and service name information for a given
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline>.</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/socket.h&gt;
#include &lt;netdb.h&gt;

int getnameinfo(const struct sockaddr *sa, socklen_t salen,
                char *host, size_t hostlen,
                char *serv, size_t servlen, int flags);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block>This function is the opposite of <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline>, that is,
this function takes an already loaded <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline> and
does a name and service name lookup on it.  It replaces the old
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyaddr()</fo:inline> and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getservbyport()</fo:inline>
functions.</fo:block>


<fo:block>You have to pass in a pointer to a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline>
(which in actuality is probably a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in</fo:inline> or
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in6</fo:inline> that you've cast) in the
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sa</fo:inline> parameter, and the length of that <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct</fo:inline>
in the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">salen</fo:inline>.</fo:block>


<fo:block>The resultant host name and service name will be written to the area
pointed to by the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">host</fo:inline> and <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">serv</fo:inline>
parameters.  Of course, you have to specify the max lengths of these
buffers in <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">hostlen</fo:inline> and <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">servlen</fo:inline>.</fo:block>


<fo:block>Finally, there are several flags you can pass, but here a a couple
good ones.  <fo:inline font-family="Liberation Mono" font-size="0.900000em">NI_NOFQDN</fo:inline> will cause the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">host</fo:inline>
to only contain the host name, not the whole domain name.
<fo:inline font-family="Liberation Mono" font-size="0.900000em">NI_NAMEREQD</fo:inline> will cause the function to fail if the name
cannot be found with a DNS lookup (if you don't specify this flag and
the name can't be found, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getnameinfo()</fo:inline> will put a string
version of the IP address in <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">host</fo:inline> instead.)</fo:block>


<fo:block>As always, check your local man pages for the full scoop.</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block>Returns zero on success, or non-zero on error.  If the return value
is non-zero, it can be passed to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gai_strerror()</fo:inline> to get a
human-readable string.  See <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo</fo:inline> for more
information.</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >struct sockaddr_in6 sa; // could be IPv4 if you want
char host[1024];
char service[20];

// pretend sa is full of good information about the host and port...

getnameinfo(&amp;sa, sizeof sa, host, sizeof host, service, sizeof service, 0);

printf("   host: %s\n", host);    // e.g. "www.example.com"
printf("service: %s\n", service); // e.g. "http"
</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="getaddrinfoman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="gethostbynameman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyaddr()</fo:inline></fo:basic-link></fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="getpeernameman">9.9. <fo:inline font-family="Liberation Mono" font-weight="bold">getpeername()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Return address info about the remote side of the connection</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/socket.h&gt;

int getpeername(int <fo:inline font-family="Liberation Mono" font-style="oblique">s</fo:inline>, struct sockaddr *<fo:inline font-family="Liberation Mono" font-style="oblique">addr</fo:inline>, socklen_t *<fo:inline font-family="Liberation Mono" font-style="oblique">len</fo:inline>);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block><fo:wrapper id="indexId434909-244"></fo:wrapper>Once you have either <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline>ed
a remote connection, or <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline>ed to a server, you now
have what is known as a <fo:inline font-style="italic">peer</fo:inline>.  Your peer is simply the
computer you're connected to, identified by an <fo:wrapper id="indexId434909-245"></fo:wrapper>IP
address and a <fo:wrapper id="indexId434909-246"></fo:wrapper>port.
So...</fo:block>


<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getpeername()</fo:inline> simply returns a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr_in</fo:inline> filled with information about the machine you're
connected to.</fo:block>


<fo:block>Why is it called a &#x201C;name&#x201D;?  Well, there are a lot of different kinds
of sockets, not just Internet Sockets like we're using in this guide,
and so &#x201C;name&#x201D; was a nice generic term that covered all cases.  In our
case, though, the peer's &#x201C;name&#x201D; is it's IP address and port.</fo:block>


<fo:block>Although the function returns the size of the resultant address in
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">len</fo:inline>, you must preload <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">len</fo:inline> with the size of
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">addr</fo:inline>.</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block>Returns zero on success, or <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error (and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">errno</fo:inline> will be set accordingly.)</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >// assume s is a connected socket

socklen_t len;
struct sockaddr_storage addr;
char ipstr[INET6_ADDRSTRLEN];
int port;

len = sizeof addr;
getpeername(s, (struct sockaddr*)&amp;addr, &amp;len);

// deal with both IPv4 and IPv6:
if (addr.ss_family == AF_INET) {
    struct sockaddr_in *s = (struct sockaddr_in *)&amp;addr;
    port = ntohs(s-&gt;sin_port);
    inet_ntop(AF_INET, &amp;s-&gt;sin_addr, ipstr, sizeof ipstr);
} else { // AF_INET6
    struct sockaddr_in6 *s = (struct sockaddr_in6 *)&amp;addr;
    port = ntohs(s-&gt;sin6_port);
    inet_ntop(AF_INET6, &amp;s-&gt;sin6_addr, ipstr, sizeof ipstr);
}

printf("Peer IP address: %s\n", ipstr);
printf("Peer port      : %d\n", port);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="gethostnameman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostname()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="gethostbynameman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyname()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="gethostbynameman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyaddr()</fo:inline></fo:basic-link></fo:block>



</fo:block>
 


<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="errnoman">9.10. <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Holds the error code for the last system call</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;errno.h&gt;

int <fo:inline font-family="Liberation Mono" font-style="oblique">errno</fo:inline>;</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block><fo:wrapper id="indexId434909-247"></fo:wrapper>This is the variable that holds error information
for a lot of system calls.  If you'll recall, things like
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline> and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">listen()</fo:inline> return <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline>
on error, and they set the exact value of <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> to let you
know specifically which error occurred.</fo:block>


<fo:block>The header file <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno.h</fo:inline> lists a bunch of constant
symbolic names for errors, such as <fo:inline font-family="Liberation Mono" font-size="0.900000em">EADDRINUSE</fo:inline>,
<fo:inline font-family="Liberation Mono" font-size="0.900000em">EPIPE</fo:inline>, <fo:inline font-family="Liberation Mono" font-size="0.900000em">ECONNREFUSED</fo:inline>, etc.  Your local man
pages will tell you what codes can be returned as an error, and you can
use these at run time to handle different errors in different ways.</fo:block>


<fo:block>Or, more commonly, you can call <fo:wrapper id="indexId434909-248"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">perror()</fo:inline> or <fo:wrapper id="indexId434909-249"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">strerror()</fo:inline> to get a human-readable
version of the error.</fo:block>


<fo:block>One thing to note, for you multithreading enthusiasts, is that on
most systems <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> is defined in a threadsafe manner.  (That
is, it's not actually a global variable, but it behaves just like a
global variable would in a single-threaded environment.)</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block>The value of the variable is the latest error to have transpired, which
might be the code for &#x201C;success&#x201D; if the last action succeeded.</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >s = socket(PF_INET, SOCK_STREAM, 0);
if (s == -1) {
    perror("socket"); // or use strerror()
}

tryagain:
if (select(n, &amp;readfds, NULL, NULL) == -1) {
    // an error has occurred!!

    // if we were only interrupted, just restart the select() call:
    if (errno == EINTR) goto tryagain;  // AAAA!  goto!!!

    // otherwise it's a more serious error:
    perror("select");
    exit(1);
}</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="perrorman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">perror()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="perrorman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">strerror()</fo:inline></fo:basic-link></fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="fcntlman">9.11. <fo:inline font-family="Liberation Mono" font-weight="bold">fcntl()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Control socket descriptors</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/unistd.h&gt;
#include &lt;sys/fcntl.h&gt;

int fcntl(int <fo:inline font-family="Liberation Mono" font-style="oblique">s</fo:inline>, int <fo:inline font-family="Liberation Mono" font-style="oblique">cmd</fo:inline>, long <fo:inline font-family="Liberation Mono" font-style="oblique">arg</fo:inline>);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block><fo:wrapper id="indexId434909-250"></fo:wrapper>This function is typically used to do file locking
and other file-oriented stuff, but it also has a couple socket-related
functions that you might see or use from time to time.</fo:block>


<fo:block>Parameter <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">s</fo:inline> is the socket descriptor you wish to operate
on, <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">cmd</fo:inline> should be set to <fo:wrapper id="indexId434909-251"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">F_SETFL</fo:inline>, and <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">arg</fo:inline> can be one of
the following commands.  (Like I said, there's more to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">fcntl()</fo:inline> than I'm letting on here, but I'm trying to stay
socket-oriented.)</fo:block>


<fo:block><fo:table width="100%" space-before="0.5em" space-after="0.5em" table-layout="fixed">
<fo:table-column column-width="0%" column-number="1"/>
<fo:table-column column-width="100%" column-number="2"/>
<fo:table-body start-indent="0pt" text-align="start">
<fo:table-row>
<fo:table-cell column-number="1">
<fo:block/>
</fo:table-cell>
<fo:table-cell column-number="2">
<fo:table width="100%" table-layout="fixed" space-before="0.5em" space-after="0.5em" text-indent="0pt" border-style="solid" border-width="thin">
	<fo:table-column column-width="20%" column-number="1" />
	<fo:table-column column-width="73%" column-number="2" />
	<fo:table-body start-indent="0pt" text-align="start">

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-252"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">O_NONBLOCK</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Set the socket to be non-blocking.  See the section on
<fo:basic-link internal-destination="blocking">blocking</fo:basic-link> for more details.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-253"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">O_ASYNC</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Set the socket to do asynchronous I/O.  When data is
ready to be <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>'d on the socket, the signal <fo:wrapper id="indexId434909-254"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SIGIO</fo:inline> will be raised.  This is rare to see,
and beyond the scope of the guide.  And I think it's only available on
certain systems.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


	</fo:table-body>
</fo:table>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block>Returns zero on success, or <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error (and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">errno</fo:inline> will be set accordingly.)</fo:block>


<fo:block>Different uses of the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">fcntl()</fo:inline> system call actually have
different return values, but I haven't covered them here because they're
not socket-related.  See your local <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">fcntl()</fo:inline> man page for
more information.</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >int s = socket(PF_INET, SOCK_STREAM, 0);

fcntl(s, F_SETFL, O_NONBLOCK);  // set to non-blocking
fcntl(s, F_SETFL, O_ASYNC);     // set to asynchronous I/O</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="blocking">Blocking</fo:basic-link>,
<fo:basic-link internal-destination="sendman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline></fo:basic-link></fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="htonsman">9.12. <fo:inline font-family="Liberation Mono" font-weight="bold">htons()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold">htonl()</fo:inline>,
<fo:inline font-family="Liberation Mono" font-weight="bold">ntohs()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold">ntohl()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>


<fo:block text-indent="0pt"><fo:block>Convert multi-byte integer types from host byte order to
network byte order</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;netinet/in.h&gt;

uint32_t htonl(uint32_t <fo:inline font-family="Liberation Mono" font-style="oblique">hostlong</fo:inline>);
uint16_t htons(uint16_t <fo:inline font-family="Liberation Mono" font-style="oblique">hostshort</fo:inline>);
uint32_t ntohl(uint32_t <fo:inline font-family="Liberation Mono" font-style="oblique">netlong</fo:inline>);
uint16_t ntohs(uint16_t <fo:inline font-family="Liberation Mono" font-style="oblique">netshort</fo:inline>);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block><fo:wrapper id="indexId434909-255"></fo:wrapper><fo:wrapper id="indexId434909-256"></fo:wrapper><fo:wrapper id="indexId434909-257"></fo:wrapper><fo:wrapper id="indexId434909-258"></fo:wrapper>Just to make you really unhappy, different computers use
different byte orderings internally for their multibyte integers (i.e.
any integer that's larger than a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">char</fo:inline>.)  The upshot of
this is that if you <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> a two-byte <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">short
int</fo:inline> from an Intel box to a Mac (before they became Intel boxes,
too, I mean), what one computer thinks is the number <fo:inline font-family="Liberation Mono" font-size="0.900000em">1</fo:inline>,
the other will think is the number <fo:inline font-family="Liberation Mono" font-size="0.900000em">256</fo:inline>, and
vice-versa.</fo:block>


<fo:block><fo:wrapper id="indexId434909-259"></fo:wrapper>The way to get around this problem is for
everyone to put aside their differences and agree that Motorola and IBM
had it right, and Intel did it the weird way, and so we all convert our
byte orderings to &#x201C;big-endian&#x201D; before sending them out.  Since Intel is
a &#x201C;little-endian&#x201D; machine, it's far more politically correct to call our
preferred byte ordering &#x201C;Network Byte Order&#x201D;.  So these functions
convert from your native byte order to network byte order and back
again.</fo:block>


<fo:block>(This means on Intel these functions swap all the bytes around, and
on PowerPC they do nothing because the bytes are already in Network
Byte Order.  But you should always use them in your code anyway, since
someone might want to build it on an Intel machine and still have things
work properly.)</fo:block>


<fo:block>Note that the types involved are 32-bit (4 byte, probably
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">int</fo:inline>) and 16-bit (2 byte, very likely <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">short</fo:inline>)
numbers.  64-bit machines might have a <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">htonll()</fo:inline> for 64-bit
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">int</fo:inline>s, but I've not seen it.  You'll just have to write your
own.</fo:block>


<fo:block>Anyway, the way these functions work is that you first decide if
you're converting <fo:inline font-style="italic">from</fo:inline> host (your machine's) byte order or
from network byte order.  If &#x201C;host&#x201D;, the the first letter of the
function you're going to call is &#x201C;h&#x201D;.  Otherwise it's &#x201C;n&#x201D; for &#x201C;network&#x201D;.
The middle of the function name is always &#x201C;to&#x201D; because you're converting
from one &#x201C;to&#x201D; another, and the penultimate letter shows what you're converting
<fo:inline font-style="italic">to</fo:inline>.  The last letter is the size of the data, &#x201C;s&#x201D; for short,
or &#x201C;l&#x201D; for long.  Thus:</fo:block>


<fo:block>
<fo:table width="100%" space-before="0.5em" space-after="0.5em" table-layout="fixed">
<fo:table-column column-width="20%" column-number="1"/>
<fo:table-column column-width="60%" column-number="2"/>
<fo:table-body start-indent="0pt" text-align="start">
<fo:table-row>
<fo:table-cell column-number="1">
<fo:block/>
</fo:table-cell>
<fo:table-cell column-number="2">
<fo:table width="100%" table-layout="fixed" space-before="0.5em" space-after="0.5em" text-indent="0pt" border-style="solid" border-width="thin">
	<fo:table-column column-width="20%" column-number="1" />
	<fo:table-column column-width="78%" column-number="2" />
	<fo:table-body start-indent="0pt" text-align="start">

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-260"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">htons()</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>
			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">h</fo:inline>ost <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">to</fo:inline> <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">n</fo:inline>etwork <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">s</fo:inline>hort</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-261"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">htonl()</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>
			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">h</fo:inline>ost <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">to</fo:inline> <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">n</fo:inline>etwork <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">l</fo:inline>ong</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-262"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">ntohs()</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>
			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">n</fo:inline>etwork <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">to</fo:inline> <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">h</fo:inline>ost <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">s</fo:inline>hort</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-263"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">ntohl()</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>
			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">n</fo:inline>etwork <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">to</fo:inline> <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">h</fo:inline>ost <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">l</fo:inline>ong</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>

	</fo:table-body>
</fo:table>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>

</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block>Each function returns the converted value.</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >uint32_t some_long = 10;
uint16_t some_short = 20;

uint32_t network_byte_order;

// convert and send
network_byte_order = htonl(some_long);
send(s, &amp;network_byte_order, sizeof(uint32_t), 0);

some_short == ntohs(htons(some_short)); // this expression is true</fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="inet_ntoaman">9.13. <fo:inline font-family="Liberation Mono" font-weight="bold">inet_ntoa()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold">inet_aton()</fo:inline>,
<fo:inline font-family="Liberation Mono" font-weight="bold">inet_addr</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Convert IP addresses from a dots-and-number string to a
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in_addr</fo:inline> and back</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;

// ALL THESE ARE DEPRECATED!  Use inet_pton()  or inet_ntop() instead!!

char *inet_ntoa(struct in_addr <fo:inline font-family="Liberation Mono" font-style="oblique">in</fo:inline>);
int inet_aton(const char *<fo:inline font-family="Liberation Mono" font-style="oblique">cp</fo:inline>, struct in_addr *<fo:inline font-family="Liberation Mono" font-style="oblique">inp</fo:inline>);
in_addr_t inet_addr(const char *<fo:inline font-family="Liberation Mono" font-style="oblique">cp</fo:inline>);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block><fo:inline font-style="italic">These functions are deprecated because they don't handle IPv6!
Use <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_ntop()</fo:inline> or <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_pton()</fo:inline> instead!  They
are included here because they can still be found in the wild.</fo:inline></fo:block>


<fo:block><fo:wrapper id="indexId434909-264"></fo:wrapper><fo:wrapper id="indexId434909-265"></fo:wrapper><fo:wrapper id="indexId434909-266"></fo:wrapper>
All of these functions convert from a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in_addr</fo:inline> (part
of your <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in</fo:inline>, most likely) to a string in
dots-and-numbers format (e.g. &#x201C;192.168.5.10&#x201D;) and vice-versa.  If you
have an IP address passed on the command line or something, this is the
easiest way to get a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in_addr</fo:inline> to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline> to, or whatever.  If you need more power, try
some of the DNS functions like <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyname()</fo:inline> or attempt a
<fo:inline font-style="italic">coup d'État</fo:inline> in your local country.</fo:block>


<fo:block>The function <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_ntoa()</fo:inline> converts a network address in a
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in_addr</fo:inline> to a dots-and-numbers format string.  The
&#x201C;n&#x201D; in &#x201C;ntoa&#x201D; stands for network, and the &#x201C;a&#x201D; stands for ASCII for
historical reasons (so it's &#x201C;Network To ASCII&#x201D;—the &#x201C;toa&#x201D; suffix
has an analogous friend in the C library called <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">atoi()</fo:inline>
which converts an ASCII string to an integer.)</fo:block>


<fo:block>The function <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_aton()</fo:inline> is the opposite, converting
from a dots-and-numbers string into a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">in_addr_t</fo:inline> (which is
the type of the field <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">s_addr</fo:inline> in your <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
in_addr</fo:inline>.)</fo:block>


<fo:block>Finally, the function <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_addr()</fo:inline> is an older function
that does basically the same thing as <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_aton()</fo:inline>.  It's
theoretically deprecated, but you'll see it a lot and the police won't
come get you if you use it.</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_aton()</fo:inline> returns non-zero if the address is a valid
one, and it returns zero if the address is invalid.</fo:block>


<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_ntoa()</fo:inline> returns the dots-and-numbers string in a
static buffer that is overwritten with each call to the function.</fo:block>


<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_addr()</fo:inline> returns the address as an
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">in_addr_t</fo:inline>, or <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> if there's an error.  (That
is the same result as if you tried to convert the string <fo:wrapper id="indexId434909-267"></fo:wrapper>&#x201C;255.255.255.255&#x201D;, which is a valid IP address.
This is why <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_aton()</fo:inline> is better.)</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >struct sockaddr_in antelope;
char *some_addr;

inet_aton("10.0.0.1", &amp;antelope.sin_addr); // store IP in antelope

some_addr = inet_ntoa(antelope.sin_addr); // return the IP
printf("%s\n", some_addr); // prints "10.0.0.1"

// and this call is the same as the inet_aton() call, above:
antelope.sin_addr.s_addr = inet_addr("10.0.0.1");</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="inet_ntopman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_ntop()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="inet_ntopman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_pton()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="gethostbynameman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyname()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="gethostbynameman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyaddr()</fo:inline></fo:basic-link></fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="inet_ntopman">9.14. <fo:inline font-family="Liberation Mono" font-weight="bold">inet_ntop()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold">inet_pton()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Convert IP addresses to human-readable form and
back.</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;arpa/inet.h&gt;

const char *inet_ntop(int af, const void *src,
                      char *dst, socklen_t size);

int inet_pton(int af, const char *src, void *dst);</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block>These functions are for dealing with human-readable IP addresses and
converting them to their binary representation for use with various
functions and system calls.  The &#x201C;n&#x201D; stands for &#x201C;network&#x201D;, and &#x201C;p&#x201D; for
&#x201C;presentation&#x201D;.  Or &#x201C;text presentation&#x201D;.  But you can think of it as
&#x201C;printable&#x201D;.  &#x201C;ntop&#x201D; is &#x201C;network to printable&#x201D;.  See?</fo:block>


<fo:block>Sometimes you don't want to look at a pile of binary numbers when
looking at an IP address.  You want it in a nice printable form, like
<fo:inline font-family="Liberation Mono" font-size="0.900000em">192.0.2.180</fo:inline>, or <fo:inline font-family="Liberation Mono" font-size="0.900000em">2001:db8:8714:3a90::12</fo:inline>.  In that case,
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_ntop()</fo:inline> is for you.</fo:block>


<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_ntop()</fo:inline> takes the address family in the
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">af</fo:inline> parameter (either <fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET</fo:inline> or
<fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET6</fo:inline>).  The <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">src</fo:inline> parameter should be a
pointer to either a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in_addr</fo:inline> or <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
in6_addr</fo:inline> containing the address you wish to convert to a string.
Finally <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">dst</fo:inline> and <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">size</fo:inline> are the pointer to
the destination string and the maximum length of that string.</fo:block>


<fo:block>What should the maximum length of the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">dst</fo:inline> string be?
What is the maximum length for IPv4 and IPv6 addresses?  Fortunately
there are a couple of macros to help you out.  The maximum lengths are:
<fo:inline font-family="Liberation Mono" font-size="0.900000em">INET_ADDRSTRLEN</fo:inline> and <fo:inline font-family="Liberation Mono" font-size="0.900000em">INET6_ADDRSTRLEN</fo:inline>.</fo:block>


<fo:block>Other times, you might have a string containing an IP address in
readable form, and you want to pack it into a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr_in</fo:inline> or a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in6</fo:inline>.  In that case,
the opposite funcion <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_pton()</fo:inline> is what you're after.</fo:block>


<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_pton()</fo:inline> also takes an address family (either
<fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET</fo:inline> or <fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET6</fo:inline>) in the
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">af</fo:inline> parameter.  The <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">src</fo:inline> parameter is a
pointer to a string containing the IP address in printable form.  Lastly
the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">dst</fo:inline> parameter points to where the result should be
stored, which is probably a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in_addr</fo:inline> or <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
in6_addr</fo:inline>.</fo:block>


<fo:block>These functions don't do DNS lookups—you'll need
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddinfo()</fo:inline> for that.</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_ntop()</fo:inline> returns the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">dst</fo:inline> parameter on
success, or <fo:inline font-family="Liberation Mono" font-size="0.900000em">NULL</fo:inline> on failure (and <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> is
set).</fo:block>


<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_pton()</fo:inline> returns <fo:inline font-family="Liberation Mono" font-size="0.900000em">1</fo:inline> on success.  It
returns <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> if there was an error (<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> is
set), or <fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline> if the input isn't a valid IP address.</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >// IPv4 demo of inet_ntop() and inet_pton()

struct sockaddr_in sa;
char str[INET_ADDRSTRLEN];

// store this IP address in sa:
inet_pton(AF_INET, "192.0.2.33", &amp;(sa.sin_addr));

// now get it back and print it
inet_ntop(AF_INET, &amp;(sa.sin_addr), str, INET_ADDRSTRLEN);

printf("%s\n", str); // prints "192.0.2.33"</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >// IPv6 demo of inet_ntop() and inet_pton()
// (basically the same except with a bunch of 6s thrown around)

struct sockaddr_in6 sa;
char str[INET6_ADDRSTRLEN];

// store this IP address in sa:
inet_pton(AF_INET6, "2001:db8:8714:3a90::12", &amp;(sa.sin6_addr));

// now get it back and print it
inet_ntop(AF_INET6, &amp;(sa.sin6_addr), str, INET6_ADDRSTRLEN);

printf("%s\n", str); // prints "2001:db8:8714:3a90::12"</fo:block>
<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >// Helper function you can use:

//Convert a struct sockaddr address to a string, IPv4 and IPv6:

char *get_ip_str(const struct sockaddr *sa, char *s, size_t maxlen)
{
    switch(sa-&gt;sa_family) {
        case AF_INET:
            inet_ntop(AF_INET, &amp;(((struct sockaddr_in *)sa)-&gt;sin_addr),
                    s, maxlen);
            break;

        case AF_INET6:
            inet_ntop(AF_INET6, &amp;(((struct sockaddr_in6 *)sa)-&gt;sin6_addr),
                    s, maxlen);
            break;

        default:
            strncpy(s, "Unknown AF", maxlen);
            return NULL;
    }

    return s;
}</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="getaddrinfoman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline></fo:basic-link></fo:block>



</fo:block>




<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="listenman">9.15. <fo:inline font-family="Liberation Mono" font-weight="bold">listen()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Tell a socket to listen for incoming connections</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/socket.h&gt;

int listen(int <fo:inline font-family="Liberation Mono" font-style="oblique">s</fo:inline>, int <fo:inline font-family="Liberation Mono" font-style="oblique">backlog</fo:inline>);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block><fo:wrapper id="indexId434909-268"></fo:wrapper>You can take your socket descriptor (made with
the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline> system call) and tell it to listen for
incoming connections.  This is what differentiates the servers from the
clients, guys.</fo:block>


<fo:block>The <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">backlog</fo:inline> parameter can mean a couple different things
depending on the system you on, but loosely it is how many pending
connections you can have before the kernel starts rejecting new ones.
So as the new connections come in, you should be quick to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline> them so that the backlog doesn't fill.  Try
setting it to 10 or so, and if your clients start getting &#x201C;Connection
refused&#x201D; under heavy load, set it higher.</fo:block>


<fo:block>Before calling <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">listen()</fo:inline>, your server should call
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline> to attach itself to a specific port number.  That
port number (on the server's IP address) will be the one that clients
connect to.</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block>Returns zero on success, or <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error (and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">errno</fo:inline> will be set accordingly.)</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >struct addrinfo hints, *res;
int sockfd;

// first, load up address structs with getaddrinfo():

memset(&amp;hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC;  // use IPv4 or IPv6, whichever
hints.ai_socktype = SOCK_STREAM;
hints.ai_flags = AI_PASSIVE;     // fill in my IP for me

getaddrinfo(NULL, "3490", &amp;hints, &amp;res);

// make a socket:

sockfd = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol);

// bind it to the port we passed in to getaddrinfo():

bind(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);

listen(sockfd, 10); // set s up to be a server (listening) socket

// then have an accept() loop down here somewhere</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="acceptman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="bindman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="socketman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline></fo:basic-link></fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="perrorman">9.16. <fo:inline font-family="Liberation Mono" font-weight="bold">perror()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold">strerror()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Print an error as a human-readable string</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;stdio.h&gt;
#include &lt;string.h&gt;   // for strerror()

void perror(const char *<fo:inline font-family="Liberation Mono" font-style="oblique">s</fo:inline>);
char *strerror(int <fo:inline font-family="Liberation Mono" font-style="oblique">errnum</fo:inline>);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>


<fo:block><fo:wrapper id="indexId434909-269"></fo:wrapper><fo:wrapper id="indexId434909-270"></fo:wrapper>Since so many functions
return <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error and set the value of the variable <fo:wrapper id="indexId434909-271"></fo:wrapper><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> to be some number, it would sure be nice
if you could easily print that in a form that made sense to you.</fo:block>


<fo:block>Mercifully, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">perror()</fo:inline> does that.  If you want more
description to be printed before the error, you can point the parameter
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">s</fo:inline> to it (or you can leave <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">s</fo:inline> as <fo:inline font-family="Liberation Mono" font-size="0.900000em">NULL</fo:inline>
and nothing additional will be printed.)</fo:block>


<fo:block>In a nutshell, this function takes <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline> values, like
<fo:inline font-family="Liberation Mono" font-size="0.900000em">ECONNRESET</fo:inline>, and prints them nicely, like &#x201C;Connection
reset by peer.&#x201D;</fo:block>


<fo:block>The function <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">strerror()</fo:inline> is very similar to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">perror()</fo:inline>, except it returns a pointer to the error message
string for a given value (you usually pass in the variable
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline>.)</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">strerror()</fo:inline> returns a pointer to the error message
string.</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >int s;

s = socket(PF_INET, SOCK_STREAM, 0);

if (s == -1) { // some error has occurred
    // prints "socket error: " + the error message:
    perror("socket error");
}

// similarly:
if (listen(s, 10) == -1) {
    // this prints "an error: " + the error message from errno:
    printf("an error: %s\n", strerror(errno));
}</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="errnoman"><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline></fo:basic-link></fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="pollman">9.17. <fo:inline font-family="Liberation Mono" font-weight="bold">poll()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Test for events on multiple sockets simultaneously</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/poll.h&gt;

int poll(struct pollfd *<fo:inline font-family="Liberation Mono" font-style="oblique">ufds</fo:inline>, unsigned int <fo:inline font-family="Liberation Mono" font-style="oblique">nfds</fo:inline>, int <fo:inline font-family="Liberation Mono" font-style="oblique">timeout</fo:inline>);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block><fo:wrapper id="indexId434909-272"></fo:wrapper>This function is very similar to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline> in that they both watch sets of file descriptors
for events, such as incoming data ready to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>, socket
ready to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> data to, out-of-band data ready to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>, errors, etc.</fo:block>


<fo:block>The basic idea is that you pass an array of <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">nfds</fo:inline>
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct pollfd</fo:inline>s in <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">ufds</fo:inline>, along with a timeout in
milliseconds (1000 milliseconds in a second.)  The <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">timeout</fo:inline>
can be negative if you want to wait forever.  If no event happens on any
of the socket descriptors by the timeout, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">poll()</fo:inline> will
return.</fo:block>


<fo:block>Each element in the array of <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct pollfd</fo:inline>s represents
one socket descriptor, and contains the following fields:</fo:block>


<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" ><fo:wrapper id="indexId434909-273"></fo:wrapper>struct pollfd {
    int fd;         // the socket descriptor
    short events;   // bitmap of events we're interested in
    short revents;  // when poll() returns, bitmap of events that occurred
};</fo:block>

<fo:block>Before calling <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">poll()</fo:inline>, load <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">fd</fo:inline> with the
socket descriptor (if you set <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">fd</fo:inline> to a negative number, this
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct pollfd</fo:inline> is ignored and its <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">revents</fo:inline> field
is set to zero) and then construct the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">events</fo:inline> field by
bitwise-ORing the following macros:</fo:block>


<fo:block><fo:table width="100%" space-before="0.5em" space-after="0.5em" table-layout="fixed">
<fo:table-column column-width="0%" column-number="1"/>
<fo:table-column column-width="100%" column-number="2"/>
<fo:table-body start-indent="0pt" text-align="start">
<fo:table-row>
<fo:table-cell column-number="1">
<fo:block/>
</fo:table-cell>
<fo:table-cell column-number="2">
<fo:table width="100%" table-layout="fixed" space-before="0.5em" space-after="0.5em" text-indent="0pt" border-style="solid" border-width="thin">
	<fo:table-column column-width="25%" column-number="1" />
	<fo:table-column column-width="73%" column-number="2" />
	<fo:table-body start-indent="0pt" text-align="start">

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">POLLIN</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Alert me when data is ready to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> on this socket.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">POLLOUT</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Alert me when I can <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> data to this
socket without blocking.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">POLLPRI</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Alert me when out-of-band data is ready to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> on this socket.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>

	</fo:table-body>
</fo:table>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>


<fo:block>Once the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">poll()</fo:inline> call returns, the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">revents</fo:inline>
field will be constructed as a bitwise-OR of the above fields, telling
you which descriptors actually have had that event occur.  Additionally,
these other fields might be present:</fo:block>


<fo:block><fo:table width="100%" space-before="0.5em" space-after="0.5em" table-layout="fixed">
<fo:table-column column-width="0%" column-number="1"/>
<fo:table-column column-width="100%" column-number="2"/>
<fo:table-body start-indent="0pt" text-align="start">
<fo:table-row>
<fo:table-cell column-number="1">
<fo:block/>
</fo:table-cell>
<fo:table-cell column-number="2">
<fo:table width="100%" table-layout="fixed" space-before="0.5em" space-after="0.5em" text-indent="0pt" border-style="solid" border-width="thin">
	<fo:table-column column-width="25%" column-number="1" />
	<fo:table-column column-width="73%" column-number="2" />
	<fo:table-body start-indent="0pt" text-align="start">

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">POLLERR</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">An error has occurred on this socket.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">POLLHUP</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">The remote side of the connection hung up.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">POLLNVAL</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Something was wrong with the socket descriptor
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">fd</fo:inline>—maybe it's uninitialized?</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>

	</fo:table-body>
</fo:table>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block>Returns the number of elements in the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">ufds</fo:inline> array that have
had event occur on them; this can be zero if the timeout occurred.  Also
returns <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error (and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">errno</fo:inline> will be set
accordingly.)</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >int s1, s2;
int rv;
char buf1[256], buf2[256];
struct pollfd ufds[2];

s1 = socket(PF_INET, SOCK_STREAM, 0);
s2 = socket(PF_INET, SOCK_STREAM, 0);

// pretend we've connected both to a server at this point
//connect(s1, ...)...
//connect(s2, ...)...

// set up the array of file descriptors.
//
// in this example, we want to know when there's normal or out-of-band
// data ready to be recv()'d...

ufds[0].fd = s1;
ufds[0].events = POLLIN | POLLPRI; // check for normal or out-of-band

ufds[1] = s2;
ufds[1].events = POLLIN; // check for just normal data

// wait for events on the sockets, 3.5 second timeout
rv = poll(ufds, 2, 3500);

if (rv == -1) {
    perror("poll"); // error occurred in poll()
} else if (rv == 0) {
    printf("Timeout occurred!  No data after 3.5 seconds.\n");
} else {
    // check for events on s1:
    if (ufds[0].revents &amp; POLLIN) {
        recv(s1, buf1, sizeof buf1, 0); // receive normal data
    }
    if (ufds[0].revents &amp; POLLPRI) {
        recv(s1, buf1, sizeof buf1, MSG_OOB); // out-of-band data
    }

    // check for events on s2:
    if (ufds[1].revents &amp; POLLIN) {
        recv(s1, buf2, sizeof buf2, 0);
    }
}</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="selectman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline></fo:basic-link></fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="recvman">9.18. <fo:inline font-family="Liberation Mono" font-weight="bold">recv()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold">recvfrom()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Receive data on a socket</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

ssize_t recv(int s, void *<fo:inline font-family="Liberation Mono" font-style="oblique">buf</fo:inline>, size_t <fo:inline font-family="Liberation Mono" font-style="oblique">len</fo:inline>, int <fo:inline font-family="Liberation Mono" font-style="oblique">flags</fo:inline>);
ssize_t recvfrom(int <fo:inline font-family="Liberation Mono" font-style="oblique">s</fo:inline>, void *<fo:inline font-family="Liberation Mono" font-style="oblique">buf</fo:inline>, size_t <fo:inline font-family="Liberation Mono" font-style="oblique">len</fo:inline>, int <fo:inline font-family="Liberation Mono" font-style="oblique">flags</fo:inline>,
                 struct sockaddr *<fo:inline font-family="Liberation Mono" font-style="oblique">from</fo:inline>, socklen_t *<fo:inline font-family="Liberation Mono" font-style="oblique">fromlen</fo:inline>);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block><fo:wrapper id="indexId434909-274"></fo:wrapper><fo:wrapper id="indexId434909-275"></fo:wrapper>Once you have a socket up and
connected, you can read incoming data from the remote side using the
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> (for TCP <fo:wrapper id="indexId434909-276"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_STREAM</fo:inline> sockets) and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline> (for UDP <fo:wrapper id="indexId434909-277"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_DGRAM</fo:inline> sockets).</fo:block>


<fo:block>Both functions take the socket descriptor <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">s</fo:inline>, a pointer to
the buffer <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">buf</fo:inline>, the size (in bytes) of the buffer
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">len</fo:inline>, and a set of <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">flags</fo:inline> that control how the
functions work.</fo:block>


<fo:block>Additionally, the <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline> takes a
<fo:wrapper id="indexId434909-278"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr*</fo:inline>,
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">from</fo:inline> that will tell you where the data came from, and will
fill in <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">fromlen</fo:inline> with the size of <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr</fo:inline>.  (You must also initialize <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">fromlen</fo:inline> to be the
size of <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">from</fo:inline> or <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline>.)</fo:block>


<fo:block>So what wondrous flags can you pass into this function?  Here are
some of them, but you should check your local man pages for more
information and what is actually supported on your system.  You
bitwise-or these together, or just set <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">flags</fo:inline> to
<fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline> if you want it to be a regular vanilla
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>.</fo:block>


<fo:block><fo:table width="100%" space-before="0.5em" space-after="0.5em" table-layout="fixed">
<fo:table-column column-width="0%" column-number="1"/>
<fo:table-column column-width="100%" column-number="2"/>
<fo:table-body start-indent="0pt" text-align="start">
<fo:table-row>
<fo:table-cell column-number="1">
<fo:block/>
</fo:table-cell>
<fo:table-cell column-number="2">
<fo:table width="100%" table-layout="fixed" space-before="0.5em" space-after="0.5em" text-indent="0pt" border-style="solid" border-width="thin">
	<fo:table-column column-width="30%" column-number="1" />
	<fo:table-column column-width="68%" column-number="2" />
	<fo:table-body start-indent="0pt" text-align="start">

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-279"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">MSG_OOB</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-280"></fo:wrapper>Receive Out of Band data.
This is how to get data that has been sent to you with the
<fo:inline font-family="Liberation Mono" font-size="0.900000em">MSG_OOB</fo:inline> flag in <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline>.  As the receiving
side, you will have had signal <fo:wrapper id="indexId434909-281"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SIGURG</fo:inline>
raised telling you there is urgent data.  In your handler for that
signal, you could call <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> with this
<fo:inline font-family="Liberation Mono" font-size="0.900000em">MSG_OOB</fo:inline> flag.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-282"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">MSG_PEEK</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">If you want to call <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> &#x201C;just for
pretend&#x201D;, you can call it with this flag.  This will tell you what's
waiting in the buffer for when you call <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> &#x201C;for real&#x201D;
(i.e. <fo:inline font-style="italic">without</fo:inline> the <fo:inline font-family="Liberation Mono" font-size="0.900000em">MSG_PEEK</fo:inline> flag.  It's like a
sneak preview into the next <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> call.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-283"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">MSG_WAITALL</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Tell <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> to not return until all the data
you specified in the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">len</fo:inline> parameter.  It will ignore your
wishes in extreme circumstances, however, like if a signal interrupts
the call or if some error occurs or if the remote side closes the
connection, etc.  Don't be mad with it.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


	</fo:table-body>
</fo:table>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>


<fo:block>When you call <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>, it will block until there is some
data to read.  If you want to not block, set the socket to non-blocking
or check with <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline> or <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">poll()</fo:inline> to see if
there is incoming data before calling <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> or
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline>.</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block>Returns the number of bytes actually received (which might be less
than you requested in the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">len</fo:inline> parameter), or <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline>
on error (and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">errno</fo:inline> will be set accordingly.)</fo:block>


<fo:block>If the remote side has closed the connection, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>
will return <fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline>.  This is the normal method for determining
if the remote side has closed the connection.  Normality is good,
rebel!</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >// stream sockets and recv()

struct addrinfo hints, *res;
int sockfd;
char buf[512];
int byte_count;

// get host info, make socket, and connect it
memset(&amp;hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC;  // use IPv4 or IPv6, whichever
hints.ai_socktype = SOCK_STREAM;
getaddrinfo("www.example.com", "3490", &amp;hints, &amp;res);
sockfd = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol);
connect(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);

// all right!  now that we're connected, we can receive some data!
byte_count = recv(sockfd, buf, sizeof buf, 0);
printf("recv()'d %d bytes of data in buf\n", byte_count);
</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >// datagram sockets and recvfrom()

struct addrinfo hints, *res;
int sockfd;
int byte_count;
socklen_t fromlen;
struct sockaddr_storage addr;
char buf[512];
char ipstr[INET6_ADDRSTRLEN];

// get host info, make socket, bind it to port 4950
memset(&amp;hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC;  // use IPv4 or IPv6, whichever
hints.ai_socktype = SOCK_DGRAM;
hints.ai_flags = AI_PASSIVE;
getaddrinfo(NULL, "4950", &amp;hints, &amp;res);
sockfd = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol);
bind(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);

// no need to accept(), just recvfrom():

fromlen = sizeof addr;
byte_count = recvfrom(sockfd, buf, sizeof buf, 0, &amp;addr, &amp;fromlen);

printf("recv()'d %d bytes of data in buf\n", byte_count);
printf("from IP address %s\n",
    inet_ntop(addr.ss_family,
        addr.ss_family == AF_INET?
            ((struct sockadd_in *)&amp;addr)-&gt;sin_addr:
            ((struct sockadd_in6 *)&amp;addr)-&gt;sin6_addr,
        ipstr, sizeof ipstr);

</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="sendman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="sendman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendto()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="selectman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="pollman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">poll()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="blocking">Blocking</fo:basic-link></fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="selectman">9.19. <fo:inline font-family="Liberation Mono" font-weight="bold">select()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Check if sockets descriptors are ready to read/write</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/select.h&gt;

int select(int <fo:inline font-family="Liberation Mono" font-style="oblique">n</fo:inline>, fd_set *<fo:inline font-family="Liberation Mono" font-style="oblique">readfds</fo:inline>, fd_set *<fo:inline font-family="Liberation Mono" font-style="oblique">writefds</fo:inline>, fd_set *<fo:inline font-family="Liberation Mono" font-style="oblique">exceptfds</fo:inline>,
           struct timeval *<fo:inline font-family="Liberation Mono" font-style="oblique">timeout</fo:inline>);

FD_SET(int <fo:inline font-family="Liberation Mono" font-style="oblique">fd</fo:inline>, fd_set *<fo:inline font-family="Liberation Mono" font-style="oblique">set</fo:inline>);
FD_CLR(int <fo:inline font-family="Liberation Mono" font-style="oblique">fd</fo:inline>, fd_set *<fo:inline font-family="Liberation Mono" font-style="oblique">set</fo:inline>);
FD_ISSET(int <fo:inline font-family="Liberation Mono" font-style="oblique">fd</fo:inline>, fd_set *<fo:inline font-family="Liberation Mono" font-style="oblique">set</fo:inline>);
FD_ZERO(fd_set *<fo:inline font-family="Liberation Mono" font-style="oblique">set</fo:inline>);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block><fo:wrapper id="indexId434909-284"></fo:wrapper>The <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline> function gives you a
way to simultaneously check multiple sockets to see if they have data
waiting to be <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>d, or if you can <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline>
data to them without blocking, or if some exception has occurred.</fo:block>


<fo:block>You populate your sets of socket descriptors using the macros, like
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">FD_SET()</fo:inline>, above.  Once you have the set, you pass it into
the function as one of the following parameters: <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">readfds</fo:inline> if
you want to know when any of the sockets in the set is ready to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> data, <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">writefds</fo:inline> if any of the sockets is
ready to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> data to, and/or <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">exceptfds</fo:inline> if you
need to know when an exception (error) occurs on any of the sockets.
Any or all of these parameters can be <fo:inline font-family="Liberation Mono" font-size="0.900000em">NULL</fo:inline> if you're not
interested in those types of events.  After <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline>
returns, the values in the sets will be changed to show which are ready
for reading or writing, and which have exceptions.</fo:block>


<fo:block>The first parameter, <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">n</fo:inline> is the highest-numbered socket
descriptor (they're just <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">int</fo:inline>s, remember?) plus one.</fo:block>


<fo:block>Lastly, the <fo:wrapper id="indexId434909-285"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct timeval</fo:inline>,
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">timeout</fo:inline>, at the end—this lets you tell
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline> how long to check these sets for.  It'll return
after the timeout, or when an event occurs, whichever is first.  The
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct timeval</fo:inline> has two fields: <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">tv_sec</fo:inline> is the
number of seconds, to which is added <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">tv_usec</fo:inline>, the number of
microseconds (1,000,000 microseconds in a second.)</fo:block>


<fo:block>The helper macros do the following:</fo:block>


<fo:block><fo:table width="100%" space-before="0.5em" space-after="0.5em" table-layout="fixed">
<fo:table-column column-width="0%" column-number="1"/>
<fo:table-column column-width="100%" column-number="2"/>
<fo:table-body start-indent="0pt" text-align="start">
<fo:table-row>
<fo:table-cell column-number="1">
<fo:block/>
</fo:table-cell>
<fo:table-cell column-number="2">
<fo:table width="100%" table-layout="fixed" space-before="0.5em" space-after="0.5em" text-indent="0pt" border-style="solid" border-width="thin">
	<fo:table-column column-width="50%" column-number="1" />
	<fo:table-column column-width="48%" column-number="2" />
	<fo:table-body start-indent="0pt" text-align="start">

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-286"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">FD_SET(int fd, fd_set *set);</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Add <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">fd</fo:inline> to the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">set</fo:inline>.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-287"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">FD_CLR(int fd, fd_set *set);</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Remove <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">fd</fo:inline> from the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">set</fo:inline>.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-288"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">FD_ISSET(int fd, fd_set *set);</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Return true if <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">fd</fo:inline> is in the
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">set</fo:inline>.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-289"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">FD_ZERO(fd_set *set);</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Clear all entries from the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">set</fo:inline>.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>

	</fo:table-body>
</fo:table>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block>Returns the number of descriptors in the set on success,
<fo:inline font-family="Liberation Mono" font-size="0.900000em">0</fo:inline> if the timeout was reached, or <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on
error (and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">errno</fo:inline> will be set accordingly.)  Also, the sets
are modified to show which sockets are ready.</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >int s1, s2, n;
fd_set readfds;
struct timeval tv;
char buf1[256], buf2[256];

// pretend we've connected both to a server at this point
//s1 = socket(...);
//s2 = socket(...);
//connect(s1, ...)...
//connect(s2, ...)...

// clear the set ahead of time
FD_ZERO(&amp;readfds);

// add our descriptors to the set
FD_SET(s1, &amp;readfds);
FD_SET(s2, &amp;readfds);

// since we got s2 second, it's the "greater", so we use that for
// the n param in select()
n = s2 + 1;

// wait until either socket has data ready to be recv()d (timeout 10.5 secs)
tv.tv_sec = 10;
tv.tv_usec = 500000;
rv = select(n, &amp;readfds, NULL, NULL, &amp;tv);

if (rv == -1) {
    perror("select"); // error occurred in select()
} else if (rv == 0) {
    printf("Timeout occurred!  No data after 10.5 seconds.\n");
} else {
    // one or both of the descriptors have data
    if (FD_ISSET(s1, &amp;readfds)) {
        recv(s1, buf1, sizeof buf1, 0);
    }
    if (FD_ISSET(s2, &amp;readfds)) {
        recv(s1, buf2, sizeof buf2, 0);
    }
}</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="pollman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">poll()</fo:inline></fo:basic-link></fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="setsockoptman">9.20. <fo:inline font-family="Liberation Mono" font-weight="bold">setsockopt()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold">getsockopt()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Set various options for a socket</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int getsockopt(int <fo:inline font-family="Liberation Mono" font-style="oblique">s</fo:inline>, int <fo:inline font-family="Liberation Mono" font-style="oblique">level</fo:inline>, int <fo:inline font-family="Liberation Mono" font-style="oblique">optname</fo:inline>, void *<fo:inline font-family="Liberation Mono" font-style="oblique">optval</fo:inline>,
               socklen_t *<fo:inline font-family="Liberation Mono" font-style="oblique">optlen</fo:inline>);
int setsockopt(int <fo:inline font-family="Liberation Mono" font-style="oblique">s</fo:inline>, int <fo:inline font-family="Liberation Mono" font-style="oblique">level</fo:inline>, int <fo:inline font-family="Liberation Mono" font-style="oblique">optname</fo:inline>, const void *<fo:inline font-family="Liberation Mono" font-style="oblique">optval</fo:inline>,
               socklen_t <fo:inline font-family="Liberation Mono" font-style="oblique">optlen</fo:inline>);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block><fo:wrapper id="indexId434909-290"></fo:wrapper><fo:wrapper id="indexId434909-291"></fo:wrapper>Sockets are fairly
configurable beasts.  In fact, they are so configurable, I'm not even
going to cover it all here.  It's probably system-dependent anyway.  But
I will talk about the basics.</fo:block>


<fo:block>Obviously, these functions get and set certain options on a socket.
On a Linux box, all the socket information is in the man page for socket
in section 7.  (Type: &#x201C;<fo:inline font-weight="bold">man 7 socket</fo:inline>&#x201D; to get all these
goodies.)</fo:block>


<fo:block>As for parameters, <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">s</fo:inline> is the socket you're talking about,
level should be set to <fo:wrapper id="indexId434909-292"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SOL_SOCKET</fo:inline>.
Then you set the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">optname</fo:inline> to the name you're interested in.
Again, see your man page for all the options, but here are some of the
most fun ones:</fo:block>


<fo:block><fo:table width="100%" space-before="0.5em" space-after="0.5em" table-layout="fixed">
<fo:table-column column-width="0%" column-number="1"/>
<fo:table-column column-width="100%" column-number="2"/>
<fo:table-body start-indent="0pt" text-align="start">
<fo:table-row>
<fo:table-cell column-number="1">
<fo:block/>
</fo:table-cell>
<fo:table-cell column-number="2">
<fo:table width="100%" table-layout="fixed" space-before="0.5em" space-after="0.5em" text-indent="0pt" border-style="solid" border-width="thin">
	<fo:table-column column-width="30%" column-number="1" />
	<fo:table-column column-width="68%" column-number="2" />
	<fo:table-body start-indent="0pt" text-align="start">

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-293"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SO_BINDTODEVICE</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Bind this socket to a symbolic device name like
<fo:inline font-family="Liberation Mono" font-size="0.900000em">eth0</fo:inline> instead of using <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline> to bind it to an IP
address.  Type the command <fo:inline font-weight="bold">ifconfig</fo:inline> under Unix to see the
device names.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-294"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SO_REUSEADDR</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Allows other sockets to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline> to this port, unless
there is an active listening socket bound to the port already.  This
enables you to get around those &#x201C;Address already in use&#x201D; error messages
when you try to restart your server after a crash.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-295"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SO_BROADCAST</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Allows UDP datagram (<fo:wrapper id="indexId434909-296"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_DGRAM</fo:inline>) sockets to send and receive
packets sent to and from the broadcast address.  Does
nothing—<fo:inline font-style="italic">NOTHING!!</fo:inline>—to TCP stream sockets!
Hahaha!</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


	</fo:table-body>
</fo:table>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>


<fo:block>As for the parameter <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">optval</fo:inline>, it's usually a pointer to an
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">int</fo:inline> indicating the value in question.  For booleans, zero
is false, and non-zero is true.  And that's an absolute fact, unless
it's different on your system.  If there is no parameter to be passed,
<fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">optval</fo:inline> can be <fo:inline font-family="Liberation Mono" font-size="0.900000em">NULL</fo:inline>.</fo:block>


<fo:block>The final parameter, <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">optlen</fo:inline>, is filled out for you by
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getsockopt()</fo:inline> and you have to specify it for
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">setsockopt()</fo:inline>, where it will probably be
<fo:inline font-family="Liberation Mono" font-size="0.900000em">sizeof(int)</fo:inline>.</fo:block>


<fo:block><fo:inline font-weight="bold">Warning</fo:inline>: on some systems (notably <fo:wrapper id="indexId434909-297"></fo:wrapper><fo:wrapper id="indexId434909-298"></fo:wrapper>Sun and <fo:wrapper id="indexId434909-299"></fo:wrapper>Windows), the option
can be a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">char</fo:inline> instead of an <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">int</fo:inline>, and is set
to, for example, a character value of <fo:inline font-family="Liberation Mono" font-size="0.900000em">'1'</fo:inline> instead of an
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">int</fo:inline> value of <fo:inline font-family="Liberation Mono" font-size="0.900000em">1</fo:inline>.  Again, check your own man
pages for more info with &#x201C;<fo:inline font-weight="bold">man setsockopt</fo:inline>&#x201D; and &#x201C;<fo:inline font-weight="bold">man 7
socket</fo:inline>&#x201D;!</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block>Returns zero on success, or <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error (and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">errno</fo:inline> will be set accordingly.)</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >int optval;
int optlen;
char *optval2;

// set SO_REUSEADDR on a socket to true (1):
optval = 1;
setsockopt(s1, SOL_SOCKET, SO_REUSEADDR, &amp;optval, sizeof optval);

// bind a socket to a device name (might not work on all systems):
optval2 = "eth1"; // 4 bytes long, so 4, below:
setsockopt(s2, SOL_SOCKET, SO_BINDTODEVICE, optval2, 4);

// see if the SO_BROADCAST flag is set:
getsockopt(s3, SOL_SOCKET, SO_BROADCAST, &amp;optval, &amp;optlen);
if (optval != 0) {
    print("SO_BROADCAST enabled on s3!\n");
}</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="fcntlman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">fcntl()</fo:inline></fo:basic-link></fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="sendman">9.21. <fo:inline font-family="Liberation Mono" font-weight="bold">send()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold">sendto()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Send data out over a socket</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

ssize_t send(int s, const void *buf, size_t len, int flags);
ssize_t sendto(int s, const void *buf, size_t len,
               int flags, const struct sockaddr *to,
               socklen_t tolen);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block><fo:wrapper id="indexId434909-300"></fo:wrapper><fo:wrapper id="indexId434909-301"></fo:wrapper>These functions send data to a
socket.  Generally speaking, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> is used for TCP <fo:wrapper id="indexId434909-302"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_STREAM</fo:inline> connected sockets, and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendto()</fo:inline> is used for UDP <fo:wrapper id="indexId434909-303"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_DGRAM</fo:inline> unconnected datagram
sockets.  With the unconnected sockets, you must specify the destination
of a packet each time you send one, and that's why the last parameters
of <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendto()</fo:inline> define where the packet is going.</fo:block>


<fo:block>With both <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendto()</fo:inline>, the
parameter <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">s</fo:inline> is the socket, <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">buf</fo:inline> is a pointer to the
data you want to send, <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">len</fo:inline> is the number of bytes you want to
send, and <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">flags</fo:inline> allows you to specify more information about
how the data is to be sent.  Set <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">flags</fo:inline> to zero if you want it
to be &#x201C;normal&#x201D; data.  Here are some of the commonly used flags, but
check your local <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> man pages for more details:</fo:block>


<fo:block><fo:table width="100%" space-before="0.5em" space-after="0.5em" table-layout="fixed">
<fo:table-column column-width="0%" column-number="1"/>
<fo:table-column column-width="100%" column-number="2"/>
<fo:table-body start-indent="0pt" text-align="start">
<fo:table-row>
<fo:table-cell column-number="1">
<fo:block/>
</fo:table-cell>
<fo:table-cell column-number="2">
<fo:table width="100%" table-layout="fixed" space-before="0.5em" space-after="0.5em" text-indent="0pt" border-style="solid" border-width="thin">
	<fo:table-column column-width="30%" column-number="1" />
	<fo:table-column column-width="68%" column-number="2" />
	<fo:table-body start-indent="0pt" text-align="start">

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-304"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">MSG_OOB</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>
 			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Send
as <fo:wrapper id="indexId434909-305"></fo:wrapper>&#x201C;out of band&#x201D; data.  TCP supports this,
and it's a way to tell the receiving system that this data has a higher
priority than the normal data.  The receiver will receive the signal
<fo:wrapper id="indexId434909-306"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SIGURG</fo:inline> and it can then receive this data without first
receiving all the rest of the normal data in the queue.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-307"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">MSG_DONTROUTE</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Don't send this data over a router, just keep it
local.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-308"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">MSG_DONTWAIT</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">If <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> would block because outbound
traffic is clogged, have it return <fo:wrapper id="indexId434909-309"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">EAGAIN</fo:inline>.  This is like a &#x201C;enable <fo:wrapper id="indexId434909-310"></fo:wrapper>non-blocking just for this send.&#x201D;  See the
section on <fo:basic-link internal-destination="blocking">blocking</fo:basic-link>  for more
details.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:wrapper id="indexId434909-311"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">MSG_NOSIGNAL</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>

			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">If you <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> to a remote host which is
no longer <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>ing, you'll typically get the signal <fo:wrapper id="indexId434909-312"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SIGPIPE</fo:inline>.  Adding this flag prevents that
signal from being raised.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


	</fo:table-body>
</fo:table>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block>Returns the number of bytes actually sent, or <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on
error (and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">errno</fo:inline> will be set accordingly.)  Note that the
number of bytes actually sent might be less than the number you asked it
to send!  See the section on <fo:basic-link internal-destination="sendall">handling partial
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline>s</fo:basic-link> for a helper function to get around this.</fo:block>


<fo:block>Also, if the socket has been closed by either side, the process
calling <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> will get the signal <fo:inline font-family="Liberation Mono" font-size="0.900000em">SIGPIPE</fo:inline>.
(Unless <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline> was called with the
<fo:inline font-family="Liberation Mono" font-size="0.900000em">MSG_NOSIGNAL</fo:inline> flag.)</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >int spatula_count = 3490;
char *secret_message = "The Cheese is in The Toaster";

int stream_socket, dgram_socket;
struct sockaddr_in dest;
int temp;

// first with TCP stream sockets:

// assume sockets are made and connected
//stream_socket = socket(...
//connect(stream_socket, ...

// convert to network byte order
temp = htonl(spatula_count);
// send data normally:
send(stream_socket, &amp;temp, sizeof temp, 0);

// send secret message out of band:
send(stream_socket, secret_message, strlen(secret_message)+1, MSG_OOB);

// now with UDP datagram sockets:
//getaddrinfo(...
//dest = ...  // assume "dest" holds the address of the destination
//dgram_socket = socket(...

// send secret message normally:
sendto(dgram_socket, secret_message, strlen(secret_message)+1, 0, 
       (struct sockaddr*)&amp;dest, sizeof dest);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="recvman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="recvman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline></fo:basic-link></fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="shutdownman">9.22. <fo:inline font-family="Liberation Mono" font-weight="bold">shutdown()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Stop further sends and receives on a socket</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/socket.h&gt;

int shutdown(int s, int how);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block><fo:wrapper id="indexId434909-313"></fo:wrapper>That's it!  I've had it!  No more
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline>s are allowed on this socket, but I still want to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline> data on it!  Or vice-versa!  How can I do this?</fo:block>


<fo:block>When you <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">close()</fo:inline> a socket descriptor, it closes both
sides of the socket for reading and writing, and frees the socket
descriptor.  If you just want to close one side or the other, you can
use this <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">shutdown()</fo:inline> call.</fo:block>


<fo:block>As for parameters, <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">s</fo:inline> is obviously the socket you want to
perform this action on, and what action that is can be specified with
the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">how</fo:inline> parameter.  How can be <fo:inline font-family="Liberation Mono" font-size="0.900000em">SHUT_RD</fo:inline> to
prevent further <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>s, <fo:inline font-family="Liberation Mono" font-size="0.900000em">SHUT_WR</fo:inline> to prohibit
further <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline>s, or <fo:inline font-family="Liberation Mono" font-size="0.900000em">SHUT_RDWR</fo:inline> to do
both.</fo:block>


<fo:block>Note that <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">shutdown()</fo:inline> doesn't free up the socket
descriptor, so you still have to eventually <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">close()</fo:inline> the
socket even if it has been fully shut down.</fo:block>


<fo:block>This is a rarely used system call.</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block>Returns zero on success, or <fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error (and
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">errno</fo:inline> will be set accordingly.)</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >int s = socket(PF_INET, SOCK_STREAM, 0);

// ...do some send()s and stuff in here...

// and now that we're done, don't allow any more sends()s:
shutdown(s, SHUT_WR);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="closeman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">close()</fo:inline></fo:basic-link></fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="socketman">9.23. <fo:inline font-family="Liberation Mono" font-weight="bold">socket()</fo:inline></fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Allocate a socket descriptor</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int socket(int domain, int type, int protocol);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>

<fo:block><fo:wrapper id="indexId434909-314"></fo:wrapper>Returns a new socket descriptor that you can use
to do sockety things with.  This is generally the first call in the
whopping process of writing a socket program, and you can use the result
for subsequent calls to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">listen()</fo:inline>, <fo:inline font-family="Liberation Mono" font-size="0.900000em">bind()</fo:inline>,
<fo:inline font-family="Liberation Mono" font-size="0.900000em">accept()</fo:inline>, or a variety of other functions.</fo:block>


<fo:block>In usual usage, you get the values for these parameters from a call
to <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline>, as shown in the example below.  But you
can fill them in by hand if you really want to.</fo:block>


<fo:block>
<fo:table width="100%" space-before="0.5em" space-after="0.5em" table-layout="fixed">
<fo:table-column column-width="0%" column-number="1"/>
<fo:table-column column-width="100%" column-number="2"/>
<fo:table-body start-indent="0pt" text-align="start">
<fo:table-row>
<fo:table-cell column-number="1">
<fo:block/>
</fo:table-cell>
<fo:table-cell column-number="2">
<fo:table width="100%" table-layout="fixed" space-before="0.5em" space-after="0.5em" text-indent="0pt" border-style="solid" border-width="thin">
	<fo:table-column column-width="20%" column-number="1" />
	<fo:table-column column-width="78%" column-number="2" />
	<fo:table-body start-indent="0pt" text-align="start">

		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">domain</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>


			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">domain</fo:inline> describes what kind of socket
you're interested in.  This can, believe me, be a wide variety of
things, but since this is a socket guide, it's going to be <fo:wrapper id="indexId434909-315"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">PF_INET</fo:inline> for IPv4, and
<fo:inline font-family="Liberation Mono" font-size="0.900000em">PF_INET6</fo:inline> for IPv6.</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">type</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>


			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Also, the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">type</fo:inline> parameter can be a number of things,
but you'll probably be setting it to either <fo:wrapper id="indexId434909-316"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_STREAM</fo:inline> for reliable <fo:wrapper id="indexId434909-317"></fo:wrapper>TCP sockets (<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline>, <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline>) or <fo:wrapper id="indexId434909-318"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_DGRAM</fo:inline> for unreliable fast <fo:wrapper id="indexId434909-319"></fo:wrapper>UDP sockets (<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendto()</fo:inline>,
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline>.)</fo:block>


<fo:block space-after="0.5em">(Another interesting socket type is <fo:wrapper id="indexId434909-320"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_RAW</fo:inline> which can be used to construct
packets by hand.  It's pretty cool.)</fo:block>
</fo:block>
		    </fo:table-cell>
		</fo:table-row>


		<fo:table-row>
			<fo:table-cell column-number="1" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em"><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">protocol</fo:inline></fo:block>
</fo:block>
		    </fo:table-cell>


			<fo:table-cell column-number="2" border-style="none" padding="0.2em">
				<fo:block><fo:block space-after="0.5em">Finally, the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">protocol</fo:inline> parameter tells which protocol to
use with a certain socket type.  Like I've already said, for instance,
<fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_STREAM</fo:inline> uses TCP.  Fortunately for you, when using
<fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_STREAM</fo:inline> or <fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_DGRAM</fo:inline>, you can just
set the protocol to 0, and it'll use the proper protocol automatically.
Otherwise, you can use <fo:wrapper id="indexId434909-321"></fo:wrapper><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getprotobyname()</fo:inline> to look up the
proper protocol number.</fo:block>
</fo:block>
		    </fo:table-cell>


		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>




<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Return Value</fo:block>

<fo:block>The new socket descriptor to be used in subsequent calls, or
<fo:inline font-family="Liberation Mono" font-size="0.900000em">-1</fo:inline> on error (and <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">errno</fo:inline> will be set
accordingly.)</fo:block>



<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >struct addrinfo hints, *res;
int sockfd;

// first, load up address structs with getaddrinfo():

memset(&amp;hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC;     // AF_INET, AF_INET6, or AF_UNSPEC
hints.ai_socktype = SOCK_STREAM; // SOCK_STREAM or SOCK_DGRAM

getaddrinfo("www.example.com", "3490", &amp;hints, &amp;res);

// make a socket using the information gleaned from getaddrinfo():
sockfd = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="acceptman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="bindman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="getaddrinfoman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="listenman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">listen()</fo:inline></fo:basic-link></fo:block>



</fo:block>



<fo:block break-before="page">

<fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="sockaddr_inman">9.24. <fo:inline font-family="Liberation Mono" wrap-option="no-wrap">struct sockaddr</fo:inline> and pals</fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>

<fo:block text-indent="0pt"><fo:block>Structures for handling internet addresses</fo:block>
</fo:block>

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Prototypes</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >include &lt;netinet/in.h&gt;

// All pointers to socket address structures are often cast to pointers
// to this type before use in various functions and system calls:

struct sockaddr {
    unsigned short    <fo:inline font-family="Liberation Mono" font-style="oblique">sa_family</fo:inline>;    // address family, AF_xxx
    char              <fo:inline font-family="Liberation Mono" font-style="oblique">sa_data</fo:inline>[14];  // 14 bytes of protocol address
};


// IPv4 AF_INET sockets:

struct sockaddr_in {
    short            <fo:inline font-family="Liberation Mono" font-style="oblique">sin_family</fo:inline>;   // e.g. AF_INET, AF_INET6
    unsigned short   <fo:inline font-family="Liberation Mono" font-style="oblique">sin_port</fo:inline>;     // e.g. htons(3490)
    struct in_addr   <fo:inline font-family="Liberation Mono" font-style="oblique">sin_addr</fo:inline>;     // see struct in_addr, below
    char             <fo:inline font-family="Liberation Mono" font-style="oblique">sin_zero</fo:inline>[8];  // zero this if you want to
};

struct in_addr {
    unsigned long <fo:inline font-family="Liberation Mono" font-style="oblique">s_addr</fo:inline>;          // load with inet_pton()
};


// IPv6 AF_INET6 sockets:

struct sockaddr_in6 {
    u_int16_t       <fo:inline font-family="Liberation Mono" font-style="oblique">sin6_family</fo:inline>;   // address family, AF_INET6
    u_int16_t       <fo:inline font-family="Liberation Mono" font-style="oblique">sin6_port</fo:inline>;     // port number, Network Byte Order
    u_int32_t       <fo:inline font-family="Liberation Mono" font-style="oblique">sin6_flowinfo</fo:inline>; // IPv6 flow information
    struct in6_addr <fo:inline font-family="Liberation Mono" font-style="oblique">sin6_addr</fo:inline>;     // IPv6 address
    u_int32_t       <fo:inline font-family="Liberation Mono" font-style="oblique">sin6_scope_id</fo:inline>; // Scope ID
};

struct in6_addr {
    unsigned char   <fo:inline font-family="Liberation Mono" font-style="oblique">s6_addr[16]</fo:inline>;   // load with inet_pton()
};


// General socket address holding structure, big enough to hold either
// struct sockaddr_in or struct sockaddr_in6 data:

struct sockaddr_storage {
    sa_family_t  <fo:inline font-family="Liberation Mono" font-style="oblique">ss_family</fo:inline>;     // address family

    // all this is padding, implementation specific, ignore it:
    char      __ss_pad1[_SS_PAD1SIZE];
    int64_t   __ss_align;
    char      __ss_pad2[_SS_PAD2SIZE];
};</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Description</fo:block>


<fo:block><fo:wrapper id="indexId434909-322"></fo:wrapper><fo:wrapper id="indexId434909-323"></fo:wrapper>These are the
basic structures for all syscalls and functions that deal with internet
addresses.  Often you'll use <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddinfo()</fo:inline> to fill these
structures out, and then will read them when you have to.</fo:block>


<fo:block>In memory, the <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in</fo:inline> and <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr_in6</fo:inline> share the same beginning structure as <fo:wrapper id="indexId434909-324"></fo:wrapper><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline>, and you can freely
cast the pointer of one type to the other without any harm, except the
possible end of the universe.</fo:block>


<fo:block>Just kidding on that end-of-the-universe thing...if the universe does
end when you cast a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in*</fo:inline> to a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap"> struct
sockaddr*</fo:inline>, I promise you it's pure coincidence and you shouldn't
even worry about it.</fo:block>


<fo:block>So, with that in mind, remember that whenever a function says it
takes a <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr*</fo:inline> you can cast your <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr_in*</fo:inline>, <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in6*</fo:inline>, or <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockadd_storage*</fo:inline> to that type with ease and safety.</fo:block>


<fo:block><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in</fo:inline> is the structure used with IPv4
addresses (e.g. &#x201C;192.0.2.10&#x201D;).  It holds an address family
(<fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET</fo:inline>), a port in <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sin_port</fo:inline>, and an IPv4
address in <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">sin_addr</fo:inline>.</fo:block>


<fo:block>There's also this <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">sin_zero</fo:inline> field in <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct
sockaddr_in</fo:inline> which some people claim must be set to zero.  Other
people don't claim anything about it (the Linux documentation doesn't
even mention it at all), and setting it to zero doesn't seem to be
actually necessary.  So, if you feel like it, set it to zero using
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">memset()</fo:inline>.</fo:block>


<fo:block>Now, that <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in_addr</fo:inline> is a weird beast on different
systems.  Sometimes it's a crazy <fo:inline font-family="Liberation Mono" font-size="0.900000em">union</fo:inline> with all kinds of
<fo:inline font-family="Liberation Mono" font-size="0.900000em">#define</fo:inline>s and other nonsense.  But what you should do is only
use the <fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">s_addr</fo:inline> field in this structure, because many systems
only implement that one.</fo:block>


<fo:block><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockadd_in6</fo:inline> and <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in6_addr</fo:inline> are
very similar, except they're used for IPv6.</fo:block>


<fo:block><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_storage</fo:inline> is a struct you can pass to
<fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline> or <fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline> when you're trying to
write IP version-agnostic code and you don't know if the new address is
going to be IPv4 or IPv6.  The <fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_storage</fo:inline>
structure is large enough to hold both types, unlike the original small
<fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline>.</fo:block>






<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">Example</fo:block>

<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >// IPv4:

struct sockaddr_in ip4addr;
int s;

ip4addr.sin_family = AF_INET;
ip4addr.sin_port = htons(3490);
inet_pton(AF_INET, "10.0.0.1", &amp;ip4addr.sin_addr);

s = socket(PF_INET, SOCK_STREAM, 0);
bind(s, (struct sockaddr*)&amp;ip4addr, sizeof ip4addr);</fo:block>
<fo:block text-indent="0pt" margin="0.2em" padding="0.2em" border-width="thin" border-style="solid" border-bottom-width="medium" border-right-width="medium" background-color="#E7E7E7" widows="2" orphans="2" white-space="pre" font-family="Liberation Mono" font-size="0.801000em" >// IPv6:

struct sockaddr_in6 ip6addr;
int s;

ip6addr.sin6_family = AF_INET6;
ip6addr.sin6_port = htons(4950);
inet_pton(AF_INET6, "2001:db8:8714:3a90::12", &amp;ip6addr.sin6_addr);

s = socket(PF_INET6, SOCK_STREAM, 0);
bind(s, (struct sockaddr*)&amp;ip6addr, sizeof ip6addr);</fo:block>


<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="100%" keep-with-next="always"  space-before="0.5em">See Also</fo:block>

<fo:block><fo:basic-link internal-destination="acceptman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="bindman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="connectman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="inet_ntoaman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_aton()</fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="inet_ntoaman"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_ntoa()</fo:inline></fo:basic-link></fo:block>



</fo:block>


</fo:flow>
</fo:page-sequence>










<fo:page-sequence master-reference="chapter">
<fo:static-content flow-name="bg-normal-first-footer">
<fo:block text-align="center" font-family="Liberation Sans" font-weight="bold" font-size="11pt" padding-top="1em"><fo:page-number/></fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="50%" />
	<fo:table-column column-number="2" column-width="50%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt" font-style="italic">Beej's Guide to Network Programming</fo:block>
			</fo:table-cell>
			<fo:table-cell column-number="2" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="11pt" font-weight="bold"><fo:page-number/></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-even-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline>&#8195;&#8195;<fo:inline font-style="italic">Beej's Guide to Network Programming</fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-odd-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-style="italic">More References</fo:inline>&#8195;&#8195;<fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="xsl-footnote-separator">
	<fo:block>
		<fo:leader leader-pattern="rule" leader-length="40%"/>
	</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body" id="reference" font-family="Liberation Serif" font-size="11pt" text-indent="2.000000em">

<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="reference">10. More References</fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>


<fo:block>You've come this far, and now you're screaming for more!  Where
else can you go to learn more about all this stuff?</fo:block>







<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="books" space-before="0.5em">10.1. Books</fo:block>


<fo:block><fo:wrapper id="indexId434909-325"></fo:wrapper><fo:wrapper id="indexId434909-326"></fo:wrapper>For old-school actual
hold-it-in-your-hand pulp paper books, try some of the following
excellent books.  I used to be an affiliate with a very popular internet
bookseller, but their new customer tracking system is incompatible with
a print document.  As such, I get no more kickbacks.  If you feel
compassion for my plight, paypal a donation to
<fo:inline font-family="Liberation Mono" font-size="0.8em">beej@beej.us</fo:inline>.  <fo:inline font-family="Liberation Mono" font-size="0.8em">:-)</fo:inline></fo:block>




<fo:block space-before="0.7em" space-after="0.2em">
<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic">Unix Network Programming, volumes 1-2</fo:inline> by W.
Richard Stevens.  Published by Prentice Hall.  ISBNs for volumes 1-2:
<fo:basic-link external-destination="http://beej.us/guide/url/unixnet1" keep-with-next="always">0131411551</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">43</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">43. <fo:inline font-family="Liberation Mono">http://beej.us/guide/url/unixnet1</fo:inline></fo:block></fo:footnote-body></fo:footnote>,
<fo:basic-link external-destination="http://beej.us/guide/url/unixnet2" keep-with-next="always">0130810819</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">44</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">44. <fo:inline font-family="Liberation Mono">http://beej.us/guide/url/unixnet2</fo:inline></fo:block></fo:footnote-body></fo:footnote>.
</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic">Internetworking with TCP/IP, volumes I-III</fo:inline> by
Douglas E. Comer and David L. Stevens.  Published by Prentice Hall.
ISBNs for volumes I, II, and III:
<fo:basic-link external-destination="http://beej.us/guide/url/intertcp1" keep-with-next="always">0131876716</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">45</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">45. <fo:inline font-family="Liberation Mono">http://beej.us/guide/url/intertcp1</fo:inline></fo:block></fo:footnote-body></fo:footnote>,
<fo:basic-link external-destination="http://beej.us/guide/url/intertcp2" keep-with-next="always">0130319961</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">46</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">46. <fo:inline font-family="Liberation Mono">http://beej.us/guide/url/intertcp2</fo:inline></fo:block></fo:footnote-body></fo:footnote>,
<fo:basic-link external-destination="http://beej.us/guide/url/intertcp3" keep-with-next="always">0130320714</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">47</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">47. <fo:inline font-family="Liberation Mono">http://beej.us/guide/url/intertcp3</fo:inline></fo:block></fo:footnote-body></fo:footnote>.
</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic">TCP/IP Illustrated, volumes 1-3</fo:inline> by W.
Richard Stevens and Gary R. Wright.  Published by Addison Wesley.  ISBNs
for volumes 1, 2, and 3 (and a 3-volume set):
<fo:basic-link external-destination="http://beej.us/guide/url/tcpi1" keep-with-next="always">0201633469</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">48</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">48. <fo:inline font-family="Liberation Mono">http://beej.us/guide/url/tcpi1</fo:inline></fo:block></fo:footnote-body></fo:footnote>,
<fo:basic-link external-destination="http://beej.us/guide/url/tcpi2" keep-with-next="always">020163354X</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">49</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">49. <fo:inline font-family="Liberation Mono">http://beej.us/guide/url/tcpi2</fo:inline></fo:block></fo:footnote-body></fo:footnote>,
<fo:basic-link external-destination="http://beej.us/guide/url/tcpi3" keep-with-next="always">0201634953</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">50</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">50. <fo:inline font-family="Liberation Mono">http://beej.us/guide/url/tcpi3</fo:inline></fo:block></fo:footnote-body></fo:footnote>,
(<fo:basic-link external-destination="http://beej.us/guide/url/tcpi123" keep-with-next="always">0201776316</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">51</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">51. <fo:inline font-family="Liberation Mono">http://beej.us/guide/url/tcpi123</fo:inline></fo:block></fo:footnote-body></fo:footnote>).
</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic">TCP/IP Network Administration</fo:inline> by Craig
Hunt.  Published by O'Reilly &amp; Associates, Inc.  ISBN
<fo:basic-link external-destination="http://beej.us/guide/url/tcpna" keep-with-next="always">0596002971</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">52</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">52. <fo:inline font-family="Liberation Mono">http://beej.us/guide/url/tcpna</fo:inline></fo:block></fo:footnote-body></fo:footnote>.
</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic">Advanced Programming in the UNIX
Environment</fo:inline> by W. Richard Stevens.  Published by Addison
Wesley.  ISBN
<fo:basic-link external-destination="http://beej.us/guide/url/advunix" keep-with-next="always">0201433079</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">53</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">53. <fo:inline font-family="Liberation Mono">http://beej.us/guide/url/advunix</fo:inline></fo:block></fo:footnote-body></fo:footnote>.
</fo:block>

</fo:block>








<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="webref" space-before="0.5em">10.2. Web References</fo:block>


<fo:block><fo:wrapper id="indexId434909-327"></fo:wrapper>On the web:</fo:block>


<fo:block space-before="0.7em" space-after="0.2em">
<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic"><fo:basic-link external-destination="http://www.frostbytes.com/~jimf/papers/sockets/sockets.html" keep-with-next="always"> BSD Sockets: A Quick And
Dirty Primer</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">54</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">54. <fo:inline font-family="Liberation Mono">http://www.frostbytes.com/~jimf/papers/sockets/sockets.html</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline> (Unix system programming info,
too!)</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic"><fo:basic-link external-destination="http://www.developerweb.net/forum/forumdisplay.php?f=70" keep-with-next="always">The Unix Socket
FAQ</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">55</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">55. <fo:inline font-family="Liberation Mono">http://www.developerweb.net/forum/forumdisplay.php?f=70</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline></fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic"><fo:basic-link external-destination="http://pclt.cis.yale.edu/pclt/COMM/TCPIP.HTM" keep-with-next="always">Intro to
TCP/IP</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">56</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">56. <fo:inline font-family="Liberation Mono">http://pclt.cis.yale.edu/pclt/COMM/TCPIP.HTM</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline></fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic"><fo:basic-link external-destination="http://www.faqs.org/faqs/internet/tcp-ip/tcp-ip-faq/part1/" keep-with-next="always">TCP/IP
FAQ</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">57</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">57. <fo:inline font-family="Liberation Mono">http://www.faqs.org/faqs/internet/tcp-ip/tcp-ip-faq/part1/</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline></fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic"><fo:basic-link external-destination="http://tangentsoft.net/wskfaq/" keep-with-next="always">The Winsock
FAQ</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">58</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">58. <fo:inline font-family="Liberation Mono">http://tangentsoft.net/wskfaq/</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline></fo:block>

</fo:block>

<fo:block>And here are some relevant Wikipedia pages:</fo:block>


<fo:block space-before="0.7em" space-after="0.2em">

<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic"><fo:basic-link external-destination="http://en.wikipedia.org/wiki/Berkeley_sockets" keep-with-next="always">Berkeley
Sockets</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">59</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">59. <fo:inline font-family="Liberation Mono">http://en.wikipedia.org/wiki/Berkeley_sockets</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline></fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic"><fo:basic-link external-destination="http://en.wikipedia.org/wiki/Internet_Protocol" keep-with-next="always">Internet Protocol
(IP)</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">60</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">60. <fo:inline font-family="Liberation Mono">http://en.wikipedia.org/wiki/Internet_Protocol</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline></fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic"><fo:basic-link external-destination="http://en.wikipedia.org/wiki/Transmission_Control_Protocol" keep-with-next="always">Transmission Control Protocol
(TCP)</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">61</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">61. <fo:inline font-family="Liberation Mono">http://en.wikipedia.org/wiki/Transmission_Control_Protocol</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline></fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic"><fo:basic-link external-destination="http://en.wikipedia.org/wiki/User_Datagram_Protocol" keep-with-next="always">User Datagram Protocol
(UDP)</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">62</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">62. <fo:inline font-family="Liberation Mono">http://en.wikipedia.org/wiki/User_Datagram_Protocol</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline></fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic"><fo:basic-link external-destination="http://en.wikipedia.org/wiki/Client-server" keep-with-next="always">Client-Server</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">63</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">63. <fo:inline font-family="Liberation Mono">http://en.wikipedia.org/wiki/Client-server</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline></fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic"><fo:basic-link external-destination="http://en.wikipedia.org/wiki/Serialization" keep-with-next="always">Serialization</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">64</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">64. <fo:inline font-family="Liberation Mono">http://en.wikipedia.org/wiki/Serialization</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline> (packing and unpacking
data)</fo:block>


</fo:block>








<fo:block text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="116%" keep-with-next="always" id="rfcs" space-before="0.5em">10.3. RFCs</fo:block>


<fo:block><fo:wrapper id="indexId434909-328"></fo:wrapper><fo:basic-link external-destination="http://www.rfc-editor.org/" keep-with-next="always">RFCs</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">65</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">65. <fo:inline font-family="Liberation Mono">http://www.rfc-editor.org/</fo:inline></fo:block></fo:footnote-body></fo:footnote>—the real
dirt!  These are documents that describe assigned numbers, programming
APIs, and protocols that are used on the Internet.  I've included links
to a few of them here for your enjoyment, so grab a bucket of popcorn
and put on your thinking cap:</fo:block>


<fo:block space-before="0.7em" space-after="0.2em">
<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic"><fo:basic-link external-destination="http://tools.ietf.org/html/rfc1" keep-with-next="always">RFC 1</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">66</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">66. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc1</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline>—The First RFC;
this gives you an idea of what the &#x201C;Internet&#x201D; was like just as it was
coming to life, and an insight into how it was being designed from the
ground up.  (This RFC is completely obsolete, obviously!)</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:wrapper id="indexId434909-329"></fo:wrapper><fo:inline font-style="italic"><fo:basic-link external-destination="http://tools.ietf.org/html/rfc768" keep-with-next="always">RFC 768</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">67</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">67. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc768</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline>—The User
Datagram Protocol (UDP)</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:wrapper id="indexId434909-330"></fo:wrapper><fo:inline font-style="italic"><fo:basic-link external-destination="http://tools.ietf.org/html/rfc791" keep-with-next="always">RFC
791</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">68</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">68. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc791</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline>—The Internet Protocol (IP)</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:wrapper id="indexId434909-331"></fo:wrapper><fo:inline font-style="italic"><fo:basic-link external-destination="http://tools.ietf.org/html/rfc793" keep-with-next="always">RFC
793</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">69</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">69. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc793</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline>—The Transmission Control Protocol
(TCP)</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:wrapper id="indexId434909-332"></fo:wrapper><fo:inline font-style="italic"><fo:basic-link external-destination="http://tools.ietf.org/html/rfc854" keep-with-next="always">RFC 854</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">70</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">70. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc854</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline>—The Telnet
Protocol</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:wrapper id="indexId434909-333"></fo:wrapper><fo:inline font-style="italic"><fo:basic-link external-destination="http://tools.ietf.org/html/rfc959" keep-with-next="always">RFC 959</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">71</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">71. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc959</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline>—File Transfer
Protocol (FTP)</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:wrapper id="indexId434909-334"></fo:wrapper><fo:inline font-style="italic"><fo:basic-link external-destination="http://tools.ietf.org/html/rfc1350" keep-with-next="always">RFC
1350</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">72</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">72. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc1350</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline>—The Trivial File Transfer Protocol
(TFTP)</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:wrapper id="indexId434909-335"></fo:wrapper><fo:inline font-style="italic"><fo:basic-link external-destination="http://tools.ietf.org/html/rfc1459" keep-with-next="always">RFC
1459</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">73</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">73. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc1459</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline>—Internet Relay Chat Protocol
(IRC)</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic"><fo:basic-link external-destination="http://tools.ietf.org/html/rfc1918" keep-with-next="always">RFC
1918</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">74</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">74. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc1918</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline>—Address Allocation for Private
Internets</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:wrapper id="indexId434909-336"></fo:wrapper><fo:inline font-style="italic"><fo:basic-link external-destination="http://tools.ietf.org/html/rfc2131" keep-with-next="always">RFC
2131</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">75</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">75. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc2131</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline>—Dynamic Host Configuration Protocol
(DHCP)</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:wrapper id="indexId434909-337"></fo:wrapper><fo:inline font-style="italic"><fo:basic-link external-destination="http://tools.ietf.org/html/rfc2616" keep-with-next="always">RFC
2616</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">76</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">76. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc2616</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline>—Hypertext Transfer Protocol
(HTTP)</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:wrapper id="indexId434909-338"></fo:wrapper><fo:inline font-style="italic"><fo:basic-link external-destination="http://tools.ietf.org/html/rfc2821" keep-with-next="always">RFC
2821</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">77</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">77. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc2821</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline>—Simple Mail Transfer Protocol
(SMTP)</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic"><fo:basic-link external-destination="http://tools.ietf.org/html/rfc3330" keep-with-next="always">RFC
3330</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">78</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">78. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc3330</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline>—Special-Use IPv4 Addresses</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic"><fo:basic-link external-destination="http://tools.ietf.org/html/rfc3493" keep-with-next="always">RFC
3493</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">79</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">79. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc3493</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline>—Basic Socket Interface Extensions for
IPv6</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic"><fo:basic-link external-destination="http://tools.ietf.org/html/rfc3542" keep-with-next="always">RFC
3542</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">80</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">80. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc3542</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline>—Advanced Sockets Application Program
Interface (API) for IPv6</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic"><fo:basic-link external-destination="http://tools.ietf.org/html/rfc3849" keep-with-next="always">RFC
3849</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">81</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">81. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc3849</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline>—IPv6 Address Prefix Reserved for
Documentation</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:wrapper id="indexId434909-339"></fo:wrapper><fo:inline font-style="italic"><fo:basic-link external-destination="http://tools.ietf.org/html/rfc3920" keep-with-next="always">RFC
3920</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">82</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">82. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc3920</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline>—Extensible Messaging and Presence Protocol
(XMPP)</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:wrapper id="indexId434909-340"></fo:wrapper><fo:inline font-style="italic"><fo:basic-link external-destination="http://tools.ietf.org/html/rfc3977" keep-with-next="always">RFC
3977</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">83</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">83. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc3977</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline>—Network News Transfer Protocol
(NNTP)</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:inline font-style="italic"><fo:basic-link external-destination="http://tools.ietf.org/html/rfc4193" keep-with-next="always">RFC
4193</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">84</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">84. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc4193</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline>—Unique Local IPv6 Unicast
Addresses</fo:block>


<fo:block space-after="0.5em" start-indent="6.000000em" text-indent="-2.000000em"><fo:wrapper id="indexId434909-341"></fo:wrapper><fo:inline font-style="italic"><fo:basic-link external-destination="http://tools.ietf.org/html/rfc4506" keep-with-next="always">RFC
4506</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">85</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">85. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/html/rfc4506</fo:inline></fo:block></fo:footnote-body></fo:footnote></fo:inline>—External Data Representation Standard
(XDR)</fo:block>


</fo:block>

<fo:block>The IETF has a nice online tool for <fo:basic-link external-destination="http://tools.ietf.org/rfc/" keep-with-next="always">searching and browsing RFCs</fo:basic-link><fo:footnote><fo:inline font-weight="normal" font-style="normal" font-size="0.5em" keep-with-previous="always" baseline-shift="super">86</fo:inline><fo:footnote-body><fo:block start-indent="2.000000em" text-indent="0pt" font-weight="normal" font-style="normal" font-size="0.83em" line-height="0.9em">86. <fo:inline font-family="Liberation Mono">http://tools.ietf.org/rfc/</fo:inline></fo:block></fo:footnote-body></fo:footnote>.</fo:block>




</fo:flow>
</fo:page-sequence>
 

<fo:page-sequence master-reference="index">
<fo:static-content flow-name="bg-normal-first-footer">
<fo:block text-align="center" font-family="Liberation Sans" font-weight="bold" font-size="11pt" padding-top="1em"><fo:page-number/></fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="50%" />
	<fo:table-column column-number="2" column-width="50%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt" font-style="italic">Beej's Guide to Network Programming</fo:block>
			</fo:table-cell>
			<fo:table-cell column-number="2" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="11pt" font-weight="bold"><fo:page-number/></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-even-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-left="2.3cm" text-align="left">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline>&#8195;&#8195;<fo:inline font-style="italic">Beej's Guide to Network Programming</fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="bg-normal-odd-header">
<fo:block padding-top="1.250000cm"><fo:table table-layout="fixed" width="100%">
	<fo:table-column column-number="1" column-width="100%" />
	<fo:table-body>
		<fo:table-row>
			<fo:table-cell column-number="1" padding-right="2.3cm" text-align="right">
				<fo:block font-family="Liberation Sans" font-size="8.8pt"><fo:inline font-style="italic">Index</fo:inline>&#8195;&#8195;<fo:inline font-size="11pt" font-weight="bold"><fo:page-number/></fo:inline></fo:block>
			</fo:table-cell>
		</fo:table-row>
	</fo:table-body>
</fo:table>
</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body" font-family="Liberation Serif" font-size="10pt" text-indent="0pt">
<fo:block span="all"><fo:block break-before="page" text-indent="0pt" font-family="Liberation Sans" font-weight="bold" font-size="170%" keep-with-next="always" id="index23579002497">Index</fo:block>
<fo:block text-indent="0pt" space-after="0.5em" keep-with-next="always"><fo:leader leader-pattern="rule" rule-thickness="0.2em" leader-length="100%"/></fo:block>
</fo:block><fo:block start-indent="1.000000em" text-indent="-1.000000em">10.x.x.x<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-85"><fo:page-number-citation ref-id="indexId434909-85"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">192.168.x.x<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-86"><fo:page-number-citation ref-id="indexId434909-86"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em">255.255.255.255<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-172"><fo:page-number-citation ref-id="indexId434909-172"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-267"><fo:page-number-citation ref-id="indexId434909-267"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">accept()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-109"><fo:page-number-citation ref-id="indexId434909-109"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-111"><fo:page-number-citation ref-id="indexId434909-111"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-219"><fo:page-number-citation ref-id="indexId434909-219"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">Address already in use<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-100"><fo:page-number-citation ref-id="indexId434909-100"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-179"><fo:page-number-citation ref-id="indexId434909-179"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-70"><fo:page-number-citation ref-id="indexId434909-70"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-93"><fo:page-number-citation ref-id="indexId434909-93"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-204"><fo:page-number-citation ref-id="indexId434909-204"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">AF_INET6</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-71"><fo:page-number-citation ref-id="indexId434909-71"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">asynchronous I/O<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-253"><fo:page-number-citation ref-id="indexId434909-253"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em">Bapper<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-176"><fo:page-number-citation ref-id="indexId434909-176"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">bind()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-94"><fo:page-number-citation ref-id="indexId434909-94"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-182"><fo:page-number-citation ref-id="indexId434909-182"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-225"><fo:page-number-citation ref-id="indexId434909-225"/></fo:basic-link></fo:block>
<fo:block start-indent="2.000000em" text-indent="-1.000000em">implicit<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-103"><fo:page-number-citation ref-id="indexId434909-103"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-107"><fo:page-number-citation ref-id="indexId434909-107"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">blah blah blah<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-56"><fo:page-number-citation ref-id="indexId434909-56"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">blocking<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-142"><fo:page-number-citation ref-id="indexId434909-142"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">books<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-325"><fo:page-number-citation ref-id="indexId434909-325"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">broadcast<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-169"><fo:page-number-citation ref-id="indexId434909-169"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">byte ordering<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-61"><fo:page-number-citation ref-id="indexId434909-61"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-73"><fo:page-number-citation ref-id="indexId434909-73"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-163"><fo:page-number-citation ref-id="indexId434909-163"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-259"><fo:page-number-citation ref-id="indexId434909-259"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em">client<fo:leader leader-pattern="space" width="1em"/></fo:block>
<fo:block start-indent="2.000000em" text-indent="-1.000000em">datagram<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-140"><fo:page-number-citation ref-id="indexId434909-140"/></fo:basic-link></fo:block>
<fo:block start-indent="2.000000em" text-indent="-1.000000em">stream<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-137"><fo:page-number-citation ref-id="indexId434909-137"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">client/server<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-132"><fo:page-number-citation ref-id="indexId434909-132"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">close()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-120"><fo:page-number-citation ref-id="indexId434909-120"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-230"><fo:page-number-citation ref-id="indexId434909-230"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">closesocket()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-11"><fo:page-number-citation ref-id="indexId434909-11"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-124"><fo:page-number-citation ref-id="indexId434909-124"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-234"><fo:page-number-citation ref-id="indexId434909-234"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">compilers<fo:leader leader-pattern="space" width="1em"/></fo:block>
<fo:block start-indent="2.000000em" text-indent="-1.000000em"><fo:inline font-weight="bold">gcc</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-2"><fo:page-number-citation ref-id="indexId434909-2"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">compression<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-202"><fo:page-number-citation ref-id="indexId434909-202"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">connect()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-37"><fo:page-number-citation ref-id="indexId434909-37"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-97"><fo:page-number-citation ref-id="indexId434909-97"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-104"><fo:page-number-citation ref-id="indexId434909-104"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-105"><fo:page-number-citation ref-id="indexId434909-105"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-228"><fo:page-number-citation ref-id="indexId434909-228"/></fo:basic-link></fo:block>
<fo:block start-indent="2.000000em" text-indent="-1.000000em">on datagram sockets<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-119"><fo:page-number-citation ref-id="indexId434909-119"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-141"><fo:page-number-citation ref-id="indexId434909-141"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-229"><fo:page-number-citation ref-id="indexId434909-229"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">Connection refused<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-138"><fo:page-number-citation ref-id="indexId434909-138"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">CreateProcess()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-16"><fo:page-number-citation ref-id="indexId434909-16"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-208"><fo:page-number-citation ref-id="indexId434909-208"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">CreateThread()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-17"><fo:page-number-citation ref-id="indexId434909-17"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">CSocket</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-13"><fo:page-number-citation ref-id="indexId434909-13"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">Cygwin<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-7"><fo:page-number-citation ref-id="indexId434909-7"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em">data encapsulation<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-46"><fo:page-number-citation ref-id="indexId434909-46"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-159"><fo:page-number-citation ref-id="indexId434909-159"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">DHCP<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-336"><fo:page-number-citation ref-id="indexId434909-336"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">disconnected network<fo:leader leader-pattern="space" width="1em"/>see private network.</fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">DNS<fo:leader leader-pattern="space" width="1em"/></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">domain name service<fo:leader leader-pattern="space" width="1em"/>see DNS.</fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">donkeys<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-158"><fo:page-number-citation ref-id="indexId434909-158"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">EAGAIN</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-309"><fo:page-number-citation ref-id="indexId434909-309"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">email to Beej<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-18"><fo:page-number-citation ref-id="indexId434909-18"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">encryption<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-199"><fo:page-number-citation ref-id="indexId434909-199"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">EPIPE</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-232"><fo:page-number-citation ref-id="indexId434909-232"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-style="oblique" font-size="0.900000em">errno</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-247"><fo:page-number-citation ref-id="indexId434909-247"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-271"><fo:page-number-citation ref-id="indexId434909-271"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">Ethernet<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-52"><fo:page-number-citation ref-id="indexId434909-52"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">EWOULDBLOCK</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-145"><fo:page-number-citation ref-id="indexId434909-145"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-224"><fo:page-number-citation ref-id="indexId434909-224"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">Excalibur<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-167"><fo:page-number-citation ref-id="indexId434909-167"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">external data representation standard<fo:leader leader-pattern="space" width="1em"/>see XDR.</fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">F_SETFL</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-251"><fo:page-number-citation ref-id="indexId434909-251"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">fcntl()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-144"><fo:page-number-citation ref-id="indexId434909-144"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-223"><fo:page-number-citation ref-id="indexId434909-223"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-250"><fo:page-number-citation ref-id="indexId434909-250"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">FD_CLR()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-149"><fo:page-number-citation ref-id="indexId434909-149"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-287"><fo:page-number-citation ref-id="indexId434909-287"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">FD_ISSET()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-150"><fo:page-number-citation ref-id="indexId434909-150"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-288"><fo:page-number-citation ref-id="indexId434909-288"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">FD_SET()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-148"><fo:page-number-citation ref-id="indexId434909-148"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-286"><fo:page-number-citation ref-id="indexId434909-286"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">FD_ZERO()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-151"><fo:page-number-citation ref-id="indexId434909-151"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-289"><fo:page-number-citation ref-id="indexId434909-289"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">file descriptor<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-22"><fo:page-number-citation ref-id="indexId434909-22"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">firewall<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-83"><fo:page-number-citation ref-id="indexId434909-83"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-174"><fo:page-number-citation ref-id="indexId434909-174"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-209"><fo:page-number-citation ref-id="indexId434909-209"/></fo:basic-link></fo:block>
<fo:block start-indent="2.000000em" text-indent="-1.000000em">poking holes in<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-210"><fo:page-number-citation ref-id="indexId434909-210"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">footer<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-48"><fo:page-number-citation ref-id="indexId434909-48"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">fork()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-15"><fo:page-number-citation ref-id="indexId434909-15"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-133"><fo:page-number-citation ref-id="indexId434909-133"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-207"><fo:page-number-citation ref-id="indexId434909-207"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">FTP<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-333"><fo:page-number-citation ref-id="indexId434909-333"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getaddrinfo()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-68"><fo:page-number-citation ref-id="indexId434909-68"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-89"><fo:page-number-citation ref-id="indexId434909-89"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-91"><fo:page-number-citation ref-id="indexId434909-91"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyaddr()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-128"><fo:page-number-citation ref-id="indexId434909-128"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-239"><fo:page-number-citation ref-id="indexId434909-239"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostbyname()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-130"><fo:page-number-citation ref-id="indexId434909-130"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-236"><fo:page-number-citation ref-id="indexId434909-236"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-238"><fo:page-number-citation ref-id="indexId434909-238"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gethostname()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-129"><fo:page-number-citation ref-id="indexId434909-129"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-235"><fo:page-number-citation ref-id="indexId434909-235"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getnameinfo()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-90"><fo:page-number-citation ref-id="indexId434909-90"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-127"><fo:page-number-citation ref-id="indexId434909-127"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getpeername()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-125"><fo:page-number-citation ref-id="indexId434909-125"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-244"><fo:page-number-citation ref-id="indexId434909-244"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getprotobyname()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-321"><fo:page-number-citation ref-id="indexId434909-321"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">getsockopt()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-290"><fo:page-number-citation ref-id="indexId434909-290"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">gettimeofday()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-153"><fo:page-number-citation ref-id="indexId434909-153"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">goat<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-188"><fo:page-number-citation ref-id="indexId434909-188"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">goto</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-195"><fo:page-number-citation ref-id="indexId434909-195"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em">header<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-47"><fo:page-number-citation ref-id="indexId434909-47"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">header files<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-177"><fo:page-number-citation ref-id="indexId434909-177"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">herror()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-242"><fo:page-number-citation ref-id="indexId434909-242"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">hstrerror()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-243"><fo:page-number-citation ref-id="indexId434909-243"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">htonl()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-63"><fo:page-number-citation ref-id="indexId434909-63"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-256"><fo:page-number-citation ref-id="indexId434909-256"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-261"><fo:page-number-citation ref-id="indexId434909-261"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">htons()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-62"><fo:page-number-citation ref-id="indexId434909-62"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-74"><fo:page-number-citation ref-id="indexId434909-74"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-162"><fo:page-number-citation ref-id="indexId434909-162"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-255"><fo:page-number-citation ref-id="indexId434909-255"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-260"><fo:page-number-citation ref-id="indexId434909-260"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">HTTP<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-337"><fo:page-number-citation ref-id="indexId434909-337"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">HTTP protocol<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-40"><fo:page-number-citation ref-id="indexId434909-40"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em">ICMP<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-191"><fo:page-number-citation ref-id="indexId434909-191"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">IEEE-754<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-164"><fo:page-number-citation ref-id="indexId434909-164"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">INADDR_ANY</fo:inline><fo:leader leader-pattern="space" width="1em"/></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">INADDR_BROADCAST</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-173"><fo:page-number-citation ref-id="indexId434909-173"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_addr()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-78"><fo:page-number-citation ref-id="indexId434909-78"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-266"><fo:page-number-citation ref-id="indexId434909-266"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_aton()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-79"><fo:page-number-citation ref-id="indexId434909-79"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-265"><fo:page-number-citation ref-id="indexId434909-265"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_ntoa()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-81"><fo:page-number-citation ref-id="indexId434909-81"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-264"><fo:page-number-citation ref-id="indexId434909-264"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_ntoa()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-80"><fo:page-number-citation ref-id="indexId434909-80"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-126"><fo:page-number-citation ref-id="indexId434909-126"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">inet_pton()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-77"><fo:page-number-citation ref-id="indexId434909-77"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">Internet Control Message Protocol<fo:leader leader-pattern="space" width="1em"/>see ICMP.</fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">Internet protocol<fo:leader leader-pattern="space" width="1em"/>see IP.</fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">Internet Relay Chat<fo:leader leader-pattern="space" width="1em"/>see IRC.</fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">ioctl()<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-213"><fo:page-number-citation ref-id="indexId434909-213"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">IP<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-42"><fo:page-number-citation ref-id="indexId434909-42"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-51"><fo:page-number-citation ref-id="indexId434909-51"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-57"><fo:page-number-citation ref-id="indexId434909-57"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-76"><fo:page-number-citation ref-id="indexId434909-76"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-98"><fo:page-number-citation ref-id="indexId434909-98"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-115"><fo:page-number-citation ref-id="indexId434909-115"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-131"><fo:page-number-citation ref-id="indexId434909-131"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-330"><fo:page-number-citation ref-id="indexId434909-330"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">IP address<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-226"><fo:page-number-citation ref-id="indexId434909-226"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-237"><fo:page-number-citation ref-id="indexId434909-237"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-240"><fo:page-number-citation ref-id="indexId434909-240"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-245"><fo:page-number-citation ref-id="indexId434909-245"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">IPv4<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-58"><fo:page-number-citation ref-id="indexId434909-58"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">IPv6<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-60"><fo:page-number-citation ref-id="indexId434909-60"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-75"><fo:page-number-citation ref-id="indexId434909-75"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-87"><fo:page-number-citation ref-id="indexId434909-87"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-88"><fo:page-number-citation ref-id="indexId434909-88"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">IRC<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-161"><fo:page-number-citation ref-id="indexId434909-161"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-335"><fo:page-number-citation ref-id="indexId434909-335"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">ISO/OSI<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-53"><fo:page-number-citation ref-id="indexId434909-53"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em">layered network model<fo:leader leader-pattern="space" width="1em"/>see ISO/OSI.</fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">Linux<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-6"><fo:page-number-citation ref-id="indexId434909-6"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">listen()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-96"><fo:page-number-citation ref-id="indexId434909-96"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-108"><fo:page-number-citation ref-id="indexId434909-108"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-268"><fo:page-number-citation ref-id="indexId434909-268"/></fo:basic-link></fo:block>
<fo:block start-indent="2.000000em" text-indent="-1.000000em">backlog<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-110"><fo:page-number-citation ref-id="indexId434909-110"/></fo:basic-link></fo:block>
<fo:block start-indent="2.000000em" text-indent="-1.000000em">with select()<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-155"><fo:page-number-citation ref-id="indexId434909-155"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">lo</fo:inline><fo:leader leader-pattern="space" width="1em"/>see loopback device.</fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">localhost<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-189"><fo:page-number-citation ref-id="indexId434909-189"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">loopback device<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-187"><fo:page-number-citation ref-id="indexId434909-187"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em"><fo:inline font-weight="bold">man</fo:inline> pages<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-218"><fo:page-number-citation ref-id="indexId434909-218"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">Maximum Transmission Unit<fo:leader leader-pattern="space" width="1em"/>see MTU.</fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">mirroring<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-19"><fo:page-number-citation ref-id="indexId434909-19"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">MSG_DONTROUTE</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-307"><fo:page-number-citation ref-id="indexId434909-307"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">MSG_DONTWAIT</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-308"><fo:page-number-citation ref-id="indexId434909-308"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">MSG_NOSIGNAL</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-311"><fo:page-number-citation ref-id="indexId434909-311"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">MSG_OOB</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-279"><fo:page-number-citation ref-id="indexId434909-279"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-304"><fo:page-number-citation ref-id="indexId434909-304"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">MSG_PEEK</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-282"><fo:page-number-citation ref-id="indexId434909-282"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">MSG_WAITALL</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-283"><fo:page-number-citation ref-id="indexId434909-283"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">MTU<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-206"><fo:page-number-citation ref-id="indexId434909-206"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em">NAT<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-84"><fo:page-number-citation ref-id="indexId434909-84"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-weight="bold">netstat</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-184"><fo:page-number-citation ref-id="indexId434909-184"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-186"><fo:page-number-citation ref-id="indexId434909-186"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">network address translation<fo:leader leader-pattern="space" width="1em"/>see NAT.</fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">NNTP<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-340"><fo:page-number-citation ref-id="indexId434909-340"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">non-blocking sockets<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-143"><fo:page-number-citation ref-id="indexId434909-143"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-222"><fo:page-number-citation ref-id="indexId434909-222"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-252"><fo:page-number-citation ref-id="indexId434909-252"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-310"><fo:page-number-citation ref-id="indexId434909-310"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">ntohl()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-65"><fo:page-number-citation ref-id="indexId434909-65"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-258"><fo:page-number-citation ref-id="indexId434909-258"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-263"><fo:page-number-citation ref-id="indexId434909-263"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">ntohs()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-64"><fo:page-number-citation ref-id="indexId434909-64"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-257"><fo:page-number-citation ref-id="indexId434909-257"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-262"><fo:page-number-citation ref-id="indexId434909-262"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">O_ASYNC</fo:inline><fo:leader leader-pattern="space" width="1em"/>see asynchronous I/O.</fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">O_NONBLOCK</fo:inline><fo:leader leader-pattern="space" width="1em"/>see non-blocking sockets.</fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">OpenSSL<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-201"><fo:page-number-citation ref-id="indexId434909-201"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">out-of-band data<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-280"><fo:page-number-citation ref-id="indexId434909-280"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-305"><fo:page-number-citation ref-id="indexId434909-305"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em">packet sniffer<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-211"><fo:page-number-citation ref-id="indexId434909-211"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">Pat<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-175"><fo:page-number-citation ref-id="indexId434909-175"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">perror()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-248"><fo:page-number-citation ref-id="indexId434909-248"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-269"><fo:page-number-citation ref-id="indexId434909-269"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">PF_INET</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-203"><fo:page-number-citation ref-id="indexId434909-203"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-315"><fo:page-number-citation ref-id="indexId434909-315"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">ping<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-190"><fo:page-number-citation ref-id="indexId434909-190"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">poll()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-156"><fo:page-number-citation ref-id="indexId434909-156"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-272"><fo:page-number-citation ref-id="indexId434909-272"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">port<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-116"><fo:page-number-citation ref-id="indexId434909-116"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-227"><fo:page-number-citation ref-id="indexId434909-227"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-246"><fo:page-number-citation ref-id="indexId434909-246"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">ports<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-95"><fo:page-number-citation ref-id="indexId434909-95"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-99"><fo:page-number-citation ref-id="indexId434909-99"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">private network<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-82"><fo:page-number-citation ref-id="indexId434909-82"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">promiscuous mode<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-212"><fo:page-number-citation ref-id="indexId434909-212"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em">raw sockets<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-33"><fo:page-number-citation ref-id="indexId434909-33"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-192"><fo:page-number-citation ref-id="indexId434909-192"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">read()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-27"><fo:page-number-citation ref-id="indexId434909-27"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recv()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-26"><fo:page-number-citation ref-id="indexId434909-26"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-30"><fo:page-number-citation ref-id="indexId434909-30"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-113"><fo:page-number-citation ref-id="indexId434909-113"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-274"><fo:page-number-citation ref-id="indexId434909-274"/></fo:basic-link></fo:block>
<fo:block start-indent="2.000000em" text-indent="-1.000000em">timeout<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-196"><fo:page-number-citation ref-id="indexId434909-196"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvfrom()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-117"><fo:page-number-citation ref-id="indexId434909-117"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-275"><fo:page-number-citation ref-id="indexId434909-275"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">recvtimeout()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-198"><fo:page-number-citation ref-id="indexId434909-198"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">references<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-326"><fo:page-number-citation ref-id="indexId434909-326"/></fo:basic-link></fo:block>
<fo:block start-indent="2.000000em" text-indent="-1.000000em">web-based<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-327"><fo:page-number-citation ref-id="indexId434909-327"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">RFCs<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-328"><fo:page-number-citation ref-id="indexId434909-328"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-weight="bold">route</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-185"><fo:page-number-citation ref-id="indexId434909-185"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">SA_RESTART</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-194"><fo:page-number-citation ref-id="indexId434909-194"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">Secure Sockets Layer<fo:leader leader-pattern="space" width="1em"/>see SSL.</fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">security<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-205"><fo:page-number-citation ref-id="indexId434909-205"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">select()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-12"><fo:page-number-citation ref-id="indexId434909-12"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-146"><fo:page-number-citation ref-id="indexId434909-146"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-147"><fo:page-number-citation ref-id="indexId434909-147"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-183"><fo:page-number-citation ref-id="indexId434909-183"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-197"><fo:page-number-citation ref-id="indexId434909-197"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-284"><fo:page-number-citation ref-id="indexId434909-284"/></fo:basic-link></fo:block>
<fo:block start-indent="2.000000em" text-indent="-1.000000em">with listen()<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-154"><fo:page-number-citation ref-id="indexId434909-154"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">send()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-25"><fo:page-number-citation ref-id="indexId434909-25"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-29"><fo:page-number-citation ref-id="indexId434909-29"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-54"><fo:page-number-citation ref-id="indexId434909-54"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-112"><fo:page-number-citation ref-id="indexId434909-112"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-300"><fo:page-number-citation ref-id="indexId434909-300"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendall()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-157"><fo:page-number-citation ref-id="indexId434909-157"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-166"><fo:page-number-citation ref-id="indexId434909-166"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sendto()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-55"><fo:page-number-citation ref-id="indexId434909-55"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-301"><fo:page-number-citation ref-id="indexId434909-301"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">serialization<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-160"><fo:page-number-citation ref-id="indexId434909-160"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">server<fo:leader leader-pattern="space" width="1em"/></fo:block>
<fo:block start-indent="2.000000em" text-indent="-1.000000em">datagram<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-139"><fo:page-number-citation ref-id="indexId434909-139"/></fo:basic-link></fo:block>
<fo:block start-indent="2.000000em" text-indent="-1.000000em">stream<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-134"><fo:page-number-citation ref-id="indexId434909-134"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">setsockopt()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-101"><fo:page-number-citation ref-id="indexId434909-101"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-170"><fo:page-number-citation ref-id="indexId434909-170"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-180"><fo:page-number-citation ref-id="indexId434909-180"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-217"><fo:page-number-citation ref-id="indexId434909-217"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-291"><fo:page-number-citation ref-id="indexId434909-291"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">shutdown()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-121"><fo:page-number-citation ref-id="indexId434909-121"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-313"><fo:page-number-citation ref-id="indexId434909-313"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">sigaction()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-135"><fo:page-number-citation ref-id="indexId434909-135"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-193"><fo:page-number-citation ref-id="indexId434909-193"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">SIGIO</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-254"><fo:page-number-citation ref-id="indexId434909-254"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">SIGPIPE</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-231"><fo:page-number-citation ref-id="indexId434909-231"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-312"><fo:page-number-citation ref-id="indexId434909-312"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">SIGURG</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-281"><fo:page-number-citation ref-id="indexId434909-281"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-306"><fo:page-number-citation ref-id="indexId434909-306"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">SMTP<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-338"><fo:page-number-citation ref-id="indexId434909-338"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">SO_BINDTODEVICE</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-293"><fo:page-number-citation ref-id="indexId434909-293"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">SO_BROADCAST</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-171"><fo:page-number-citation ref-id="indexId434909-171"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-295"><fo:page-number-citation ref-id="indexId434909-295"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">SO_RCVTIMEO</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-215"><fo:page-number-citation ref-id="indexId434909-215"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">SO_REUSEADDR</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-102"><fo:page-number-citation ref-id="indexId434909-102"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-181"><fo:page-number-citation ref-id="indexId434909-181"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-294"><fo:page-number-citation ref-id="indexId434909-294"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">SO_SNDTIMEO</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-216"><fo:page-number-citation ref-id="indexId434909-216"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_DGRAM</fo:inline><fo:leader leader-pattern="space" width="1em"/>see socket;datagram.</fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">SOCK_RAW<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-320"><fo:page-number-citation ref-id="indexId434909-320"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">SOCK_STREAM</fo:inline><fo:leader leader-pattern="space" width="1em"/>see socket;stream.</fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">socket<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-21"><fo:page-number-citation ref-id="indexId434909-21"/></fo:basic-link></fo:block>
<fo:block start-indent="2.000000em" text-indent="-1.000000em">datagram<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-36"><fo:page-number-citation ref-id="indexId434909-36"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-43"><fo:page-number-citation ref-id="indexId434909-43"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-45"><fo:page-number-citation ref-id="indexId434909-45"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-114"><fo:page-number-citation ref-id="indexId434909-114"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-277"><fo:page-number-citation ref-id="indexId434909-277"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-296"><fo:page-number-citation ref-id="indexId434909-296"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-303"><fo:page-number-citation ref-id="indexId434909-303"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-318"><fo:page-number-citation ref-id="indexId434909-318"/></fo:basic-link></fo:block>
<fo:block start-indent="2.000000em" text-indent="-1.000000em">raw<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-34"><fo:page-number-citation ref-id="indexId434909-34"/></fo:basic-link></fo:block>
<fo:block start-indent="2.000000em" text-indent="-1.000000em">stream<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-35"><fo:page-number-citation ref-id="indexId434909-35"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-38"><fo:page-number-citation ref-id="indexId434909-38"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-220"><fo:page-number-citation ref-id="indexId434909-220"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-276"><fo:page-number-citation ref-id="indexId434909-276"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-302"><fo:page-number-citation ref-id="indexId434909-302"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-316"><fo:page-number-citation ref-id="indexId434909-316"/></fo:basic-link></fo:block>
<fo:block start-indent="2.000000em" text-indent="-1.000000em">types<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-31"><fo:page-number-citation ref-id="indexId434909-31"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-32"><fo:page-number-citation ref-id="indexId434909-32"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">socket descriptor<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-24"><fo:page-number-citation ref-id="indexId434909-24"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-66"><fo:page-number-citation ref-id="indexId434909-66"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">socket()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-23"><fo:page-number-citation ref-id="indexId434909-23"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-92"><fo:page-number-citation ref-id="indexId434909-92"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-314"><fo:page-number-citation ref-id="indexId434909-314"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em">SOL_SOCKET</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-292"><fo:page-number-citation ref-id="indexId434909-292"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">Solaris<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-3"><fo:page-number-citation ref-id="indexId434909-3"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-298"><fo:page-number-citation ref-id="indexId434909-298"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">SSL<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-200"><fo:page-number-citation ref-id="indexId434909-200"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">strerror()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-249"><fo:page-number-citation ref-id="indexId434909-249"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-270"><fo:page-number-citation ref-id="indexId434909-270"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct addrinfo</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-67"><fo:page-number-citation ref-id="indexId434909-67"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct hostent</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-241"><fo:page-number-citation ref-id="indexId434909-241"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct in_addr</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-323"><fo:page-number-citation ref-id="indexId434909-323"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct pollfd</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-273"><fo:page-number-citation ref-id="indexId434909-273"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-69"><fo:page-number-citation ref-id="indexId434909-69"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-118"><fo:page-number-citation ref-id="indexId434909-118"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-278"><fo:page-number-citation ref-id="indexId434909-278"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-324"><fo:page-number-citation ref-id="indexId434909-324"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct sockaddr_in</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-72"><fo:page-number-citation ref-id="indexId434909-72"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-221"><fo:page-number-citation ref-id="indexId434909-221"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-322"><fo:page-number-citation ref-id="indexId434909-322"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-size="0.900000em" wrap-option="no-wrap">struct timeval</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-152"><fo:page-number-citation ref-id="indexId434909-152"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-285"><fo:page-number-citation ref-id="indexId434909-285"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">SunOS<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-4"><fo:page-number-citation ref-id="indexId434909-4"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-297"><fo:page-number-citation ref-id="indexId434909-297"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em">TCP<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-41"><fo:page-number-citation ref-id="indexId434909-41"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-317"><fo:page-number-citation ref-id="indexId434909-317"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-331"><fo:page-number-citation ref-id="indexId434909-331"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-weight="bold">gcc</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-39"><fo:page-number-citation ref-id="indexId434909-39"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-332"><fo:page-number-citation ref-id="indexId434909-332"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">TFTP<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-49"><fo:page-number-citation ref-id="indexId434909-49"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-334"><fo:page-number-citation ref-id="indexId434909-334"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">timeout, setting<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-214"><fo:page-number-citation ref-id="indexId434909-214"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">translations<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-20"><fo:page-number-citation ref-id="indexId434909-20"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">transmission control protocol<fo:leader leader-pattern="space" width="1em"/>see TCP.</fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">TRON<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-106"><fo:page-number-citation ref-id="indexId434909-106"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em">UDP<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-44"><fo:page-number-citation ref-id="indexId434909-44"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-50"><fo:page-number-citation ref-id="indexId434909-50"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-168"><fo:page-number-citation ref-id="indexId434909-168"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-319"><fo:page-number-citation ref-id="indexId434909-319"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-329"><fo:page-number-citation ref-id="indexId434909-329"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">user datagram protocol<fo:leader leader-pattern="space" width="1em"/>see UDP.</fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em">Vint Cerf<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-59"><fo:page-number-citation ref-id="indexId434909-59"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em">Windows<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-5"><fo:page-number-citation ref-id="indexId434909-5"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-122"><fo:page-number-citation ref-id="indexId434909-122"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-178"><fo:page-number-citation ref-id="indexId434909-178"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-233"><fo:page-number-citation ref-id="indexId434909-233"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-299"><fo:page-number-citation ref-id="indexId434909-299"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">Winsock<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-8"><fo:page-number-citation ref-id="indexId434909-8"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-123"><fo:page-number-citation ref-id="indexId434909-123"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">Winsock FAQ<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-14"><fo:page-number-citation ref-id="indexId434909-14"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">write()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-28"><fo:page-number-citation ref-id="indexId434909-28"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">WSACleanup()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-10"><fo:page-number-citation ref-id="indexId434909-10"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em"><fo:inline font-family="Liberation Mono" font-weight="bold" font-size="0.900000em">WSAStartup()</fo:inline><fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-9"><fo:page-number-citation ref-id="indexId434909-9"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em">XDR<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-165"><fo:page-number-citation ref-id="indexId434909-165"/></fo:basic-link>, <fo:basic-link internal-destination="indexId434909-341"><fo:page-number-citation ref-id="indexId434909-341"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em">XMPP<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-339"><fo:page-number-citation ref-id="indexId434909-339"/></fo:basic-link></fo:block>
<fo:block start-indent="1.000000em" text-indent="-1.000000em" space-before="1em">zombie process<fo:leader leader-pattern="space" width="1em"/><fo:basic-link internal-destination="indexId434909-136"><fo:page-number-citation ref-id="indexId434909-136"/></fo:basic-link></fo:block>
</fo:flow>
</fo:page-sequence>
</fo:root>
